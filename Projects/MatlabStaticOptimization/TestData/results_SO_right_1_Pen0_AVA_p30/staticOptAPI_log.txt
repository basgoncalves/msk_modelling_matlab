

Beginning Optimization for walking_baseline1 from 0.40 to 1.52 seconds. 


Optimizing t=0.400s
SQP optimizer had an issue - output state was 0
Trying IP instead
This step took 5.1193s. Exitflag was 2.

Optimizing t=0.420s
This step took 0.87682s. Exitflag was 2.

Optimizing t=0.440s
{Operation terminated by user during <a href="matlab:matlab.internal.language.introspective.errorDocCallback('DynamicsConstraint_momentMatching')" style="font-weight:bold">DynamicsConstraint_momentMatching</a>

In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('StaticOptimizationAPIVectorized>@(coeffs0)DynamicsConstraint_momentMatching(coeffs0,params)', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\StaticOptimizationAPIVectorized.m', 724)" style="font-weight:bold">StaticOptimizationAPIVectorized>@(coeffs0)DynamicsConstraint_momentMatching(coeffs0,params)</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\StaticOptimizationAPIVectorized.m',724,0)">line 724</a>)
    nonlcon = @(coeffs0) DynamicsConstraint_momentMatching(coeffs0,params) ;
In finDiffEvalAndChkErr

In finitedifferences

In computeFinDiffGradAndJac

In sqpInterface

In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('fmincon', 'C:\Program Files\MATLAB\R2022a\toolbox\shared\optimlib\fmincon.m', 882)" style="font-weight:bold">fmincon</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2022a\toolbox\shared\optimlib\fmincon.m',882,0)">line 882</a>)
    [X,FVAL,EXITFLAG,OUTPUT,LAMBDA,GRAD,HESSIAN] = sqpInterface(funfcn,X,full(A),full(B),full(Aeq),full(Beq), ...
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('StaticOptimizationAPIVectorized', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\StaticOptimizationAPIVectorized.m', 730)" style="font-weight:bold">StaticOptimizationAPIVectorized</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\StaticOptimizationAPIVectorized.m',730,0)">line 730</a>)
        [coeffsFinal,fval,exitflag,output] = fmincon(@(coeffs0) CostFunction(coeffs0,params), ...
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('MAIN_StaticOptimization_CMBBE_withTestData', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\MAIN_StaticOptimization_CMBBE_withTestData.m', 123)" style="font-weight:bold">MAIN_StaticOptimization_CMBBE_withTestData</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\MAIN_StaticOptimization_CMBBE_withTestData.m',123,0)">line 123</a>)
        StaticOptimizationAPIVectorized(INPUTS) ; % Run StaticOptimizationAPI} 
MAIN_StaticOptimization_CMBBE_withTestData
if system_dependent('IsDebugMode')==1, dbcont; end
if system_dependent('IsDebugMode')==1, dbstep in; end
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\MAIN_StaticOptimization_CMBBE_withTestData.m',43,1)">43  </a>INPUTS.appendActuators = true ; % Append reserve actuators at all coordinates?
savedir = [baseDir fp 'resilts_figures_parent'];
plotReuslts_CMBBE_withTestData(savedir)
[Warning: Directory already exists.] 
[> In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plotReuslts_CMBBE_withTestData', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m', 16)" style="font-weight:bold">plotReuslts_CMBBE_withTestData</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',16,0)">line 16</a>)
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('MAIN_StaticOptimization_CMBBE_withTestData', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\MAIN_StaticOptimization_CMBBE_withTestData.m', 43)" style="font-weight:bold">MAIN_StaticOptimization_CMBBE_withTestData</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\MAIN_StaticOptimization_CMBBE_withTestData.m',43,0)">line 43</a>)] 
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',98,1)">98  </a>            try % in child
if system_dependent('IsDebugMode')==1, dbcont; end
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',214,1)">214 </a>    [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(length(joints));
[ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(length(joints));
    last_plot_not_contact_force = 0;
    Plot_colors = colorBG(0,length(penalties));
    for iJoint = 1:length(joints)
        for iPen = 1:length(penalties)
            axes(ha(last_plot_not_contact_force+iJoint))

            JointName = joints{iJoint};
            force_data = contactForces.(['Pen_' penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(iJoint == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(iJoint == LastRow)
                xlabel('Gait cycle(%)')
            end
        end
    end

    % appearance
    ax = gca;
    lg = legend(ax.Children(2:2:end),flip(penalties));
    lg.Interpreter = "none";

    tight_subplot_ticks(ha,LastRow,0)

    mmfn_inspect
figure;plot(contactForces.Pen_0.hip_x,'DisplayName','contactForces.Pen_0.hip_x')
MATLAB has experienced a low-level graphics error, and may not have drawn correctly.
Read about what you can do to prevent this issue at <a href="matlab:opengl('problems')">Resolving Low-Level Graphics Issues</a> then restart MATLAB.
To share details of this issue with MathWorks technical support,
please include <a href="file:C:\Users\Biomech\AppData\Local\Temp\jogl.ex.16460">this file</a> with your service request.
clc
muscleForces
muscleForces = 
  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

       Pen_0: [1×1 struct]
      Pen_10: [1×1 struct]
     Pen_100: [1×1 struct]
     Pen_500: [1×1 struct]
    Pen_1000: [1×1 struct]
if system_dependent('IsDebugMode')==1, dbquit all; end
[muscleForces] = sumMuscleForces(muscleForces)
{Unrecognized function or variable 'muscleForces'.} 
MAIN_StaticOptimization_CMBBE_withTestData
{Operation terminated by user during <a href="matlab:matlab.internal.language.introspective.errorDocCallback('str2num>protected_conversion')" style="font-weight:bold">str2num>protected_conversion</a>

In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('str2num', 'C:\Program Files\MATLAB\R2022a\toolbox\matlab\strfun\str2num.m', 61)" style="font-weight:bold">str2num</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2022a\toolbox\matlab\strfun\str2num.m',61,0)">line 61</a>)
      [x,ok] = protected_conversion(['[' s ']'], isDefaultCall, isRestrictedEval); % Always add brackets
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('load_sto_file', 'C:\Git\MSKmodelling\src\OpenSim\load_sto_file.m', 75)" style="font-weight:bold">load_sto_file</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\src\OpenSim\load_sto_file.m',75,0)">line 75</a>)
    if ~isempty(str2num(f_name(1)))&& ~contains(f_name,'iliacus')
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plotReuslts_CMBBE_withTestData', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m', 87)" style="font-weight:bold">plotReuslts_CMBBE_withTestData</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',87,0)">line 87</a>)
            force_data = load_sto_file(force_file);
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('MAIN_StaticOptimization_CMBBE_withTestData', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\MAIN_StaticOptimization_CMBBE_withTestData.m', 158)" style="font-weight:bold">MAIN_StaticOptimization_CMBBE_withTestData</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\MAIN_StaticOptimization_CMBBE_withTestData.m',158,0)">line 158</a>)
plotReuslts_CMBBE_withTestData(savedir)} 
MAIN_StaticOptimization_CMBBE_withTestData
loading data for left leg...
results_SO_left_1_Pen0_AVA_p30
results_SO_left_2_Pen0_AVA_p30
results_SO_left_3_Pen0_AVA_p30
results_SO_left_4_Pen0_AVA_p30
results_SO_left_5_Pen0_AVA_p30
results_SO_left_6_Pen0_AVA_p30
results_SO_left_1_Pen1000_AVA_p30
results_SO_left_1_Pen100_AVA_p30
results_SO_left_1_Pen10_AVA_p30
results_SO_left_2_Pen1000_AVA_p30
results_SO_left_2_Pen100_AVA_p30
results_SO_left_2_Pen10_AVA_p30
results_SO_left_3_Pen1000_AVA_p30
results_SO_left_3_Pen100_AVA_p30
results_SO_left_3_Pen10_AVA_p30
results_SO_left_4_Pen1000_AVA_p30
results_SO_left_4_Pen100_AVA_p30
results_SO_left_4_Pen10_AVA_p30
results_SO_left_5_Pen1000_AVA_p30
results_SO_left_5_Pen100_AVA_p30
results_SO_left_5_Pen10_AVA_p30
results_SO_left_6_Pen1000_AVA_p30
results_SO_left_6_Pen100_AVA_p30
results_SO_left_6_Pen10_AVA_p30
results_SO_left_1_Pen1000_AVA_p30
results_SO_left_1_Pen100_AVA_p30
results_SO_left_2_Pen1000_AVA_p30
results_SO_left_2_Pen100_AVA_p30
results_SO_left_3_Pen1000_AVA_p30
results_SO_left_3_Pen100_AVA_p30
results_SO_left_4_Pen1000_AVA_p30
results_SO_left_4_Pen100_AVA_p30
results_SO_left_5_Pen1000_AVA_p30
results_SO_left_5_Pen100_AVA_p30
results_SO_left_6_Pen1000_AVA_p30
results_SO_left_6_Pen100_AVA_p30
results_SO_left_1_Pen500_AVA_p30
results_SO_left_2_Pen500_AVA_p30
results_SO_left_3_Pen500_AVA_p30
results_SO_left_4_Pen500_AVA_p30
results_SO_left_5_Pen500_AVA_p30
results_SO_left_6_Pen500_AVA_p30
results_SO_left_1_Pen1000_AVA_p30
results_SO_left_2_Pen1000_AVA_p30
results_SO_left_3_Pen1000_AVA_p30
results_SO_left_4_Pen1000_AVA_p30
results_SO_left_5_Pen1000_AVA_p30
results_SO_left_6_Pen1000_AVA_p30
if system_dependent('IsDebugMode')==1, dbquit; end
Convert2Mat
savedir
savedir =
    'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\TestData\'
if system_dependent('IsDebugMode')==1, dbcont; end
loading data for left leg...
results_SO_left_1_Pen0_AVA_p30
{Unrecognized function or variable 'resulstant_JCF'.
Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('Convert2Mat', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\Convert2Mat.m', 86)" style="font-weight:bold">Convert2Mat</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\Convert2Mat.m',86,0)">line 86</a>)
            [contactForces_data] = resulstant_JCF(contactForces_data,look_for_substrings,fs);} 
opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\Convert2Mat.m',86,0)
Convert2Mat
loading data for left leg...
results_SO_left_1_Pen0_AVA_p30
if system_dependent('IsDebugMode')==1, dbquit all; end
Convert2Mat
loading data for left leg...
results_SO_left_1_Pen0_AVA_p30
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\Convert2Mat.m',86,1)">86  </a>            [contactForces_data] = calc_resultant_JCF(contactForces_data,look_for_substrings,fs);
if system_dependent('IsDebugMode')==1, dbcont; end
muscleForces
muscleForces = 
  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    Pen_0: [1×1 struct]
 [muscleForces] = sumMuscleForces(muscleForces)
muscleForces = 
  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    Pen_0: [1×1 struct]
muscleForces
muscleForces = 
  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    Pen_0: [1×1 struct]
[muscleForces] = sumMuscleForces(muscleForces)
muscleForces = 
  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    Pen_0: [1×1 struct]
sumMuscleForces
if system_dependent('IsDebugMode')==1, dbquit all; end
Convert2Mat
loading data for left leg...
results_SO_left_1_Pen0_AVA_p30
[muscleForces] = sumMuscleForces(muscleForces)
{Unrecognized field name "Pen".
Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('sumMuscleForces', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\sumMuscleForces.m', 5)" style="font-weight:bold">sumMuscleForces</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\sumMuscleForces.m',5,0)">line 5</a>)
n = muscleForces.Pen;} 
if system_dependent('IsDebugMode')==1, dbcont; end
results_SO_left_2_Pen0_AVA_p30
 [muscleForces] = sumMuscleForces(muscleForces)
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\sumMuscleForces.m',5,1)">5   </a>n = muscleForces.Pen
muscles = fields(muscleForces.Pen_0)
muscles =
  40×1 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array
    {'addbrev_l'   }
    {'addlong_l'   }
    {'addmagDist_l'}
    {'addmagIsch_l'}
    {'addmagMid_l' }
    {'addmagProx_l'}
    {'bflh_l'      }
    {'bfsh_l'      }
    {'edl_l'       }
    {'ehl_l'       }
    {'fdl_l'       }
    {'fhl_l'       }
    {'gaslat_l'    }
    {'gasmed_l'    }
    {'glmax1_l'    }
    {'glmax2_l'    }
    {'glmax3_l'    }
    {'glmed1_l'    }
    {'glmed2_l'    }
    {'glmed3_l'    }
    {'glmin1_l'    }
    {'glmin2_l'    }
    {'glmin3_l'    }
    {'grac_l'      }
    {'iliacus_l'   }
    {'perbrev_l'   }
    {'perlong_l'   }
    {'piri_l'      }
    {'psoas_l'     }
    {'recfem_l'    }
    {'sart_l'      }
    {'semimem_l'   }
    {'semiten_l'   }
    {'soleus_l'    }
    {'tfl_l'       }
    {'tibant_l'    }
    {'tibpost_l'   }
    {'vasint_l'    }
    {'vaslat_l'    }
    {'vasmed_l'    }
penaltis = fileds(muscleForces); 
{Unrecognized function or variable 'fileds'.} 
penaltis = fields(muscleForces); 
muscles  = fields(muscleForces.(penaltis{1}))
muscles =
  40×1 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array
    {'addbrev_l'   }
    {'addlong_l'   }
    {'addmagDist_l'}
    {'addmagIsch_l'}
    {'addmagMid_l' }
    {'addmagProx_l'}
    {'bflh_l'      }
    {'bfsh_l'      }
    {'edl_l'       }
    {'ehl_l'       }
    {'fdl_l'       }
    {'fhl_l'       }
    {'gaslat_l'    }
    {'gasmed_l'    }
    {'glmax1_l'    }
    {'glmax2_l'    }
    {'glmax3_l'    }
    {'glmed1_l'    }
    {'glmed2_l'    }
    {'glmed3_l'    }
    {'glmin1_l'    }
    {'glmin2_l'    }
    {'glmin3_l'    }
    {'grac_l'      }
    {'iliacus_l'   }
    {'perbrev_l'   }
    {'perlong_l'   }
    {'piri_l'      }
    {'psoas_l'     }
    {'recfem_l'    }
    {'sart_l'      }
    {'semimem_l'   }
    {'semiten_l'   }
    {'soleus_l'    }
    {'tfl_l'       }
    {'tibant_l'    }
    {'tibpost_l'   }
    {'vasint_l'    }
    {'vaslat_l'    }
    {'vasmed_l'    }

    muscles_of_interest = strcat({'addbrev_' 'addlong_' 'addmagDist_' 'addmagIsch_' 'addmagMid_' 'addmagProx_' 'bflh_' 'bfsh_' ...
            'edl_' 'ehl_' 'fdl_' 'fhl_' 'gaslat_' 'gasmed_' 'glmax1_' 'glmax2_' 'glmax3_' 'glmed1_' 'glmed2_' 'glmed3_'...
            'glmin1_' 'glmin2_' 'glmin3_' 'grac_' 'iliacus_' 'perbrev_' 'perlong_' 'piri_' 'psoas_' 'recfem_' 'sart_' ...
            'semimem_' 'semiten_' 'soleus_' 'tfl_' 'tibant_' 'tibpost_' 'vasint_' 'vaslat_' 'vasmed_'})
muscles_of_interest =
  1×40 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array
  Columns 1 through 15
    {'addbrev_'}    {'addlong_'}    {'addmagDist_'}    {'addmagIsch_'}    {'addmagMid_'}    {'addmagProx_'}    {'bflh_'}    {'bfsh_'}    {'edl_'}    {'ehl_'}    {'fdl_'}    {'fhl_'}    {'gaslat_'}    {'gasmed_'}    {'glmax1_'}
  Columns 16 through 30
    {'glmax2_'}    {'glmax3_'}    {'glmed1_'}    {'glmed2_'}    {'glmed3_'}    {'glmin1_'}    {'glmin2_'}    {'glmin3_'}    {'grac_'}    {'iliacus_'}    {'perbrev_'}    {'perlong_'}    {'piri_'}    {'psoas_'}    {'recfem_'}
  Columns 31 through 40
    {'sart_'}    {'semimem_'}    {'semiten_'}    {'soleus_'}    {'tfl_'}    {'tibant_'}    {'tibpost_'}    {'vasint_'}    {'vaslat_'}    {'vasmed_'}
muscles_groups = {{'addbrev_' 'addlong_' 'addmagDist_' 'addmagIsch_' 'addmagMid_' 'addmagProx_' 'grac_'} {'bflh_' 'bfsh_' 'semimem_' 'semiten_'}...
            {'gaslat_' 'gasmed_'} {'glmax1_' 'glmax2_' 'glmax3_'} {'glmed1_' 'glmed2_' 'glmed3_'}...
            {'glmin1_' 'glmin2_' 'glmin3_'} {'iliacus_' 'psoas_'} 'recfem_' 'sart_' ...
             'soleus_' {'vasint_' 'vaslat_' 'vasmed_'}};
muscles_groups
muscles_groups =
  1×11 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array
    {1×7 cell}    {1×4 cell}    {1×2 cell}    {1×3 cell}    {1×3 cell}    {1×3 cell}    {1×2 cell}    {'recfem_'}    {'sart_'}    {'soleus_'}    {1×3 cell}
i = 1
i =
     1
muscles_groups{i}
ans =
  1×7 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array
    {'addbrev_'}    {'addlong_'}    {'addmagDist_'}    {'addmagIsch_'}    {'addmagMid_'}    {'addmagProx_'}    {'grac_'}
muscles
muscles =
  40×1 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array
    {'addbrev_l'   }
    {'addlong_l'   }
    {'addmagDist_l'}
    {'addmagIsch_l'}
    {'addmagMid_l' }
    {'addmagProx_l'}
    {'bflh_l'      }
    {'bfsh_l'      }
    {'edl_l'       }
    {'ehl_l'       }
    {'fdl_l'       }
    {'fhl_l'       }
    {'gaslat_l'    }
    {'gasmed_l'    }
    {'glmax1_l'    }
    {'glmax2_l'    }
    {'glmax3_l'    }
    {'glmed1_l'    }
    {'glmed2_l'    }
    {'glmed3_l'    }
    {'glmin1_l'    }
    {'glmin2_l'    }
    {'glmin3_l'    }
    {'grac_l'      }
    {'iliacus_l'   }
    {'perbrev_l'   }
    {'perlong_l'   }
    {'piri_l'      }
    {'psoas_l'     }
    {'recfem_l'    }
    {'sart_l'      }
    {'semimem_l'   }
    {'semiten_l'   }
    {'soleus_l'    }
    {'tfl_l'       }
    {'tibant_l'    }
    {'tibpost_l'   }
    {'vasint_l'    }
    {'vaslat_l'    }
    {'vasmed_l'    }
 muscles_groups{i}
ans =
  1×7 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array
    {'addbrev_'}    {'addlong_'}    {'addmagDist_'}    {'addmagIsch_'}    {'addmagMid_'}    {'addmagProx_'}    {'grac_'}
iPen = 1
iPen =
     1
iGroup = 
 iGroup = 
          ↑
{Error: Invalid expression. Check for missing or extra characters.
} 
iGroup =1
iGroup =
     1
muscleForces.(penaltis{iPen}).(muscles_groups{iGroup})
{Argument to dynamic structure reference must evaluate to a valid field name.} 
muscles = muscles_groups{iGroup}
muscles =
  1×7 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array
    {'addbrev_'}    {'addlong_'}    {'addmagDist_'}    {'addmagIsch_'}    {'addmagMid_'}    {'addmagProx_'}    {'grac_'}
muscles_groups_names = {'adductors' 'hamstrings' 'gastroc' 'glmax_all' 'glmed_all' 'glmin_all' 'ilio_psoas' 'vasti'};
  muscles = muscles_groups{iGroup};
        muscle_foces_single_group = [];
        for iMuscle = 1:length(muscles)
            muscle_foces_single_group(:,iMuscle) = muscleForces.(penaltis{iPen}).(muscles_groups{iGroup});

        end
{Argument to dynamic structure reference must evaluate to a valid field name.} 
iMuscle
iMuscle =
     1
muscleForces.(penaltis{iPen}).(muscles_groups{iGroup})
{Argument to dynamic structure reference must evaluate to a valid field name.} 
muscles_groups{iGroup}
ans =
  1×7 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array
    {'addbrev_'}    {'addlong_'}    {'addmagDist_'}    {'addmagIsch_'}    {'addmagMid_'}    {'addmagProx_'}    {'grac_'}
 muscles = muscles_groups{iGroup};
        muscle_foces_single_group = [];
        for iMuscle = 1:length(muscles)
            muscle_foces_single_group(:,iMuscle) = muscleForces.(penaltis{iPen}).(muscles{iMuscle});

        end
{Unrecognized field name "addbrev_".} 
strcat({{'addbrev_' 'addlong_' 'addmagDist_' 'addmagIsch_' 'addmagMid_' 'addmagProx_' 'grac_'} {'bflh_' 'bfsh_' 'semimem_' 'semiten_'}...
            {'gaslat_' 'gasmed_'} {'glmax1_' 'glmax2_' 'glmax3_'} {'glmed1_' 'glmed2_' 'glmed3_'}...
            {'glmin1_' 'glmin2_' 'glmin3_'} {'iliacus_' 'psoas_'} {'vasint_' 'vaslat_' 'vasmed_'}},l)
{Unrecognized function or variable 'l'.} 
if system_dependent('IsDebugMode')==1, dbquit; end
[muscleForces] = sumMuscleForces(muscleForces,l)
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\sumMuscleForces.m',14,1)">14  </a>for iPen = 1:length(penaltis)
if system_dependent('IsDebugMode')==1, dbcont; end
muscles{iMuscle}
ans =
    'addbrev_'
muscles_groups
muscles_groups =
  1×8 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array
    {1×8 cell}    {1×5 cell}    {1×3 cell}    {1×4 cell}    {1×4 cell}    {1×4 cell}    {1×3 cell}    {1×4 cell}
muscles_groups{1}
ans =
  1×8 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array
    {'addbrev_'}    {'addlong_'}    {'addmagDist_'}    {'addmagIsch_'}    {'addmagMid_'}    {'addmagProx_'}    {'grac_'}    {'l'}
muscles_groups = {strcat({'addbrev_' 'addlong_' 'addmagDist_' 'addmagIsch_' 'addmagMid_' 'addmagProx_' 'grac_'},leg) ...
    strcat({'bflh_' 'bfsh_' 'semimem_' 'semiten_'},leg)...
            strcat({'gaslat_' 'gasmed_'},leg)...
            strcat({'glmax1_' 'glmax2_' 'glmax3_'},leg)...
            strcat({'glmed1_' 'glmed2_' 'glmed3_'},leg)...
            strcat({'glmin1_' 'glmin2_' 'glmin3_'},leg)...
            strcat({'iliacus_' 'psoas_'},leg) ...
            strcat({'vasint_' 'vaslat_' 'vasmed_'},leg)};
   muscles = muscles_groups{iGroup}
muscles =
  1×7 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array
    {'addbrev_l'}    {'addlong_l'}    {'addmagDist_l'}    {'addmagIsch_l'}    {'addmagMid_l'}    {'addmagProx_l'}    {'grac_l'}
  for iGroup = 1:length(muscles_groups)
        muscles = muscles_groups{iGroup};
        muscle_foces_single_group = [];
        for iMuscle = 1:length(muscles)
            muscle_foces_single_group(:,iMuscle) = muscleForces.(penaltis{iPen}).(muscles{iMuscle});

        end
        muscleForces.(muscles_groups_names{iGroup}) = sum(muscle_foces_single_group);

    end
{Unable to perform assignment because the indices on the left side are not compatible with the size of the right side.} 
iMuscle
iMuscle =
     1
muscleForces.(penaltis{iPen})
ans = 
  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

       addbrev_l: [101×2 double]
       addlong_l: [101×2 double]
    addmagDist_l: [101×2 double]
    addmagIsch_l: [101×2 double]
     addmagMid_l: [101×2 double]
    addmagProx_l: [101×2 double]
          bflh_l: [101×2 double]
          bfsh_l: [101×2 double]
           edl_l: [101×2 double]
           ehl_l: [101×2 double]
           fdl_l: [101×2 double]
           fhl_l: [101×2 double]
        gaslat_l: [101×2 double]
        gasmed_l: [101×2 double]
        glmax1_l: [101×2 double]
        glmax2_l: [101×2 double]
        glmax3_l: [101×2 double]
        glmed1_l: [101×2 double]
        glmed2_l: [101×2 double]
        glmed3_l: [101×2 double]
        glmin1_l: [101×2 double]
        glmin2_l: [101×2 double]
        glmin3_l: [101×2 double]
          grac_l: [101×2 double]
       iliacus_l: [101×2 double]
       perbrev_l: [101×2 double]
       perlong_l: [101×2 double]
          piri_l: [101×2 double]
         psoas_l: [101×2 double]
        recfem_l: [101×2 double]
          sart_l: [101×2 double]
       semimem_l: [101×2 double]
       semiten_l: [101×2 double]
        soleus_l: [101×2 double]
           tfl_l: [101×2 double]
        tibant_l: [101×2 double]
       tibpost_l: [101×2 double]
        vasint_l: [101×2 double]
        vaslat_l: [101×2 double]
        vasmed_l: [101×2 double]
muscleForces.(penaltis{iPen}).(muscles{iMuscle})
ans =
   23.4583   21.5458
   22.6733   20.9726
   21.8009   20.2445
   20.9255   19.4702
   20.0454   18.6242
   19.2433   17.8005
   18.4955   16.9922
   17.9484   16.3462
   17.4559   15.7444
   17.2710   15.4525
   17.1451   15.2263
   17.2645   15.2768
   17.4796   15.4426
   17.8538   15.8005
   18.3594   16.3170
   18.9635   16.9524
   19.7402   17.7810
   20.5689   18.6680
   21.5989   19.7619
   22.6648   20.8914
   23.8796   22.1674
   25.1519   23.4948
   26.5278   24.9146
   27.9984   26.4048
   29.5455   27.9518
   31.2242   29.5677
   32.9469   31.2066
   34.8022   32.8574
   36.6689   34.4949
   38.5597   36.0488
   40.3965   37.5307
   42.1282   38.8726
   43.6661   40.0470
   45.0360   41.0764
   46.0305   41.8222
   46.8876   42.4642
   47.2234   42.7136
   47.4596   42.8842
   47.2796   42.7142
   47.0235   42.4703
   46.6072   42.0704
   46.2864   41.7170
   46.0545   41.4070
   46.3486   41.4755
   46.8530   41.6955
   48.4757   42.7892
   50.3605   44.0942
   53.5153   46.4469
   57.0261   49.1045
   61.3534   52.4612
   65.9585   56.0733
   70.8414   59.9407
   75.5984   63.7912
   80.3006   67.6344
   84.1959   71.0679
   87.8529   74.3694
   90.0666   76.8258
   91.9015   81.0222
   92.7899   89.5689
   94.9014   90.2429
   98.3265   82.4609
   92.5556   77.4574
   82.4287   73.7699
   76.7591   69.5050
   71.6993   65.1128
   66.2888   60.1379
   60.9409   55.6779
   55.7641   52.6255
   51.0215   49.6086
   46.7798   46.6328
   42.6548   42.5049
   38.5896   37.7853
   35.4670   33.3538
   32.5381   29.0998
   30.2546   27.1329
   28.1118   25.2957
   26.3908   23.8475
   24.8791   22.6007
   23.6269   21.6037
   22.6415   20.8763
   21.8042   20.2986
   21.2854   20.0443
   20.9925   19.8643
   25.1512   20.0159
   30.4908   20.3286
   39.7367   21.1743
   39.4427   21.7506
   26.4287   21.9679
   21.8216   22.4916
   22.2586   23.1991
   22.6524   23.8559
   23.0338   24.4981
   23.2523   24.9499
   23.4270   25.3443
   23.4410   25.5283
   23.3895   25.6059
   23.2439   25.5306
   23.0352   25.3350
   22.7856   25.0615
   22.4446   24.6752
   22.0811   24.2614
muscles{iMuscle}
ans =
    'addbrev_l'
contactForces_data
{Unrecognized function or variable 'contactForces_data'.} 
contactForces
{Unrecognized function or variable 'contactForces'.} 
if system_dependent('IsDebugMode')==1, dbquit; end
if system_dependent('IsDebugMode')==1, dbquit; end
Convert2Mat
loading data for left leg...
results_SO_left_1_Pen0_AVA_p30
results_SO_left_2_Pen0_AVA_p30
results_SO_left_3_Pen0_AVA_p30
results_SO_left_4_Pen0_AVA_p30
results_SO_left_5_Pen0_AVA_p30
results_SO_left_6_Pen0_AVA_p30
results_SO_left_1_Pen1000_AVA_p30
results_SO_left_1_Pen100_AVA_p30
results_SO_left_1_Pen10_AVA_p30
results_SO_left_2_Pen1000_AVA_p30
results_SO_left_2_Pen100_AVA_p30
results_SO_left_2_Pen10_AVA_p30
results_SO_left_3_Pen1000_AVA_p30
results_SO_left_3_Pen100_AVA_p30
results_SO_left_3_Pen10_AVA_p30
results_SO_left_4_Pen1000_AVA_p30
results_SO_left_4_Pen100_AVA_p30
results_SO_left_4_Pen10_AVA_p30
results_SO_left_5_Pen1000_AVA_p30
results_SO_left_5_Pen100_AVA_p30
results_SO_left_5_Pen10_AVA_p30
results_SO_left_6_Pen1000_AVA_p30
results_SO_left_6_Pen100_AVA_p30
results_SO_left_6_Pen10_AVA_p30
results_SO_left_1_Pen1000_AVA_p30
results_SO_left_1_Pen100_AVA_p30
results_SO_left_2_Pen1000_AVA_p30
results_SO_left_2_Pen100_AVA_p30
results_SO_left_3_Pen1000_AVA_p30
results_SO_left_3_Pen100_AVA_p30
results_SO_left_4_Pen1000_AVA_p30
results_SO_left_4_Pen100_AVA_p30
results_SO_left_5_Pen1000_AVA_p30
results_SO_left_5_Pen100_AVA_p30
results_SO_left_6_Pen1000_AVA_p30
results_SO_left_6_Pen100_AVA_p30
results_SO_left_1_Pen500_AVA_p30
results_SO_left_2_Pen500_AVA_p30
results_SO_left_3_Pen500_AVA_p30
results_SO_left_4_Pen500_AVA_p30
results_SO_left_5_Pen500_AVA_p30
results_SO_left_6_Pen500_AVA_p30
results_SO_left_1_Pen1000_AVA_p30
results_SO_left_2_Pen1000_AVA_p30
results_SO_left_3_Pen1000_AVA_p30
results_SO_left_4_Pen1000_AVA_p30
results_SO_left_5_Pen1000_AVA_p30
results_SO_left_6_Pen1000_AVA_p30
 [muscleForces] = sumMuscleForces(muscleForces,l);
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\sumMuscleForces.m',24,1)">24  </a>            muscle_foces_single_group(:,iMuscle) = muscleForces.(penaltis{iPen}).(muscles{iMuscle});
muscleForces.(penaltis{iPen}).(muscles{iMuscle})
ans =
   23.4583   21.5458   23.7421   25.9579   23.5889   23.7831
   22.6733   20.9726   23.2055   25.1558   23.0330   23.1119
   21.8009   20.2445   22.5805   24.2817   22.4266   22.3709
   20.9255   19.4702   21.9273   23.3993   21.8013   21.6005
   20.0454   18.6242   21.2160   22.4934   21.1372   20.7848
   19.2433   17.8005   20.4879   21.6105   20.4705   19.9661
   18.4955   16.9922   19.7423   20.7637   19.8008   19.1455
   17.9484   16.3462   19.0295   20.0047   19.1940   18.4182
   17.4559   15.7444   18.3341   19.3271   18.6204   17.7164
   17.2710   15.4525   17.7543   18.8153   18.2152   17.2521
   17.1451   15.2263   17.2003   18.3937   17.8474   16.8469
   17.2645   15.2768   16.8419   18.2054   17.7591   16.6941
   17.4796   15.4426   16.5177   18.0839   17.7240   16.6584
   17.8538   15.8005   16.3725   18.2484   17.9711   16.8180
   18.3594   16.3170   16.2891   18.4540   18.3276   17.1475
   18.9635   16.9524   16.3436   18.9684   18.9285   17.6044
   19.7402   17.7810   16.4929   19.5353   19.6935   18.2799
   20.5689   18.6680   16.7481   20.3637   20.6416   19.0214
   21.5989   19.7619   17.1365   21.2749   21.7802   20.0177
   22.6648   20.8914   17.6009   22.3828   23.0278   21.0592
   23.8796   22.1674   18.2265   23.5847   24.4529   22.2872
   25.1519   23.4948   18.8923   24.9132   25.9224   23.5735
   26.5278   24.9146   19.7251   26.3404   27.5440   24.9647
   27.9984   26.4048   20.5826   27.8465   29.1859   26.4267
   29.5455   27.9518   21.5666   29.4637   30.9269   27.9458
   31.2242   29.5677   22.5886   31.1318   32.6943   29.5516
   32.9469   31.2066   23.7032   32.9163   34.5261   31.1863
   34.8022   32.8574   24.8747   34.7272   36.3905   32.8975
   36.6689   34.4949   26.1145   36.6146   38.2941   34.6112
   38.5597   36.0488   27.4199   38.5022   40.1878   36.3136
   40.3965   37.5307   28.7659   40.3376   42.0753   37.9614
   42.1282   38.8726   30.1396   42.1190   43.7901   39.5028
   43.6661   40.0470   31.5211   43.6895   45.4567   40.8792
   45.0360   41.0764   32.8118   45.1000   46.6732   42.1124
   46.0305   41.8222   34.0695   46.1904   47.7926   43.0551
   46.8876   42.4642   35.1007   47.0078   48.3310   43.8914
   47.2234   42.7136   36.0301   47.5085   48.6929   44.3362
   47.4596   42.8842   36.6882   47.7124   48.5842   44.7029
   47.2796   42.7142   37.1788   47.7123   48.2923   44.7325
   47.0235   42.4703   37.4530   47.5697   47.7639   44.6920
   46.6072   42.0704   37.5812   47.3723   47.2256   44.5036
   46.2864   41.7170   37.6121   47.3744   46.6808   44.3841
   46.0545   41.4070   37.6852   47.4112   46.4962   44.3288
   46.3486   41.4755   37.7713   48.0718   46.4231   44.6986
   46.8530   41.6955   38.2813   48.8391   47.2064   45.2385
   48.4757   42.7892   38.9004   50.3654   48.1612   46.6813
   50.3605   44.0942   40.2783   52.0794   50.1611   48.3321
   53.5153   46.4469   41.9128   54.3853   52.4116   50.9780
   57.0261   49.1045   44.2991   56.8445   55.3961   53.8802
   61.3534   52.4612   47.0375   59.5642   58.5825   57.3706
   65.9585   56.0733   50.2660   62.2577   62.0500   61.0147
   70.8414   59.9407   53.7082   64.9251   65.4759   64.8125
   75.5984   63.7912   57.3041   67.3378   68.8720   68.4692
   80.3006   67.6344   60.7246   69.6005   71.9139   72.0645
   84.1959   71.0679   64.0853   71.3371   74.8349   75.1523
   87.8529   74.3694   66.7121   72.9069   77.0126   78.0968
   90.0666   76.8258   70.0463   83.4354   79.3671   80.2009
   91.9015   81.0222   83.3349   94.6413   84.9228   84.8892
   92.7899   89.5689   94.3982   82.3995   89.0259   96.0381
   94.9014   90.2429   98.2725   71.5833   88.4357   96.2715
   98.3265   82.4609   93.3809   68.9647   84.9871   84.7806
   92.5556   77.4574   75.3404   66.0480   77.2508   79.1331
   82.4287   73.7699   65.6457   62.3562   71.5717   76.2535
   76.7591   69.5050   62.4123   58.5101   67.4853   72.2148
   71.6993   65.1128   58.5681   54.4397   62.9242   67.9675
   66.2888   60.1379   54.4948   50.4749   58.1852   63.1627
   60.9409   55.6779   50.2596   46.6011   53.4917   58.7047
   55.7641   52.6255   46.0274   44.2718   48.8764   55.1946
   51.0215   49.6086   42.1924   42.7148   45.5183   51.9713
   46.7798   46.6328   38.5232   40.0735   42.1501   49.0790
   42.6548   42.5049   35.4485   37.1548   38.7460   44.3072
   38.5896   37.7853   32.6813   33.6097   35.4169   38.5703
   35.4670   33.3538   30.4120   30.1294   32.2093   34.8838
   32.5381   29.0998   28.5165   28.6024   29.7641   31.6030
   30.2546   27.1329   26.9325   27.1540   27.9543   29.4536
   28.1118   25.2957   25.7280   26.0514   26.5343   27.4457
   26.3908   23.8475   24.6793   25.0606   25.2742   25.8627
   24.8791   22.6007   23.9986   24.3132   24.3885   24.4924
   23.6269   21.6037   23.3843   23.7040   23.5705   23.3860
   22.6415   20.8763   23.1106   23.2677   23.0971   22.5511
   21.8042   20.2986   22.8988   22.9894   22.6863   21.8670
   21.2854   20.0443   22.9349   22.8283   22.5258   21.5014
   20.9925   19.8643   23.0700   22.8397   22.4644   21.2088
   25.1512   20.0159   23.3784   22.9237   22.5761   21.2387
   30.4908   20.3286   23.8062   23.1862   28.8420   21.5537
   39.7367   21.1743   24.3409   23.4845   40.6254   22.8115
   39.4427   21.7506   24.9863   23.9334   40.5978   23.3462
   26.4287   21.9679   25.6813   24.3929   35.2864   22.9170
   21.8216   22.4916   26.4273   24.8998   30.2407   23.1332
   22.2586   23.1991   27.1805   25.3872   25.3409   23.7368
   22.6524   23.8559   27.8509   25.8064   25.8799   24.2853
   23.0338   24.4981   28.4778   26.1501   26.3771   24.8181
   23.2523   24.9499   28.9088   26.3548   26.6860   25.1387
   23.4270   25.3443   29.2237   26.4321   26.8851   25.3950
   23.4410   25.5283   29.3188   26.3723   26.8764   25.4155
   23.3895   25.6059   29.2437   26.1771   26.7240   25.3171
   23.2439   25.5306   29.0046   25.8959   26.4330   25.0484
   23.0352   25.3350   28.5884   25.5144   26.0223   24.6473
   22.7856   25.0615   28.0861   25.0978   25.5536   24.1605
   22.4446   24.6752   27.4325   24.6208   25.0034   23.5590
   22.0811   24.2614   26.7493   24.1348   24.4373   22.9295
iMuscle
iMuscle =
     1
figure;plot(muscleForces.Pen_0.addlong_l,'DisplayName','muscleForces.Pen_0.addlong_l')
 mean(muscleForces.(penaltis{iPen}).(muscles{iMuscle}),2)
ans =
   23.6793
   23.0254
   22.2842
   21.5207
   20.7168
   19.9298
   19.1567
   18.4902
   17.8664
   17.4601
   17.1099
   17.0070
   16.9844
   17.1774
   17.4824
   17.9601
   18.5871
   19.3353
   20.2617
   21.2712
   22.4330
   23.6580
   25.0028
   26.4075
   27.9000
   29.4597
   31.0809
   32.7583
   34.4664
   36.1720
   37.8446
   39.4254
   40.8766
   42.1350
   43.1601
   43.9471
   44.4175
   44.6719
   44.6516
   44.4954
   44.2267
   44.0091
   43.8972
   44.1315
   44.6856
   45.8955
   47.5509
   49.9417
   52.7584
   56.0616
   59.6034
   63.2840
   66.8955
   70.3731
   73.4456
   76.1585
   79.9903
   86.7853
   90.7034
   89.9512
   85.4834
   77.9642
   72.0043
   67.8144
   63.4519
   58.7907
   54.2793
   50.4600
   47.1711
   43.8731
   40.1360
   36.1089
   32.7425
   30.0206
   28.1470
   26.5278
   25.1859
   24.1121
   23.2126
   22.5907
   22.0907
   21.8534
   21.7399
   22.5473
   24.7013
   28.6955
   29.0095
   26.1124
   24.8357
   24.5172
   25.0551
   25.5592
   25.8817
   26.1179
   26.1587
   26.0762
   25.8594
   25.5238
   25.1242
   24.6226
   24.0989
for iMuscle = 1:length(muscles)
            muscle_foces_single_group(:,iMuscle) = mean(muscleForces.(penaltis{iPen}).(muscles{iMuscle}),2);

        end
        muscleForces.(muscles_groups_names{iGroup}) = sum(muscle_foces_single_group);
  muscleForces.(muscles_groups_names{iGroup}) 
ans =
   1.0e+03 *
    3.7689    6.0405    0.5285    0.5490    0.4981    0.7620    2.6770
muscle_foces_single_group
muscle_foces_single_group =
   23.6793   26.6932    5.4928    5.8398    4.9270    4.3163   32.1569
   23.0254   25.7814    5.4752    5.8258    4.9063    4.4977   31.4326
   22.2842   24.7389    5.4559    5.8067    4.8827    5.6711   30.6064
   21.5207   23.6688    5.4361    5.7861    4.8580    6.8608   29.7583
   20.7168   22.5509    5.4154    5.7626    4.8311    8.0843   28.8703
   19.9298   21.4721    5.3941    5.7379    4.8030    7.4992   27.9893
   19.1567   20.4279    5.3723    5.7122    4.7737    5.0386   27.1135
   18.4902   19.5716    5.3504    5.6859    4.7440    4.1723   26.3085
   17.8664   18.7911    5.3285    5.6594    4.7142    4.1472   25.5316
   17.4601   18.3881    5.3071    5.6328    4.6860    4.1268   24.9050
   17.1099   18.0825    5.2859    5.6064    4.6584    4.1079   24.3173
   17.0070   18.2047    5.2658    5.5804    4.6342    4.0967   23.9005
   16.9844   18.4644    5.2461    5.5544    4.6114    4.0884   23.5387
   17.1774   19.0894    5.2275    5.5289    4.5928    4.0885   23.3201
   17.4824   19.8981    5.2095    5.5034    4.5769    4.0936   23.1722
   17.9601   20.9881    5.1927    5.4783    4.5655    4.1063   23.1279
   18.5871   22.3141    5.1770    5.4535    4.5583    4.1256   23.1663
   19.3353   23.8337    5.1621    5.4288    4.5546    4.1501   23.2679
   20.2617   25.6411    5.1487    5.4048    4.5560    4.1808   23.4571
   21.2712   27.5888    5.1359    5.3810    4.5595    4.2139   23.6841
   22.4330   29.8122    5.1244    5.3579    4.5668    4.2499   23.9791
   23.6580   32.1611    5.1134    5.3350    4.5752    4.2863   24.2999
   25.0028   34.7668    5.1033    5.3128    4.5858    4.3228   24.6682
   26.4075   37.5203    5.0936    5.2910    4.5968    4.3583   25.0547
   27.9000   40.5064    5.0846    5.2698    4.6086    4.3925   25.4685
   29.4597   43.7046    5.0759    5.2492    4.6206    4.4250   25.8935
   31.0809   47.1059    5.0676    5.2291    4.6327    4.4561   26.3312
   32.7583   50.7536    5.0596    5.2097    4.6444    4.4846   26.7676
   34.4664   54.5598    5.0518    5.1908    4.6558    4.5116   27.2036
   36.1720   58.5111    5.0441    5.1725    4.6662    4.5355   27.6207
   37.8446   62.5010    5.0364    5.1546    4.6755    4.5574   28.0187
   39.4254   66.4354    5.0285    5.1373    4.6830    4.5758   28.3804
   40.8766   70.1922    5.0203    5.1201    4.6887    4.5916   28.7023
   42.1350   73.6446    5.0115    5.1033    4.6917    4.6035   28.9712
   43.1601   76.6687    5.0019    5.0863    4.6921    4.6123   29.1819
   43.9471   79.2343    4.9916    5.0695    4.6897    4.6176   29.3357
   44.4175   81.1501    4.9803    5.0524    4.6839    4.6192   29.4170
   44.6719   82.5996    4.9684    5.0354    4.6758    4.6182   29.4482
   44.6516   83.4305    4.9557    5.0185    4.6647    4.6143   29.4162
   44.4954   83.9234    4.9430    5.0019    4.6523    4.6090   29.3484
   44.2267   84.1092    4.9304    4.9859    4.6388    4.6028   29.2475
   44.0091   84.3418    4.9186    4.9708    4.6263    4.5976   29.1432
   43.8972   84.7442    4.9080    4.9568    4.6156    4.5942   29.0460
   44.1315   85.8612    4.8997    4.9443    4.6100    4.5955   28.9959
   44.6856   87.6571    4.8936    4.9332    4.6096    4.6012   28.9903
   45.8955   90.9059    4.8913    4.9246    4.6180    4.6146   29.0778
   47.5509   95.1516    4.8918    4.9178    4.6328    4.6331   29.2226
   49.9417  101.0459    4.8966    4.9144    4.6558    4.6582   29.4517
   52.7584  107.8702    4.9042    4.9136    4.6831    4.6865   29.7104
   56.0616  115.7145    4.9152    4.9165    4.7141    4.7174   29.9840
   59.6034  123.9527    4.9287    4.9229    4.7465    4.7486   30.2218
   63.2840  132.3169    4.9445    4.9329    4.7791    4.7789   30.3971
   66.8955  140.2177    4.9625    4.9472    4.8110    4.8069   30.4539
   70.3731  147.5522    4.9821    4.9648    4.8419    4.8325   30.3979
   73.4456  153.5239    5.0037    4.9871    4.8710    4.8543   30.1490
   76.1585  158.3659    5.0266    5.0127    4.8986    4.8930   29.7553
   79.9903  163.0314    5.0510    5.0428    5.9443    8.6354   30.0948
   86.7853  170.3266    5.0764    5.0761    8.2649   20.2217   32.5920
   90.7034  173.6219    5.1024    5.1127    8.7008   33.1075   36.0517
   89.9512  170.1084    5.1289    5.1521    7.3672   41.1318   39.0400
   85.4834  160.1967    5.1554    5.1938    6.0760   38.9615   38.3564
   77.9642  144.8602    5.1818    5.2374    5.2545   21.1152   31.6399
   72.0043  130.9905    5.2078    5.2819    5.0088    6.3295   25.9608
   67.8144  119.1711    5.2330    5.3272    5.0108    5.1149   23.8451
   63.4519  107.2425    5.2572    5.3720    5.0104    5.2916   22.3008
   58.7907   95.3222    5.2799    5.4156    5.0067    5.7576   21.4675
   54.2793   84.1703    5.3008    5.4572    5.0007    6.7926   20.7563
   50.4600   74.1872    5.3198    5.4965    4.9925   10.0856   20.2191
   47.1711   65.5411    5.3364    5.5325    5.1289   13.1090   19.8250
   43.8731   57.9264    5.3513    5.5661    5.4333   13.7403   18.9986
   40.1360   51.0828    5.3643    5.5966    5.3596   12.9445   18.0084
   36.1089   44.7518    5.3760    5.6249    5.0921   10.7652   16.7527
   32.7425   40.1886    5.3865    5.6506    4.9912    7.5689   15.4016
   30.0206   36.2861    5.3961    5.6746    4.9220    5.5520   14.5480
   28.1470   33.2710    5.4050    5.6966    4.9115    4.9277   14.3503
   26.5278   30.6914    5.4134    5.7169    4.9022    4.4523   14.3130
   25.1859   28.5856    5.4212    5.7356    4.8943    4.4195   14.5558
   24.1121   26.9169    5.4287    5.7524    4.8883    4.3903   14.9320
   23.2126   25.5299    5.4358    5.7679    4.8835    4.3634   15.3956
   22.5907   24.5734    5.4425    5.7812    4.8814    4.3423   16.0206
   22.0907   23.8022    5.4491    5.7936    4.8805    4.3242   16.7210
   21.8534   23.4217    5.4558    5.8040    4.8827    4.3138   17.5936
   21.7399   23.1821    5.4625    5.8138    4.8862    5.3738   18.7112
   22.5473   23.2775    5.4698    5.8224    4.8930   12.1488   21.6131
   24.7013   23.7026    5.4775    5.8305    4.9014   20.8772   24.6147
   28.6955   24.9605    5.4859    5.8380    4.9121   31.7381   27.4726
   29.0095   25.6740    5.4948    5.8450    4.9243   32.5107   28.8992
   26.1124   25.5676    5.5041    5.8516    4.9376   26.2030   28.8403
   24.8357   26.0635    5.5135    5.8573    4.9511   16.7235   28.5515
   24.5172   26.8919    5.5229    5.8626    4.9647    5.6333   28.3037
   25.0551   27.6808    5.5311    5.8664    4.9761    4.3863   29.4977
   25.5592   28.4333    5.5389    5.8698    4.9868    4.3944   30.8296
   25.8817   28.9864    5.5442    5.8716    4.9933    4.3959   31.8688
   26.1179   29.4305    5.5483    5.8728    4.9980    4.3953   32.7747
   26.1587   29.6317    5.5494    5.8730    4.9983    4.3894   33.3708
   26.0762   29.6616    5.5479    5.8722    4.9956    4.3813   33.7514
   25.8594   29.5051    5.5435    5.8705    4.9893    4.3707   33.8918
   25.5238   29.1588    5.5353    5.8668    4.9791    4.3592   33.7832
   25.1242   28.7100    5.5251    5.8620    4.9668    4.3472   33.5392
   24.6226   28.0748    5.5110    5.8532    4.9506    4.3352   33.0691
   24.0989   27.3992    5.4961    5.8435    4.9336    4.3232   32.5506
 muscleForces.(muscles_groups_names{iGroup}) = sum(muscle_foces_single_group,2)
muscleForces = 
  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

        Pen_0: [1×1 struct]
       Pen_10: [1×1 struct]
      Pen_100: [1×1 struct]
      Pen_500: [1×1 struct]
     Pen_1000: [1×1 struct]
    adductors: [101×1 double]

for iPen = 1:length(penaltis)
    for iGroup = 1:length(muscles_groups)
        muscleForces.(penaltis{iPen}).(muscles_groups_names{iGroup}) = [];
    end
end
sum(muscle_foces_single_group,2)
ans =
  103.1054
  100.9443
   99.4459
   97.8887
   96.2314
   92.8253
   87.5949
   84.3229
   82.0383
   80.5060
   79.1685
   78.6893
   78.4877
   79.0246
   79.9363
   81.4189
   83.3819
   85.7324
   88.6501
   91.8345
   95.5234
   99.4290
  103.7624
  108.3222
  113.2305
  118.4285
  123.9035
  129.6779
  135.6397
  141.7220
  147.7882
  153.6658
  159.1918
  164.1608
  168.4033
  171.8854
  174.3203
  176.0175
  176.7515
  176.9734
  176.7413
  176.6074
  176.7620
  178.0381
  180.3707
  184.9278
  191.0005
  199.5642
  209.5263
  221.0233
  233.1244
  245.4335
  257.0947
  267.9444
  276.8346
  284.1106
  297.7900
  328.3430
  352.4005
  357.8796
  339.4232
  291.2532
  250.7836
  231.5164
  213.9264
  197.0403
  181.7572
  170.7607
  161.6441
  150.8892
  138.4922
  124.4715
  111.9299
  102.3994
   96.7090
   92.0172
   88.7980
   86.4207
   84.5887
   83.6323
   83.0613
   83.3250
   85.1698
   95.7720
  110.1052
  129.1028
  132.3575
  123.0166
  112.4960
  101.6962
  102.9935
  105.6120
  107.5420
  109.1374
  109.9714
  110.2862
  110.0304
  109.2062
  108.0745
  106.4165
  104.6451
 muscles = muscles_groups{iGroup};
        muscle_foces_single_group = [];
        for iMuscle = 1:length(muscles)
            muscle_foces_single_group(:,iMuscle) = mean(muscleForces.(penaltis{iPen}).(muscles{iMuscle}),2);

        end
        muscleForces.(penaltis{iPen}).(muscles_groups_names{iGroup}) = sum(muscle_foces_single_group,2)
muscleForces = 
  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

        Pen_0: [1×1 struct]
       Pen_10: [1×1 struct]
      Pen_100: [1×1 struct]
      Pen_500: [1×1 struct]
     Pen_1000: [1×1 struct]
    adductors: [101×1 double]
penaltis{iPen}
ans =
    'Pen_1000'
iPen
iPen =
     5
iPen = 1
iPen =
     1
iGroup = 1
iGroup =
     1
      muscles = muscles_groups{iGroup};
        muscle_foces_single_group = [];
        for iMuscle = 1:length(muscles)
            muscle_foces_single_group(:,iMuscle) = mean(muscleForces.(penaltis{iPen}).(muscles{iMuscle}),2);

        end
        muscleForces.(penaltis{iPen}).(muscles_groups_names{iGroup}) = sum(muscle_foces_single_group,2);
if system_dependent('IsDebugMode')==1, dbquit; end
 [muscleForces] = sumMuscleForces(muscleForces,l);
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\sumMuscleForces.m',29,1)">29  </a>            muscle_foces_single_group(:,iMuscle) = mean(muscleForces.(penaltis{iPen}).(muscles{iMuscle}),2);
muscle_foces_single_group
muscle_foces_single_group =
     []
muscleForces.(penaltis{iPen}).(muscles{iMuscle})
ans =
   23.4583   21.5458   23.7421   25.9579   23.5889   23.7831
   22.6733   20.9726   23.2055   25.1558   23.0330   23.1119
   21.8009   20.2445   22.5805   24.2817   22.4266   22.3709
   20.9255   19.4702   21.9273   23.3993   21.8013   21.6005
   20.0454   18.6242   21.2160   22.4934   21.1372   20.7848
   19.2433   17.8005   20.4879   21.6105   20.4705   19.9661
   18.4955   16.9922   19.7423   20.7637   19.8008   19.1455
   17.9484   16.3462   19.0295   20.0047   19.1940   18.4182
   17.4559   15.7444   18.3341   19.3271   18.6204   17.7164
   17.2710   15.4525   17.7543   18.8153   18.2152   17.2521
   17.1451   15.2263   17.2003   18.3937   17.8474   16.8469
   17.2645   15.2768   16.8419   18.2054   17.7591   16.6941
   17.4796   15.4426   16.5177   18.0839   17.7240   16.6584
   17.8538   15.8005   16.3725   18.2484   17.9711   16.8180
   18.3594   16.3170   16.2891   18.4540   18.3276   17.1475
   18.9635   16.9524   16.3436   18.9684   18.9285   17.6044
   19.7402   17.7810   16.4929   19.5353   19.6935   18.2799
   20.5689   18.6680   16.7481   20.3637   20.6416   19.0214
   21.5989   19.7619   17.1365   21.2749   21.7802   20.0177
   22.6648   20.8914   17.6009   22.3828   23.0278   21.0592
   23.8796   22.1674   18.2265   23.5847   24.4529   22.2872
   25.1519   23.4948   18.8923   24.9132   25.9224   23.5735
   26.5278   24.9146   19.7251   26.3404   27.5440   24.9647
   27.9984   26.4048   20.5826   27.8465   29.1859   26.4267
   29.5455   27.9518   21.5666   29.4637   30.9269   27.9458
   31.2242   29.5677   22.5886   31.1318   32.6943   29.5516
   32.9469   31.2066   23.7032   32.9163   34.5261   31.1863
   34.8022   32.8574   24.8747   34.7272   36.3905   32.8975
   36.6689   34.4949   26.1145   36.6146   38.2941   34.6112
   38.5597   36.0488   27.4199   38.5022   40.1878   36.3136
   40.3965   37.5307   28.7659   40.3376   42.0753   37.9614
   42.1282   38.8726   30.1396   42.1190   43.7901   39.5028
   43.6661   40.0470   31.5211   43.6895   45.4567   40.8792
   45.0360   41.0764   32.8118   45.1000   46.6732   42.1124
   46.0305   41.8222   34.0695   46.1904   47.7926   43.0551
   46.8876   42.4642   35.1007   47.0078   48.3310   43.8914
   47.2234   42.7136   36.0301   47.5085   48.6929   44.3362
   47.4596   42.8842   36.6882   47.7124   48.5842   44.7029
   47.2796   42.7142   37.1788   47.7123   48.2923   44.7325
   47.0235   42.4703   37.4530   47.5697   47.7639   44.6920
   46.6072   42.0704   37.5812   47.3723   47.2256   44.5036
   46.2864   41.7170   37.6121   47.3744   46.6808   44.3841
   46.0545   41.4070   37.6852   47.4112   46.4962   44.3288
   46.3486   41.4755   37.7713   48.0718   46.4231   44.6986
   46.8530   41.6955   38.2813   48.8391   47.2064   45.2385
   48.4757   42.7892   38.9004   50.3654   48.1612   46.6813
   50.3605   44.0942   40.2783   52.0794   50.1611   48.3321
   53.5153   46.4469   41.9128   54.3853   52.4116   50.9780
   57.0261   49.1045   44.2991   56.8445   55.3961   53.8802
   61.3534   52.4612   47.0375   59.5642   58.5825   57.3706
   65.9585   56.0733   50.2660   62.2577   62.0500   61.0147
   70.8414   59.9407   53.7082   64.9251   65.4759   64.8125
   75.5984   63.7912   57.3041   67.3378   68.8720   68.4692
   80.3006   67.6344   60.7246   69.6005   71.9139   72.0645
   84.1959   71.0679   64.0853   71.3371   74.8349   75.1523
   87.8529   74.3694   66.7121   72.9069   77.0126   78.0968
   90.0666   76.8258   70.0463   83.4354   79.3671   80.2009
   91.9015   81.0222   83.3349   94.6413   84.9228   84.8892
   92.7899   89.5689   94.3982   82.3995   89.0259   96.0381
   94.9014   90.2429   98.2725   71.5833   88.4357   96.2715
   98.3265   82.4609   93.3809   68.9647   84.9871   84.7806
   92.5556   77.4574   75.3404   66.0480   77.2508   79.1331
   82.4287   73.7699   65.6457   62.3562   71.5717   76.2535
   76.7591   69.5050   62.4123   58.5101   67.4853   72.2148
   71.6993   65.1128   58.5681   54.4397   62.9242   67.9675
   66.2888   60.1379   54.4948   50.4749   58.1852   63.1627
   60.9409   55.6779   50.2596   46.6011   53.4917   58.7047
   55.7641   52.6255   46.0274   44.2718   48.8764   55.1946
   51.0215   49.6086   42.1924   42.7148   45.5183   51.9713
   46.7798   46.6328   38.5232   40.0735   42.1501   49.0790
   42.6548   42.5049   35.4485   37.1548   38.7460   44.3072
   38.5896   37.7853   32.6813   33.6097   35.4169   38.5703
   35.4670   33.3538   30.4120   30.1294   32.2093   34.8838
   32.5381   29.0998   28.5165   28.6024   29.7641   31.6030
   30.2546   27.1329   26.9325   27.1540   27.9543   29.4536
   28.1118   25.2957   25.7280   26.0514   26.5343   27.4457
   26.3908   23.8475   24.6793   25.0606   25.2742   25.8627
   24.8791   22.6007   23.9986   24.3132   24.3885   24.4924
   23.6269   21.6037   23.3843   23.7040   23.5705   23.3860
   22.6415   20.8763   23.1106   23.2677   23.0971   22.5511
   21.8042   20.2986   22.8988   22.9894   22.6863   21.8670
   21.2854   20.0443   22.9349   22.8283   22.5258   21.5014
   20.9925   19.8643   23.0700   22.8397   22.4644   21.2088
   25.1512   20.0159   23.3784   22.9237   22.5761   21.2387
   30.4908   20.3286   23.8062   23.1862   28.8420   21.5537
   39.7367   21.1743   24.3409   23.4845   40.6254   22.8115
   39.4427   21.7506   24.9863   23.9334   40.5978   23.3462
   26.4287   21.9679   25.6813   24.3929   35.2864   22.9170
   21.8216   22.4916   26.4273   24.8998   30.2407   23.1332
   22.2586   23.1991   27.1805   25.3872   25.3409   23.7368
   22.6524   23.8559   27.8509   25.8064   25.8799   24.2853
   23.0338   24.4981   28.4778   26.1501   26.3771   24.8181
   23.2523   24.9499   28.9088   26.3548   26.6860   25.1387
   23.4270   25.3443   29.2237   26.4321   26.8851   25.3950
   23.4410   25.5283   29.3188   26.3723   26.8764   25.4155
   23.3895   25.6059   29.2437   26.1771   26.7240   25.3171
   23.2439   25.5306   29.0046   25.8959   26.4330   25.0484
   23.0352   25.3350   28.5884   25.5144   26.0223   24.6473
   22.7856   25.0615   28.0861   25.0978   25.5536   24.1605
   22.4446   24.6752   27.4325   24.6208   25.0034   23.5590
   22.0811   24.2614   26.7493   24.1348   24.4373   22.9295
muscleForces.(penaltis{iPen}).(muscles{iMuscle})
ans =
   23.4583   21.5458   23.7421   25.9579   23.5889   23.7831
   22.6733   20.9726   23.2055   25.1558   23.0330   23.1119
   21.8009   20.2445   22.5805   24.2817   22.4266   22.3709
   20.9255   19.4702   21.9273   23.3993   21.8013   21.6005
   20.0454   18.6242   21.2160   22.4934   21.1372   20.7848
   19.2433   17.8005   20.4879   21.6105   20.4705   19.9661
   18.4955   16.9922   19.7423   20.7637   19.8008   19.1455
   17.9484   16.3462   19.0295   20.0047   19.1940   18.4182
   17.4559   15.7444   18.3341   19.3271   18.6204   17.7164
   17.2710   15.4525   17.7543   18.8153   18.2152   17.2521
   17.1451   15.2263   17.2003   18.3937   17.8474   16.8469
   17.2645   15.2768   16.8419   18.2054   17.7591   16.6941
   17.4796   15.4426   16.5177   18.0839   17.7240   16.6584
   17.8538   15.8005   16.3725   18.2484   17.9711   16.8180
   18.3594   16.3170   16.2891   18.4540   18.3276   17.1475
   18.9635   16.9524   16.3436   18.9684   18.9285   17.6044
   19.7402   17.7810   16.4929   19.5353   19.6935   18.2799
   20.5689   18.6680   16.7481   20.3637   20.6416   19.0214
   21.5989   19.7619   17.1365   21.2749   21.7802   20.0177
   22.6648   20.8914   17.6009   22.3828   23.0278   21.0592
   23.8796   22.1674   18.2265   23.5847   24.4529   22.2872
   25.1519   23.4948   18.8923   24.9132   25.9224   23.5735
   26.5278   24.9146   19.7251   26.3404   27.5440   24.9647
   27.9984   26.4048   20.5826   27.8465   29.1859   26.4267
   29.5455   27.9518   21.5666   29.4637   30.9269   27.9458
   31.2242   29.5677   22.5886   31.1318   32.6943   29.5516
   32.9469   31.2066   23.7032   32.9163   34.5261   31.1863
   34.8022   32.8574   24.8747   34.7272   36.3905   32.8975
   36.6689   34.4949   26.1145   36.6146   38.2941   34.6112
   38.5597   36.0488   27.4199   38.5022   40.1878   36.3136
   40.3965   37.5307   28.7659   40.3376   42.0753   37.9614
   42.1282   38.8726   30.1396   42.1190   43.7901   39.5028
   43.6661   40.0470   31.5211   43.6895   45.4567   40.8792
   45.0360   41.0764   32.8118   45.1000   46.6732   42.1124
   46.0305   41.8222   34.0695   46.1904   47.7926   43.0551
   46.8876   42.4642   35.1007   47.0078   48.3310   43.8914
   47.2234   42.7136   36.0301   47.5085   48.6929   44.3362
   47.4596   42.8842   36.6882   47.7124   48.5842   44.7029
   47.2796   42.7142   37.1788   47.7123   48.2923   44.7325
   47.0235   42.4703   37.4530   47.5697   47.7639   44.6920
   46.6072   42.0704   37.5812   47.3723   47.2256   44.5036
   46.2864   41.7170   37.6121   47.3744   46.6808   44.3841
   46.0545   41.4070   37.6852   47.4112   46.4962   44.3288
   46.3486   41.4755   37.7713   48.0718   46.4231   44.6986
   46.8530   41.6955   38.2813   48.8391   47.2064   45.2385
   48.4757   42.7892   38.9004   50.3654   48.1612   46.6813
   50.3605   44.0942   40.2783   52.0794   50.1611   48.3321
   53.5153   46.4469   41.9128   54.3853   52.4116   50.9780
   57.0261   49.1045   44.2991   56.8445   55.3961   53.8802
   61.3534   52.4612   47.0375   59.5642   58.5825   57.3706
   65.9585   56.0733   50.2660   62.2577   62.0500   61.0147
   70.8414   59.9407   53.7082   64.9251   65.4759   64.8125
   75.5984   63.7912   57.3041   67.3378   68.8720   68.4692
   80.3006   67.6344   60.7246   69.6005   71.9139   72.0645
   84.1959   71.0679   64.0853   71.3371   74.8349   75.1523
   87.8529   74.3694   66.7121   72.9069   77.0126   78.0968
   90.0666   76.8258   70.0463   83.4354   79.3671   80.2009
   91.9015   81.0222   83.3349   94.6413   84.9228   84.8892
   92.7899   89.5689   94.3982   82.3995   89.0259   96.0381
   94.9014   90.2429   98.2725   71.5833   88.4357   96.2715
   98.3265   82.4609   93.3809   68.9647   84.9871   84.7806
   92.5556   77.4574   75.3404   66.0480   77.2508   79.1331
   82.4287   73.7699   65.6457   62.3562   71.5717   76.2535
   76.7591   69.5050   62.4123   58.5101   67.4853   72.2148
   71.6993   65.1128   58.5681   54.4397   62.9242   67.9675
   66.2888   60.1379   54.4948   50.4749   58.1852   63.1627
   60.9409   55.6779   50.2596   46.6011   53.4917   58.7047
   55.7641   52.6255   46.0274   44.2718   48.8764   55.1946
   51.0215   49.6086   42.1924   42.7148   45.5183   51.9713
   46.7798   46.6328   38.5232   40.0735   42.1501   49.0790
   42.6548   42.5049   35.4485   37.1548   38.7460   44.3072
   38.5896   37.7853   32.6813   33.6097   35.4169   38.5703
   35.4670   33.3538   30.4120   30.1294   32.2093   34.8838
   32.5381   29.0998   28.5165   28.6024   29.7641   31.6030
   30.2546   27.1329   26.9325   27.1540   27.9543   29.4536
   28.1118   25.2957   25.7280   26.0514   26.5343   27.4457
   26.3908   23.8475   24.6793   25.0606   25.2742   25.8627
   24.8791   22.6007   23.9986   24.3132   24.3885   24.4924
   23.6269   21.6037   23.3843   23.7040   23.5705   23.3860
   22.6415   20.8763   23.1106   23.2677   23.0971   22.5511
   21.8042   20.2986   22.8988   22.9894   22.6863   21.8670
   21.2854   20.0443   22.9349   22.8283   22.5258   21.5014
   20.9925   19.8643   23.0700   22.8397   22.4644   21.2088
   25.1512   20.0159   23.3784   22.9237   22.5761   21.2387
   30.4908   20.3286   23.8062   23.1862   28.8420   21.5537
   39.7367   21.1743   24.3409   23.4845   40.6254   22.8115
   39.4427   21.7506   24.9863   23.9334   40.5978   23.3462
   26.4287   21.9679   25.6813   24.3929   35.2864   22.9170
   21.8216   22.4916   26.4273   24.8998   30.2407   23.1332
   22.2586   23.1991   27.1805   25.3872   25.3409   23.7368
   22.6524   23.8559   27.8509   25.8064   25.8799   24.2853
   23.0338   24.4981   28.4778   26.1501   26.3771   24.8181
   23.2523   24.9499   28.9088   26.3548   26.6860   25.1387
   23.4270   25.3443   29.2237   26.4321   26.8851   25.3950
   23.4410   25.5283   29.3188   26.3723   26.8764   25.4155
   23.3895   25.6059   29.2437   26.1771   26.7240   25.3171
   23.2439   25.5306   29.0046   25.8959   26.4330   25.0484
   23.0352   25.3350   28.5884   25.5144   26.0223   24.6473
   22.7856   25.0615   28.0861   25.0978   25.5536   24.1605
   22.4446   24.6752   27.4325   24.6208   25.0034   23.5590
   22.0811   24.2614   26.7493   24.1348   24.4373   22.9295
muscle_foces_single_group =muscleForces.(penaltis{iPen}).(muscles{1})
muscle_foces_single_group =
   23.4583   21.5458   23.7421   25.9579   23.5889   23.7831
   22.6733   20.9726   23.2055   25.1558   23.0330   23.1119
   21.8009   20.2445   22.5805   24.2817   22.4266   22.3709
   20.9255   19.4702   21.9273   23.3993   21.8013   21.6005
   20.0454   18.6242   21.2160   22.4934   21.1372   20.7848
   19.2433   17.8005   20.4879   21.6105   20.4705   19.9661
   18.4955   16.9922   19.7423   20.7637   19.8008   19.1455
   17.9484   16.3462   19.0295   20.0047   19.1940   18.4182
   17.4559   15.7444   18.3341   19.3271   18.6204   17.7164
   17.2710   15.4525   17.7543   18.8153   18.2152   17.2521
   17.1451   15.2263   17.2003   18.3937   17.8474   16.8469
   17.2645   15.2768   16.8419   18.2054   17.7591   16.6941
   17.4796   15.4426   16.5177   18.0839   17.7240   16.6584
   17.8538   15.8005   16.3725   18.2484   17.9711   16.8180
   18.3594   16.3170   16.2891   18.4540   18.3276   17.1475
   18.9635   16.9524   16.3436   18.9684   18.9285   17.6044
   19.7402   17.7810   16.4929   19.5353   19.6935   18.2799
   20.5689   18.6680   16.7481   20.3637   20.6416   19.0214
   21.5989   19.7619   17.1365   21.2749   21.7802   20.0177
   22.6648   20.8914   17.6009   22.3828   23.0278   21.0592
   23.8796   22.1674   18.2265   23.5847   24.4529   22.2872
   25.1519   23.4948   18.8923   24.9132   25.9224   23.5735
   26.5278   24.9146   19.7251   26.3404   27.5440   24.9647
   27.9984   26.4048   20.5826   27.8465   29.1859   26.4267
   29.5455   27.9518   21.5666   29.4637   30.9269   27.9458
   31.2242   29.5677   22.5886   31.1318   32.6943   29.5516
   32.9469   31.2066   23.7032   32.9163   34.5261   31.1863
   34.8022   32.8574   24.8747   34.7272   36.3905   32.8975
   36.6689   34.4949   26.1145   36.6146   38.2941   34.6112
   38.5597   36.0488   27.4199   38.5022   40.1878   36.3136
   40.3965   37.5307   28.7659   40.3376   42.0753   37.9614
   42.1282   38.8726   30.1396   42.1190   43.7901   39.5028
   43.6661   40.0470   31.5211   43.6895   45.4567   40.8792
   45.0360   41.0764   32.8118   45.1000   46.6732   42.1124
   46.0305   41.8222   34.0695   46.1904   47.7926   43.0551
   46.8876   42.4642   35.1007   47.0078   48.3310   43.8914
   47.2234   42.7136   36.0301   47.5085   48.6929   44.3362
   47.4596   42.8842   36.6882   47.7124   48.5842   44.7029
   47.2796   42.7142   37.1788   47.7123   48.2923   44.7325
   47.0235   42.4703   37.4530   47.5697   47.7639   44.6920
   46.6072   42.0704   37.5812   47.3723   47.2256   44.5036
   46.2864   41.7170   37.6121   47.3744   46.6808   44.3841
   46.0545   41.4070   37.6852   47.4112   46.4962   44.3288
   46.3486   41.4755   37.7713   48.0718   46.4231   44.6986
   46.8530   41.6955   38.2813   48.8391   47.2064   45.2385
   48.4757   42.7892   38.9004   50.3654   48.1612   46.6813
   50.3605   44.0942   40.2783   52.0794   50.1611   48.3321
   53.5153   46.4469   41.9128   54.3853   52.4116   50.9780
   57.0261   49.1045   44.2991   56.8445   55.3961   53.8802
   61.3534   52.4612   47.0375   59.5642   58.5825   57.3706
   65.9585   56.0733   50.2660   62.2577   62.0500   61.0147
   70.8414   59.9407   53.7082   64.9251   65.4759   64.8125
   75.5984   63.7912   57.3041   67.3378   68.8720   68.4692
   80.3006   67.6344   60.7246   69.6005   71.9139   72.0645
   84.1959   71.0679   64.0853   71.3371   74.8349   75.1523
   87.8529   74.3694   66.7121   72.9069   77.0126   78.0968
   90.0666   76.8258   70.0463   83.4354   79.3671   80.2009
   91.9015   81.0222   83.3349   94.6413   84.9228   84.8892
   92.7899   89.5689   94.3982   82.3995   89.0259   96.0381
   94.9014   90.2429   98.2725   71.5833   88.4357   96.2715
   98.3265   82.4609   93.3809   68.9647   84.9871   84.7806
   92.5556   77.4574   75.3404   66.0480   77.2508   79.1331
   82.4287   73.7699   65.6457   62.3562   71.5717   76.2535
   76.7591   69.5050   62.4123   58.5101   67.4853   72.2148
   71.6993   65.1128   58.5681   54.4397   62.9242   67.9675
   66.2888   60.1379   54.4948   50.4749   58.1852   63.1627
   60.9409   55.6779   50.2596   46.6011   53.4917   58.7047
   55.7641   52.6255   46.0274   44.2718   48.8764   55.1946
   51.0215   49.6086   42.1924   42.7148   45.5183   51.9713
   46.7798   46.6328   38.5232   40.0735   42.1501   49.0790
   42.6548   42.5049   35.4485   37.1548   38.7460   44.3072
   38.5896   37.7853   32.6813   33.6097   35.4169   38.5703
   35.4670   33.3538   30.4120   30.1294   32.2093   34.8838
   32.5381   29.0998   28.5165   28.6024   29.7641   31.6030
   30.2546   27.1329   26.9325   27.1540   27.9543   29.4536
   28.1118   25.2957   25.7280   26.0514   26.5343   27.4457
   26.3908   23.8475   24.6793   25.0606   25.2742   25.8627
   24.8791   22.6007   23.9986   24.3132   24.3885   24.4924
   23.6269   21.6037   23.3843   23.7040   23.5705   23.3860
   22.6415   20.8763   23.1106   23.2677   23.0971   22.5511
   21.8042   20.2986   22.8988   22.9894   22.6863   21.8670
   21.2854   20.0443   22.9349   22.8283   22.5258   21.5014
   20.9925   19.8643   23.0700   22.8397   22.4644   21.2088
   25.1512   20.0159   23.3784   22.9237   22.5761   21.2387
   30.4908   20.3286   23.8062   23.1862   28.8420   21.5537
   39.7367   21.1743   24.3409   23.4845   40.6254   22.8115
   39.4427   21.7506   24.9863   23.9334   40.5978   23.3462
   26.4287   21.9679   25.6813   24.3929   35.2864   22.9170
   21.8216   22.4916   26.4273   24.8998   30.2407   23.1332
   22.2586   23.1991   27.1805   25.3872   25.3409   23.7368
   22.6524   23.8559   27.8509   25.8064   25.8799   24.2853
   23.0338   24.4981   28.4778   26.1501   26.3771   24.8181
   23.2523   24.9499   28.9088   26.3548   26.6860   25.1387
   23.4270   25.3443   29.2237   26.4321   26.8851   25.3950
   23.4410   25.5283   29.3188   26.3723   26.8764   25.4155
   23.3895   25.6059   29.2437   26.1771   26.7240   25.3171
   23.2439   25.5306   29.0046   25.8959   26.4330   25.0484
   23.0352   25.3350   28.5884   25.5144   26.0223   24.6473
   22.7856   25.0615   28.0861   25.0978   25.5536   24.1605
   22.4446   24.6752   27.4325   24.6208   25.0034   23.5590
   22.0811   24.2614   26.7493   24.1348   24.4373   22.9295
sum(muscle_foces_single_group, muscleForces.(penaltis{iPen}).(muscles{iMuscle}),2)
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('sum')" style="font-weight:bold">sum</a>
Dimension argument must be a positive integer scalar, a vector of unique positive integers, or 'all'.} 
sum(muscle_foces_single_group, muscleForces.(penaltis{iPen}).(muscles{iMuscle}))
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('sum')" style="font-weight:bold">sum</a>
Dimension argument must be a positive integer scalar, a vector of unique positive integers, or 'all'.} 
muscle_foces_single_group
muscle_foces_single_group =
   23.4583   21.5458   23.7421   25.9579   23.5889   23.7831
   22.6733   20.9726   23.2055   25.1558   23.0330   23.1119
   21.8009   20.2445   22.5805   24.2817   22.4266   22.3709
   20.9255   19.4702   21.9273   23.3993   21.8013   21.6005
   20.0454   18.6242   21.2160   22.4934   21.1372   20.7848
   19.2433   17.8005   20.4879   21.6105   20.4705   19.9661
   18.4955   16.9922   19.7423   20.7637   19.8008   19.1455
   17.9484   16.3462   19.0295   20.0047   19.1940   18.4182
   17.4559   15.7444   18.3341   19.3271   18.6204   17.7164
   17.2710   15.4525   17.7543   18.8153   18.2152   17.2521
   17.1451   15.2263   17.2003   18.3937   17.8474   16.8469
   17.2645   15.2768   16.8419   18.2054   17.7591   16.6941
   17.4796   15.4426   16.5177   18.0839   17.7240   16.6584
   17.8538   15.8005   16.3725   18.2484   17.9711   16.8180
   18.3594   16.3170   16.2891   18.4540   18.3276   17.1475
   18.9635   16.9524   16.3436   18.9684   18.9285   17.6044
   19.7402   17.7810   16.4929   19.5353   19.6935   18.2799
   20.5689   18.6680   16.7481   20.3637   20.6416   19.0214
   21.5989   19.7619   17.1365   21.2749   21.7802   20.0177
   22.6648   20.8914   17.6009   22.3828   23.0278   21.0592
   23.8796   22.1674   18.2265   23.5847   24.4529   22.2872
   25.1519   23.4948   18.8923   24.9132   25.9224   23.5735
   26.5278   24.9146   19.7251   26.3404   27.5440   24.9647
   27.9984   26.4048   20.5826   27.8465   29.1859   26.4267
   29.5455   27.9518   21.5666   29.4637   30.9269   27.9458
   31.2242   29.5677   22.5886   31.1318   32.6943   29.5516
   32.9469   31.2066   23.7032   32.9163   34.5261   31.1863
   34.8022   32.8574   24.8747   34.7272   36.3905   32.8975
   36.6689   34.4949   26.1145   36.6146   38.2941   34.6112
   38.5597   36.0488   27.4199   38.5022   40.1878   36.3136
   40.3965   37.5307   28.7659   40.3376   42.0753   37.9614
   42.1282   38.8726   30.1396   42.1190   43.7901   39.5028
   43.6661   40.0470   31.5211   43.6895   45.4567   40.8792
   45.0360   41.0764   32.8118   45.1000   46.6732   42.1124
   46.0305   41.8222   34.0695   46.1904   47.7926   43.0551
   46.8876   42.4642   35.1007   47.0078   48.3310   43.8914
   47.2234   42.7136   36.0301   47.5085   48.6929   44.3362
   47.4596   42.8842   36.6882   47.7124   48.5842   44.7029
   47.2796   42.7142   37.1788   47.7123   48.2923   44.7325
   47.0235   42.4703   37.4530   47.5697   47.7639   44.6920
   46.6072   42.0704   37.5812   47.3723   47.2256   44.5036
   46.2864   41.7170   37.6121   47.3744   46.6808   44.3841
   46.0545   41.4070   37.6852   47.4112   46.4962   44.3288
   46.3486   41.4755   37.7713   48.0718   46.4231   44.6986
   46.8530   41.6955   38.2813   48.8391   47.2064   45.2385
   48.4757   42.7892   38.9004   50.3654   48.1612   46.6813
   50.3605   44.0942   40.2783   52.0794   50.1611   48.3321
   53.5153   46.4469   41.9128   54.3853   52.4116   50.9780
   57.0261   49.1045   44.2991   56.8445   55.3961   53.8802
   61.3534   52.4612   47.0375   59.5642   58.5825   57.3706
   65.9585   56.0733   50.2660   62.2577   62.0500   61.0147
   70.8414   59.9407   53.7082   64.9251   65.4759   64.8125
   75.5984   63.7912   57.3041   67.3378   68.8720   68.4692
   80.3006   67.6344   60.7246   69.6005   71.9139   72.0645
   84.1959   71.0679   64.0853   71.3371   74.8349   75.1523
   87.8529   74.3694   66.7121   72.9069   77.0126   78.0968
   90.0666   76.8258   70.0463   83.4354   79.3671   80.2009
   91.9015   81.0222   83.3349   94.6413   84.9228   84.8892
   92.7899   89.5689   94.3982   82.3995   89.0259   96.0381
   94.9014   90.2429   98.2725   71.5833   88.4357   96.2715
   98.3265   82.4609   93.3809   68.9647   84.9871   84.7806
   92.5556   77.4574   75.3404   66.0480   77.2508   79.1331
   82.4287   73.7699   65.6457   62.3562   71.5717   76.2535
   76.7591   69.5050   62.4123   58.5101   67.4853   72.2148
   71.6993   65.1128   58.5681   54.4397   62.9242   67.9675
   66.2888   60.1379   54.4948   50.4749   58.1852   63.1627
   60.9409   55.6779   50.2596   46.6011   53.4917   58.7047
   55.7641   52.6255   46.0274   44.2718   48.8764   55.1946
   51.0215   49.6086   42.1924   42.7148   45.5183   51.9713
   46.7798   46.6328   38.5232   40.0735   42.1501   49.0790
   42.6548   42.5049   35.4485   37.1548   38.7460   44.3072
   38.5896   37.7853   32.6813   33.6097   35.4169   38.5703
   35.4670   33.3538   30.4120   30.1294   32.2093   34.8838
   32.5381   29.0998   28.5165   28.6024   29.7641   31.6030
   30.2546   27.1329   26.9325   27.1540   27.9543   29.4536
   28.1118   25.2957   25.7280   26.0514   26.5343   27.4457
   26.3908   23.8475   24.6793   25.0606   25.2742   25.8627
   24.8791   22.6007   23.9986   24.3132   24.3885   24.4924
   23.6269   21.6037   23.3843   23.7040   23.5705   23.3860
   22.6415   20.8763   23.1106   23.2677   23.0971   22.5511
   21.8042   20.2986   22.8988   22.9894   22.6863   21.8670
   21.2854   20.0443   22.9349   22.8283   22.5258   21.5014
   20.9925   19.8643   23.0700   22.8397   22.4644   21.2088
   25.1512   20.0159   23.3784   22.9237   22.5761   21.2387
   30.4908   20.3286   23.8062   23.1862   28.8420   21.5537
   39.7367   21.1743   24.3409   23.4845   40.6254   22.8115
   39.4427   21.7506   24.9863   23.9334   40.5978   23.3462
   26.4287   21.9679   25.6813   24.3929   35.2864   22.9170
   21.8216   22.4916   26.4273   24.8998   30.2407   23.1332
   22.2586   23.1991   27.1805   25.3872   25.3409   23.7368
   22.6524   23.8559   27.8509   25.8064   25.8799   24.2853
   23.0338   24.4981   28.4778   26.1501   26.3771   24.8181
   23.2523   24.9499   28.9088   26.3548   26.6860   25.1387
   23.4270   25.3443   29.2237   26.4321   26.8851   25.3950
   23.4410   25.5283   29.3188   26.3723   26.8764   25.4155
   23.3895   25.6059   29.2437   26.1771   26.7240   25.3171
   23.2439   25.5306   29.0046   25.8959   26.4330   25.0484
   23.0352   25.3350   28.5884   25.5144   26.0223   24.6473
   22.7856   25.0615   28.0861   25.0978   25.5536   24.1605
   22.4446   24.6752   27.4325   24.6208   25.0034   23.5590
   22.0811   24.2614   26.7493   24.1348   24.4373   22.9295
iMuscle
iMuscle =
     1
iMuscle = 2
iMuscle =
     2
 sum([muscle_foces_single_group, muscleForces.(penaltis{iPen}).(muscles{iMuscle})],2)
ans =
   1.0e+03 *
    0.3022
    0.2928
    0.2821
    0.2711
    0.2596
    0.2484
    0.2375
    0.2284
    0.2199
    0.2151
    0.2112
    0.2113
    0.2127
    0.2176
    0.2243
    0.2337
    0.2454
    0.2590
    0.2754
    0.2932
    0.3135
    0.3349
    0.3586
    0.3836
    0.4104
    0.4390
    0.4691
    0.5011
    0.5342
    0.5681
    0.6021
    0.6352
    0.6664
    0.6947
    0.7190
    0.7391
    0.7534
    0.7636
    0.7685
    0.7705
    0.7700
    0.7701
    0.7718
    0.7800
    0.7941
    0.8208
    0.8562
    0.9059
    0.9638
    1.0307
    1.1013
    1.1736
    1.2427
    1.3076
    1.3618
    1.4071
    1.4581
    1.5427
    1.5860
    1.5604
    1.4741
    1.3369
    1.2180
    1.1219
    1.0242
    0.9247
    0.8307
    0.7479
    0.6763
    0.6108
    0.5473
    0.4852
    0.4376
    0.3978
    0.3685
    0.3433
    0.3226
    0.3062
    0.2925
    0.2830
    0.2754
    0.2717
    0.2695
    0.2749
    0.2904
    0.3219
    0.3281
    0.3101
    0.3054
    0.3085
    0.3164
    0.3240
    0.3292
    0.3333
    0.3347
    0.3344
    0.3322
    0.3281
    0.3230
    0.3162
    0.3090
try open('ans'); catch edit('ans'); end
[muscle_foces_single_group, muscleForces.(penaltis{iPen}).(muscles{iMuscle})]
ans =
   23.4583   21.5458   23.7421   25.9579   23.5889   23.7831   25.3073   23.4112   27.0292   30.0970   27.0098   27.3045
   22.6733   20.9726   23.2055   25.1558   23.0330   23.1119   24.1993   22.5962   26.3022   28.9558   26.2411   26.3939
   21.8009   20.2445   22.5805   24.2817   22.4266   22.3709   22.9691   21.5364   25.4482   27.7162   25.3978   25.3656
   20.9255   19.4702   21.9273   23.3993   21.8013   21.6005   21.7387   20.4067   24.5602   26.4736   24.5355   24.2979
   20.0454   18.6242   21.2160   22.4934   21.1372   20.7848   20.5080   19.1691   23.6023   25.2223   23.6342   23.1694
   19.2433   17.8005   20.4879   21.6105   20.4705   19.9661   19.4023   17.9750   22.6301   24.0211   22.7506   22.0532
   18.4955   16.9922   19.7423   20.7637   19.8008   19.1455   18.3838   16.8113   21.6432   22.8988   21.8851   20.9456
   17.9484   16.3462   19.0295   20.0047   19.1940   18.4182   17.6903   15.9339   20.7147   21.9288   21.1486   20.0132
   17.4559   15.7444   18.3341   19.3271   18.6204   17.7164   17.0856   15.1346   19.8171   21.1002   20.4800   19.1287
   17.2710   15.4525   17.7543   18.8153   18.2152   17.2521   16.9944   14.8943   19.1111   20.5498   20.1139   18.6650
   17.1451   15.2263   17.2003   18.3937   17.8474   16.8469   17.0036   14.7735   18.4475   20.1504   19.8151   18.3048
   17.2645   15.2768   16.8419   18.2054   17.7591   16.6941   17.4315   15.1553   18.1226   20.1364   19.9975   18.3852
   17.4796   15.4426   16.5177   18.0839   17.7240   16.6584   18.0221   15.7400   17.8584   20.2324   20.2687   18.6647
   17.8538   15.8005   16.3725   18.2484   17.9711   16.8180   18.8837   16.6628   17.9149   20.7895   21.0097   19.2760
   18.3594   16.3170   16.2891   18.4540   18.3276   17.1475   19.9607   17.8469   18.0803   21.4123   21.9277   20.1610
   18.9635   16.9524   16.3436   18.9684   18.9285   17.6044   21.1993   19.2268   18.4891   22.5206   23.2414   21.2514
   19.7402   17.7810   16.4929   19.5353   19.6935   18.2799   22.7084   20.9080   19.0565   23.7111   24.8230   22.6780
   20.5689   18.6680   16.7481   20.3637   20.6416   19.0214   24.2992   22.6801   19.8007   25.3121   26.7035   24.2062
   21.5989   19.7619   17.1365   21.2749   21.7802   20.0177   26.2074   24.7760   20.7570   27.0509   28.9226   26.1324
   22.6648   20.8914   17.6009   22.3828   23.0278   21.0592   28.1777   26.9330   21.8345   29.1167   31.3352   28.1357
   23.8796   22.1674   18.2265   23.5847   24.4529   22.2872   30.4107   29.3458   23.1654   31.3639   34.1227   30.4649
   25.1519   23.4948   18.8923   24.9132   25.9224   23.5735   32.7603   31.8678   24.5597   33.8555   37.0040   32.9193
   26.5278   24.9146   19.7251   26.3404   27.5440   24.9647   35.3198   34.5867   26.2276   36.5737   40.2937   35.5992
   27.9984   26.4048   20.5826   27.8465   29.1859   26.4267   38.0989   37.4841   27.9403   39.4731   43.6510   38.4741
   29.5455   27.9518   21.5666   29.4637   30.9269   27.9458   41.0550   40.5257   29.8895   42.6954   47.3666   41.5062
   31.2242   29.5677   22.5886   31.1318   32.6943   29.5516   44.3861   43.8129   31.9248   46.0660   51.1977   44.8398
   32.9469   31.2066   23.7032   32.9163   34.5261   31.1863   47.8423   47.1820   34.1701   49.8567   55.3104   48.2738
   34.8022   32.8574   24.8747   34.7272   36.3905   32.8975   51.7872   50.7549   36.5727   53.7428   59.5929   52.0711
   36.6689   34.4949   26.1145   36.6146   38.2941   34.6112   55.8095   54.3392   39.1640   58.0473   64.0790   55.9195
   38.5597   36.0488   27.4199   38.5022   40.1878   36.3136   60.1295   57.9229   41.9933   62.3888   68.6809   59.9509
   40.3965   37.5307   28.7659   40.3376   42.0753   37.9614   64.4360   61.4178   44.9696   66.8845   73.3544   63.9438
   42.1282   38.8726   30.1396   42.1190   43.7901   39.5028   68.7161   64.7397   48.1776   71.3159   77.8014   67.8618
   43.6661   40.0470   31.5211   43.6895   45.4567   40.8792   72.7137   67.7856   51.4502   75.4956   82.1851   71.5232
   45.0360   41.0764   32.8118   45.1000   46.6732   42.1124   76.4665   70.5921   54.7554   79.3895   85.7017   74.9622
   46.0305   41.8222   34.0695   46.1904   47.7926   43.0551   79.5282   72.8692   58.0240   82.7121   89.0167   77.8618
   46.8876   42.4642   35.1007   47.0078   48.3310   43.8914   82.3371   74.9526   60.9785   85.4790   91.0943   80.5640
   47.2234   42.7136   36.0301   47.5085   48.6929   44.3362   84.0738   76.2491   63.7388   87.6013   92.7740   82.4632
   47.4596   42.8842   36.6882   47.7124   48.5842   44.7029   85.5942   77.3811   65.9813   89.0574   93.3925   84.1911
   47.2796   42.7142   37.1788   47.7123   48.2923   44.7325   86.1779   77.7848   67.8471   90.0554   93.5658   85.1518
   47.0235   42.4703   37.4530   47.5697   47.7639   44.6920   86.5608   78.0119   69.2265   90.6566   93.1639   85.9209
   46.6072   42.0704   37.5812   47.3723   47.2256   44.5036   86.5199   77.8662   70.2096   91.1052   92.6690   86.2854
   46.2864   41.7170   37.6121   47.3744   46.6808   44.3841   86.6240   77.7784   70.9285   91.8777   92.1120   86.7300
   46.0545   41.4070   37.6852   47.4112   46.4962   44.3288   86.8631   77.7446   71.6158   92.7065   92.2858   87.2491
   46.3486   41.4755   37.7713   48.0718   46.4231   44.6986   88.2138   78.4986   72.2933   94.8196   92.6857   88.6559
   46.8530   41.6955   38.2813   48.8391   47.2064   45.2385   90.0090   79.5678   73.8056   97.1603   94.9824   90.4177
   48.4757   42.7892   38.9004   50.3654   48.1612   46.6813   94.3030   82.5791   75.5513  101.1283   97.6653   94.2083
   50.3605   44.0942   40.2783   52.0794   50.1611   48.3321   99.1867   86.0664   78.9769  105.4876  102.7227   98.4692
   53.5153   46.4469   41.9128   54.3853   52.4116   50.9780  106.9430   91.9342   82.9892  111.0809  108.3352  104.9929
   57.0261   49.1045   44.2991   56.8445   55.3961   53.8802  115.4688   98.4735   88.7197  116.9199  115.5736  112.0658
   61.3534   52.4612   47.0375   59.5642   58.5825   57.3706  125.7601  106.5533   95.2269  123.1765  123.1715  120.3986
   65.9585   56.0733   50.2660   62.2577   62.0500   61.0147  136.4875  115.0759  102.8147  129.1485  131.2697  128.9197
   70.8414   59.9407   53.7082   64.9251   65.4759   64.8125  147.6510  124.0414  110.7325  134.8358  139.0119  137.6291
   75.5984   63.7912   57.3041   67.3378   68.8720   68.4692  158.0846  132.6048  118.8874  139.5746  146.4983  145.6567
   80.3006   67.6344   60.7246   69.6005   71.9139   72.0645  168.2000  140.9930  126.2477  143.7556  152.7299  153.3871
   84.1959   71.0679   64.0853   71.3371   74.8349   75.1523  175.8318  147.8048  133.3367  146.2471  158.5330  159.3898
   87.8529   74.3694   66.7121   72.9069   77.0126   78.0968  182.7820  154.1650  138.0898  148.2030  162.0218  164.9339
   90.0666   76.8258   70.0463   83.4354   79.3671   80.2009  185.8196  157.8491  143.5690  157.7588  165.2766  167.9150
   91.9015   81.0222   83.3349   94.6413   84.9228   84.8892  187.3525  163.3574  161.2842  167.7594  168.4987  173.7074
   92.7899   89.5689   94.3982   82.3995   89.0259   96.0381  185.1238  173.4258  175.3468  150.9835  170.3232  186.5281
   94.9014   90.2429   98.2725   71.5833   88.4357   96.2715  185.1044  170.9937  177.6084  135.4086  167.6324  183.9028
   98.3265   82.4609   93.3809   68.9647   84.9871   84.7806  187.4580  155.1352  167.0541  126.7397  160.1057  164.6873
   92.5556   77.4574   75.3404   66.0480   77.2508   79.1331  173.7728  143.3698  137.2759  117.5433  145.3251  151.8745
   82.4287   73.7699   65.6457   62.3562   71.5717   76.2535  152.4904  133.5431  118.6596  106.9753  132.1801  142.0946
   76.7591   69.5050   62.4123   58.5101   67.4853   72.2148  137.9322  121.5519  108.6849   96.4685  120.3015  130.0876
   71.6993   65.1128   58.5681   54.4397   62.9242   67.9675  124.3372  109.2391   98.0581   86.0508  108.0286  117.7414
   66.2888   60.1379   54.4948   50.4749   58.1852   63.1627  110.7756   96.7666   87.1867   76.4757   95.6079  105.1207
   60.9409   55.6779   50.2596   46.6011   53.4917   58.7047   97.6556   85.3544   77.1237   67.6270   84.3817   92.8791
   55.7641   52.6255   46.0274   44.2718   48.8764   55.1946   85.7426   76.8408   67.2723   60.1652   73.4290   81.6735
   51.0215   49.6086   42.1924   42.7148   45.5183   51.9713   75.1816   69.1071   59.3732   53.3969   64.6843   71.5032
   46.7798   46.6328   38.5232   40.0735   42.1501   49.0790   66.1805   62.2736   51.9666   48.1420   56.4680   62.5277
   42.6548   42.5049   35.4485   37.1548   38.7460   44.3072   58.1029   53.5835   46.3250   43.2744   50.1453   55.0658
   38.5896   37.7853   32.6813   33.6097   35.4169   38.5703   50.4995   43.9400   41.3768   39.7436   44.5697   48.3813
   35.4670   33.3538   30.4120   30.1294   32.2093   34.8838   45.0121   38.6783   37.5515   36.3753   40.2035   43.3108
   32.5381   29.0998   28.5165   28.6024   29.7641   31.6030   39.9524   34.2254   34.4159   33.9518   36.5898   38.5815
   30.2546   27.1329   26.9325   27.1540   27.9543   29.4536   36.2162   31.1596   31.8550   31.6621   33.6030   35.1300
   28.1118   25.2957   25.7280   26.0514   26.5343   27.4457   32.7244   28.3143   29.9303   29.9618   31.2974   31.9204
   26.3908   23.8475   24.6793   25.0606   25.2742   25.8627   29.9656   26.1309   28.2665   28.4430   29.2713   29.4366
   24.8791   22.6007   23.9986   24.3132   24.3885   24.4924   27.5540   24.2686   27.1849   27.3196   27.8738   27.3002
   23.6269   21.6037   23.3843   23.7040   23.5705   23.3860   25.5729   22.8046   26.2075   26.4109   26.5888   25.5948
   22.6415   20.8763   23.1106   23.2677   23.0971   22.5511   24.0175   21.7471   25.7413   25.7707   25.8532   24.3107
   21.8042   20.2986   22.8988   22.9894   22.6863   21.8670   22.6985   20.9156   25.3643   25.3634   25.2108   23.2605
   21.2854   20.0443   22.9349   22.8283   22.5258   21.5014   21.8708   20.5626   25.3448   25.1288   24.9409   22.6825
   20.9925   19.8643   23.0700   22.8397   22.4644   21.2088   21.1551   20.3191   25.4641   25.1367   24.8058   22.2120
   25.1512   20.0159   23.3784   22.9237   22.5761   21.2387   20.9269   20.5562   25.8263   25.2467   24.9066   22.2023
   30.4908   20.3286   23.8062   23.1862   28.8420   21.5537   21.9248   20.8849   26.3565   25.6043   25.1618   22.2832
   39.7367   21.1743   24.3409   23.4845   40.6254   22.8115   26.9782   21.5168   27.0372   26.0115   25.5555   22.6640
   39.4427   21.7506   24.9863   23.9334   40.5978   23.3462   27.9844   22.2621   27.8867   26.6369   26.1078   23.1663
   26.4287   21.9679   25.6813   24.3929   35.2864   22.9170   23.5944   23.1587   28.8116   27.2797   26.7310   23.8305
   21.8216   22.4916   26.4273   24.8998   30.2407   23.1332   22.3413   24.1280   29.8503   28.0100   27.4694   24.5818
   22.2586   23.1991   27.1805   25.3872   25.3409   23.7368   22.9703   25.1409   30.9076   28.7202   28.2269   25.3853
   22.6524   23.8559   27.8509   25.8064   25.8799   24.2853   23.5899   26.1091   31.9165   29.3599   28.9568   26.1527
   23.0338   24.4981   28.4778   26.1501   26.3771   24.8181   24.2046   27.0636   32.8738   29.9036   29.6461   26.9081
   23.2523   24.9499   28.9088   26.3548   26.6860   25.1387   24.6655   27.7970   33.5995   30.2705   30.1527   27.4332
   23.4270   25.3443   29.2237   26.4321   26.8851   25.3950   25.0750   28.4582   34.1661   30.4663   30.5370   27.8804
   23.4410   25.5283   29.3188   26.3723   26.8764   25.4155   25.2955   28.8544   34.4314   30.4780   30.6891   28.0419
   23.3895   25.6059   29.2437   26.1771   26.7240   25.3171   25.4187   29.1038   34.4448   30.2993   30.6572   28.0457
   23.2439   25.5306   29.0046   25.8959   26.4330   25.0484   25.4020   29.1427   34.2153   29.9996   30.4479   27.8233
   23.0352   25.3350   28.5884   25.5144   26.0223   24.6473   25.2593   28.9929   33.7072   29.5434   30.0472   27.4030
   22.7856   25.0615   28.0861   25.0978   25.5536   24.1605   25.0350   28.7211   33.0636   29.0323   29.5535   26.8547
   22.4446   24.6752   27.4325   24.6208   25.0034   23.5590   24.6235   28.2505   32.1682   28.4066   28.8868   26.1130
   22.0811   24.2614   26.7493   24.1348   24.4373   22.9295   24.1662   27.7314   31.2234   27.7639   28.1864   25.3239
s = muscle_foces_single_group + muscleForces.(penaltis{iPen}).(muscles{iMuscle})
s =
   48.7655   44.9569   50.7713   56.0549   50.5987   51.0876
   46.8727   43.5688   49.5077   54.1117   49.2741   49.5057
   44.7700   41.7810   48.0287   51.9979   47.8244   47.7365
   42.6642   39.8769   46.4875   49.8728   46.3368   45.8984
   40.5535   37.7933   44.8183   47.7156   44.7715   43.9542
   38.6457   35.7754   43.1180   45.6316   43.2210   42.0193
   36.8793   33.8035   41.3854   43.6625   41.6860   40.0910
   35.6387   32.2801   39.7442   41.9335   40.3426   38.4314
   34.5415   30.8790   38.1512   40.4273   39.1004   36.8451
   34.2654   30.3468   36.8654   39.3652   38.3291   35.9171
   34.1486   29.9998   35.6478   38.5441   37.6625   35.1517
   34.6960   30.4321   34.9645   38.3418   37.7566   35.0793
   35.5016   31.1826   34.3761   38.3163   37.9927   35.3232
   36.7374   32.4634   34.2874   39.0379   38.9808   36.0940
   38.3201   34.1639   34.3694   39.8662   40.2553   37.3085
   40.1628   36.1792   34.8327   41.4891   42.1699   38.8558
   42.4485   38.6889   35.5494   43.2463   44.5165   40.9579
   44.8682   41.3481   36.5488   45.6758   47.3451   43.2276
   47.8063   44.5379   37.8935   48.3258   50.7029   46.1502
   50.8424   47.8244   39.4355   51.4995   54.3630   49.1950
   54.2903   51.5132   41.3919   54.9486   58.5756   52.7521
   57.9122   55.3626   43.4520   58.7687   62.9264   56.4928
   61.8476   59.5013   45.9527   62.9140   67.8377   60.5639
   66.0973   63.8890   48.5229   67.3197   72.8369   64.9008
   70.6005   68.4775   51.4560   72.1591   78.2935   69.4521
   75.6104   73.3807   54.5134   77.1978   83.8920   74.3914
   80.7892   78.3886   57.8734   82.7730   89.8365   79.4601
   86.5894   83.6123   61.4475   88.4700   95.9834   84.9687
   92.4785   88.8341   65.2785   94.6619  102.3731   90.5307
   98.6893   93.9717   69.4132  100.8910  108.8687   96.2645
  104.8325   98.9485   73.7355  107.2221  115.4297  101.9052
  110.8443  103.6123   78.3172  113.4349  121.5915  107.3647
  116.3798  107.8326   82.9712  119.1851  127.6419  112.4024
  121.5025  111.6685   87.5672  124.4895  132.3749  117.0746
  125.5587  114.6914   92.0935  128.9025  136.8094  120.9168
  129.2248  117.4168   96.0792  132.4868  139.4253  124.4554
  131.2972  118.9628   99.7689  135.1098  141.4669  126.7995
  133.0538  120.2653  102.6695  136.7698  141.9767  128.8940
  133.4574  120.4990  105.0259  137.7677  141.8581  129.8843
  133.5843  120.4822  106.6794  138.2263  140.9278  130.6129
  133.1271  119.9365  107.7907  138.4774  139.8946  130.7890
  132.9104  119.4954  108.5406  139.2520  138.7928  131.1141
  132.9177  119.1516  109.3010  140.1177  138.7820  131.5779
  134.5624  119.9742  110.0647  142.8914  139.1089  133.3545
  136.8620  121.2633  112.0869  145.9994  142.1888  135.6562
  142.7787  125.3682  114.4517  151.4937  145.8265  140.8896
  149.5471  130.1606  119.2552  157.5670  152.8838  146.8013
  160.4583  138.3811  124.9020  165.4662  160.7468  155.9709
  172.4949  147.5780  133.0188  173.7644  170.9697  165.9460
  187.1135  159.0145  142.2644  182.7407  181.7540  177.7692
  202.4460  171.1492  153.0807  191.4062  193.3197  189.9344
  218.4925  183.9821  164.4407  199.7609  204.4879  202.4416
  233.6830  196.3960  176.1914  206.9124  215.3703  214.1259
  248.5005  208.6274  186.9723  213.3561  224.6438  225.4516
  260.0277  218.8727  197.4220  217.5843  233.3679  234.5421
  270.6349  228.5345  204.8019  221.1099  239.0344  243.0307
  275.8862  234.6749  213.6153  241.1942  244.6437  248.1158
  279.2541  244.3796  244.6191  262.4007  253.4215  258.5965
  277.9137  262.9947  269.7450  233.3830  259.3491  282.5662
  280.0058  261.2366  275.8809  206.9920  256.0681  280.1743
  285.7845  237.5962  260.4350  195.7044  245.0927  249.4679
  266.3284  220.8271  212.6162  183.5913  222.5759  231.0076
  234.9190  207.3130  184.3053  169.3315  203.7519  218.3482
  214.6913  191.0569  171.0972  154.9786  187.7867  202.3024
  196.0365  174.3519  156.6262  140.4905  170.9528  185.7089
  177.0644  156.9045  141.6815  126.9506  153.7931  168.2834
  158.5965  141.0324  127.3833  114.2281  137.8734  151.5838
  141.5067  129.4662  113.2997  104.4370  122.3054  136.8681
  126.2031  118.7157  101.5656   96.1117  110.2025  123.4746
  112.9603  108.9065   90.4899   88.2156   98.6181  111.6067
  100.7577   96.0884   81.7735   80.4292   88.8913   99.3731
   89.0891   81.7253   74.0581   73.3533   79.9866   86.9516
   80.4792   72.0321   67.9635   66.5047   72.4128   78.1946
   72.4904   63.3252   62.9324   62.5541   66.3538   70.1845
   66.4708   58.2925   58.7875   58.8161   61.5573   64.5836
   60.8362   53.6100   55.6583   56.0132   57.8317   59.3662
   56.3564   49.9784   52.9458   53.5037   54.5455   55.2993
   52.4331   46.8693   51.1835   51.6328   52.2624   51.7927
   49.1998   44.4083   49.5919   50.1150   50.1592   48.9809
   46.6589   42.6234   48.8518   49.0384   48.9503   46.8618
   44.5027   41.2142   48.2631   48.3528   47.8971   45.1275
   43.1562   40.6069   48.2797   47.9571   47.4668   44.1839
   42.1477   40.1834   48.5341   47.9764   47.2702   43.4208
   46.0781   40.5720   49.2047   48.1704   47.4828   43.4411
   52.4156   41.2135   50.1626   48.7906   54.0039   43.8370
   66.7149   42.6911   51.3781   49.4959   66.1809   45.4755
   67.4271   44.0127   52.8730   50.5702   66.7056   46.5125
   50.0231   45.1266   54.4928   51.6725   62.0174   46.7475
   44.1629   46.6196   56.2776   52.9098   57.7101   47.7150
   45.2290   48.3400   58.0881   54.1075   53.5678   49.1220
   46.2423   49.9650   59.7674   55.1663   54.8367   50.4380
   47.2384   51.5617   61.3517   56.0537   56.0232   51.7262
   47.9178   52.7469   62.5083   56.6253   56.8387   52.5719
   48.5020   53.8024   63.3899   56.8984   57.4221   53.2754
   48.7365   54.3827   63.7502   56.8502   57.5655   53.4574
   48.8081   54.7097   63.6885   56.4764   57.3812   53.3628
   48.6459   54.6733   63.2198   55.8955   56.8808   52.8717
   48.2944   54.3279   62.2956   55.0577   56.0696   52.0503
   47.8206   53.7826   61.1497   54.1301   55.1070   51.0152
   47.0680   52.9258   59.6007   53.0275   53.8903   49.6720
   46.2473   51.9928   57.9727   51.8988   52.6237   48.2534
try open('s'); catch edit('s'); end
try open('muscle_foces_single_group'); catch edit('muscle_foces_single_group'); end
s = muscle_foces_single_group + muscle_foces_single_group
s =
   46.9165   43.0915   47.4842   51.9159   47.1778   47.5662
   45.3467   41.9451   46.4111   50.3116   46.0661   46.2237
   43.6018   40.4891   45.1610   48.5633   44.8532   44.7418
   41.8509   38.9404   43.8545   46.7985   43.6026   43.2011
   40.0909   37.2485   42.4320   44.9867   42.2745   41.5695
   38.4866   35.6010   40.9758   43.2209   40.9409   39.9322
   36.9911   33.9844   39.4845   41.5275   39.6017   38.2909
   35.8967   32.6923   38.0590   40.0094   38.3880   36.8364
   34.9117   31.4887   36.6682   38.6541   37.2407   35.4328
   34.5420   30.9049   35.5087   37.6307   36.4303   34.5041
   34.2901   30.4527   34.4006   36.7873   35.6948   33.6938
   34.5291   30.5537   33.6838   36.4109   35.5182   33.3882
   34.9591   30.8853   33.0353   36.1679   35.4480   33.3168
   35.7075   31.6011   32.7451   36.4968   35.9422   33.6360
   36.7187   32.6340   32.5782   36.9079   36.6552   34.2950
   37.9271   33.9047   32.6872   37.9369   37.8570   35.2088
   39.4803   35.5620   32.9859   39.0705   39.3870   36.5597
   41.1379   37.3360   33.4963   40.7273   41.2832   38.0428
   43.1977   39.5237   34.2730   42.5498   43.5605   40.0355
   45.3295   41.7829   35.2019   44.7657   46.0556   42.1185
   47.7592   44.3348   36.4530   47.1694   48.9058   44.5744
   50.3038   46.9895   37.7846   49.8264   51.8448   47.1469
   53.0556   49.8292   39.4501   52.6807   55.0881   49.9294
   55.9968   52.8097   41.1651   55.6930   58.3718   52.8534
   59.0909   55.9037   43.1331   58.9273   61.8538   55.8916
   62.4485   59.1355   45.1771   62.2636   65.3886   59.1032
   65.8938   62.4132   47.4064   65.8326   69.0521   62.3726
   69.6043   65.7148   49.7494   69.4545   72.7810   65.7951
   73.3379   68.9899   52.2289   73.2291   76.5882   69.2225
   77.1194   72.0976   54.8398   77.0044   80.3756   72.6272
   80.7931   75.0615   57.5319   80.6752   84.1507   75.9227
   84.2565   77.7451   60.2793   84.2381   87.5802   79.0057
   87.3322   80.0940   63.0421   87.3791   90.9134   81.7584
   90.0720   82.1529   65.6236   90.2000   93.3465   84.2249
   92.0610   83.6444   68.1391   92.3808   95.5853   86.1101
   93.7753   84.9284   70.2013   94.0156   96.6620   87.7828
   94.4468   85.4273   72.0601   95.0170   97.3857   88.6725
   94.9193   85.7684   73.3764   95.4248   97.1684   89.4057
   94.5591   85.4285   74.3576   95.4246   96.5847   89.4649
   94.0471   84.9407   74.9059   95.1394   95.5278   89.3840
   93.2144   84.1408   75.1624   94.7445   94.4513   89.0071
   92.5728   83.4340   75.2242   94.7487   93.3617   88.7682
   92.1091   82.8140   75.3704   94.8224   92.9925   88.6576
   92.6972   82.9511   75.5426   96.1437   92.8463   89.3973
   93.7061   83.3910   76.5626   97.6783   94.4127   90.4770
   96.9514   85.5783   77.8008  100.7308   96.3225   93.3627
  100.7209   88.1884   80.5566  104.1587  100.3222   96.6642
  107.0306   92.8939   83.8257  108.7707  104.8232  101.9560
  114.0522   98.2089   88.5982  113.6890  110.7922  107.7605
  122.7068  104.9225   94.0751  119.1283  117.1651  114.7412
  131.9171  112.1466  100.5319  124.5154  124.1000  122.0293
  141.6829  119.8814  107.4164  129.8503  130.9519  129.6250
  151.1969  127.5824  114.6081  134.6756  137.7439  136.9385
  160.6011  135.2688  121.4492  139.2011  143.8278  144.1290
  168.3918  142.1359  128.1706  142.6742  149.6698  150.3045
  175.7058  148.7388  133.4243  145.8138  154.0252  156.1935
  180.1331  153.6516  140.0926  166.8707  158.7342  160.4017
  183.8031  162.0445  166.6697  189.2825  169.8456  169.7784
  185.5798  179.1378  188.7965  164.7989  178.0517  192.0762
  189.8027  180.4857  196.5451  143.1666  176.8713  192.5429
  196.6529  164.9218  186.7618  137.9294  169.9741  169.5612
  185.1111  154.9147  150.6807  132.0959  154.5016  158.2662
  164.8573  147.5398  131.2913  124.7123  143.1435  152.5070
  153.5181  139.0100  124.8246  117.0202  134.9706  144.4295
  143.3985  130.2257  117.1362  108.8794  125.8485  135.9350
  132.5775  120.2758  108.9897  100.9498  116.3704  126.3254
  121.8817  111.3558  100.5192   93.2022  106.9835  117.4094
  111.5282  105.2509   92.0548   88.5437   97.7528  110.3892
  102.0429   99.2172   84.3847   85.4297   91.0365  103.9426
   93.5596   93.2657   77.0465   80.1470   84.3002   98.1580
   85.3096   85.0098   70.8970   74.3096   77.4920   88.6145
   77.1793   75.5706   65.3627   67.2194   70.8339   77.1406
   70.9341   66.7076   60.8241   60.2587   64.4186   69.7676
   65.0761   58.1995   57.0330   57.2048   59.5282   63.2061
   60.5093   54.2658   53.8650   54.3080   55.9086   58.9072
   56.2236   50.5915   51.4561   52.1028   53.0685   54.8915
   52.7816   47.6950   49.3586   50.1212   50.5484   51.7254
   49.7582   45.2014   47.9971   48.6263   48.7770   48.9849
   47.2538   43.2075   46.7687   47.4080   47.1409   46.7720
   45.2829   41.7526   46.2211   46.5354   46.1941   45.1022
   43.6084   40.5972   45.7976   45.9788   45.3725   43.7340
   42.5709   40.0886   45.8698   45.6566   45.0516   43.0028
   41.9850   39.7285   46.1401   45.6794   44.9288   42.4175
   50.3024   40.0318   46.7569   45.8474   45.1523   42.4775
   60.9816   40.6572   47.6123   46.3725   57.6841   43.1075
   79.4735   42.3485   48.6818   46.9689   81.2508   45.6230
   78.8854   43.5013   49.9726   47.8667   81.1957   46.6925
   52.8574   43.9358   51.3625   48.7858   70.5729   45.8340
   43.6432   44.9832   52.8546   49.7996   60.4814   46.2665
   44.5173   46.3982   54.3609   50.7745   50.6818   47.4735
   45.3048   47.7117   55.7018   51.6128   51.7599   48.5706
   46.0676   48.9962   56.9557   52.3003   52.7542   49.6361
   46.5046   49.8997   57.8176   52.7096   53.3720   50.2774
   46.8540   50.6885   58.4475   52.8642   53.7703   50.7900
   46.8820   51.0566   58.6376   52.7445   53.7528   50.8309
   46.7789   51.2118   58.4874   52.3542   53.4479   50.6343
   46.4878   51.0613   58.0091   51.7917   52.8659   50.0968
   46.0704   50.6700   57.1768   51.0288   52.0447   49.2945
   45.5713   50.1230   56.1722   50.1957   51.1071   48.3209
   44.8891   49.3504   54.8650   49.2417   50.0068   47.1180
   44.1622   48.5228   53.4986   48.2697   48.8747   45.8591
[23.4582541386139]*2
ans =
   46.9165
 muscles = muscles_groups{iGroup};
        muscle_foces_single_group =muscleForces.(penaltis{iPen}).(muscles{1});
        for iMuscle = 2:length(muscles)
            muscle_foces_single_group = muscle_foces_single_group + muscleForces.(penaltis{iPen}).(muscles{iMuscle});

        end
muscle_foces_single_group
muscle_foces_single_group =
  102.3721   97.7828  103.9541  108.9126  102.0335  103.5773
   99.6373   95.5272  103.1468  106.1612  100.0010  101.1922
   96.5429   92.7144  107.9876  103.1323   97.7677   98.5303
   93.4166   89.7452  112.8486  100.0759   95.4766   95.7694
   90.2409   86.5339  117.7512   96.9404   93.0666   92.8555
   87.3016   83.4033  111.7634   93.8831   90.6645   89.9360
   84.5270   80.3289   94.4818   90.9484   88.2708   87.0125
   82.4115   77.8259   86.8704   88.3082   86.1123   84.4092
   80.4759   75.4786   84.3626   85.9412   84.0781   81.8932
   79.5862   74.2363   82.2432   84.1360   82.6372   80.1972
   78.9005   73.2296   80.2102   82.6357   81.3282   78.7066
   79.0655   73.2144   78.8604   81.9247   80.9780   78.0927
   79.5608   73.6060   77.6326   81.4393   80.8055   77.8824
   80.6067   74.6754   77.0466   81.9014   81.5726   78.3449
   82.0907   76.2815   76.6806   82.4983   82.6920   79.3747
   83.9033   78.2902   76.8062   84.0845   84.5992   80.8300
   86.2645   80.9251   77.2558   85.8341   87.0263   82.9857
   88.7915   83.7495   78.0670   88.3999   90.0335   85.3531
   91.9492   87.2335   79.3125   91.2265   93.6593   88.5199
   95.2238   90.8344   80.8060   94.6726   97.6386   91.8314
   98.9871   94.9178   82.8138   98.4354  102.2428   95.7437
  102.9492   99.1847   84.9502  102.6251  107.0032   99.8613
  107.2689  103.7819   87.6261  107.1770  112.3721  104.3487
  111.9300  108.6478   90.3855  112.0185  117.8331  109.1182
  116.8666  113.7302   93.5771  117.3246  123.7692  114.1152
  122.3315  119.1296   96.9105  122.8442  129.8471  119.5081
  127.9726  124.6345  100.5895  128.9204  136.2710  125.0330
  134.2376  130.3233  104.5030  135.1232  142.8892  130.9908
  140.5867  135.9986  108.6977  141.8173  149.7407  136.9969
  147.2287  141.5301  113.2110  148.5450  156.6711  143.1462
  153.7775  146.8682  117.9210  155.3321  163.6503  149.1802
  160.1446  151.8295  122.8843  161.9811  170.1654  154.9901
  165.9753  156.2875  127.9184  168.0900  176.5509  160.3287
  171.3411  160.3095  132.8477  173.7061  181.5013  165.2589
  175.5431  163.4340  137.6950  178.3365  186.1299  169.2812
  179.3194  166.2300  141.9210  182.0651  188.8057  172.9713
  181.3793  167.7428  145.8195  184.7474  190.8672  175.3656
  183.1004  168.9918  148.8442  186.3878  191.2905  177.4899
  183.3745  169.0861  151.2748  187.3119  191.0399  178.4220
  183.3537  168.9097  152.9380  187.6480  189.9190  179.0717
  182.7107  168.1622  154.0119  187.7580  188.6799  179.1251
  182.3236  167.5229  154.6932  188.4096  187.3621  179.3332
  182.1747  166.9845  155.3798  189.1553  187.1927  179.6853
  183.7635  167.6865  156.0681  191.9044  187.3787  181.4277
  186.0474  168.8847  158.0921  195.0029  190.4709  183.7261
  192.1545  173.0701  160.4783  200.5942  194.1501  189.1194
  199.1580  177.9809  165.4388  206.7799  201.4204  195.2250
  210.5072  186.4960  171.2773  214.8401  209.5253  204.7392
  223.0209  196.0185  179.6875  223.2778  220.0744  215.0789
  238.2063  207.8521  189.2387  232.3574  231.1732  227.3123
  254.0932  220.3587  200.3772  241.0329  243.0371  239.8476
  270.6817  233.5384  211.9854  249.3045  254.4063  252.6847
  286.2869  246.1698  223.9311  256.2055  265.4201  264.5547
  301.4636  258.5623  234.7088  262.3003  274.6283  276.0032
  313.0581  268.7217  245.0876  265.9629  283.2200  284.9569
  323.6581  278.2381  252.0843  268.8543  288.4624  293.3665
  328.4979  283.9283  262.8042  317.3289  294.9009  299.2797
  335.2667  300.0287  325.3079  369.8064  320.8621  318.7861
  346.8581  342.1545  377.4444  332.4539  343.2162  372.2758
  362.5134  354.7071  396.0868  294.9854  353.9163  385.0684
  382.5337  335.4959  369.8332  256.8499  337.6769  354.1494
  349.0802  301.7137  276.2358  225.0329  281.0281  314.4288
  290.2971  261.0294  226.7200  209.6441  246.4723  270.5390
  267.6963  238.7445  211.3320  194.2269  229.0208  248.0778
  249.9355  219.4179  195.5546  178.7683  210.9349  228.9474
  227.8980  204.3789  179.6311  164.4014  192.6111  213.3210
  207.5540  191.1068  164.5133  150.9758  176.1546  200.2387
  191.8386  182.6644  149.6413  145.9345  160.3754  194.1101
  176.4034  173.8020  137.3182  145.0852  152.3727  184.8829
  161.2915  164.4550  125.7026  137.9944  143.8112  172.0806
  146.5715  149.8753  116.6223  129.3070  133.2472  155.3300
  132.0527  132.6086  108.6300  115.1115  121.8745  136.5518
  119.5806  119.1248  102.3993  101.0728  109.1923  120.2095
  107.7720  106.4281   97.3552   97.1896  100.8269  104.8249
  101.6581   96.4975   93.3000   93.5539   96.0589   99.1857
   95.9861   88.1851   90.4196   91.0079   92.5196   93.9847
   91.6398   84.7271   88.0212   88.8174   89.4843   90.0979
   87.9516   81.8876   86.7707   87.4005   87.6423   86.8714
   85.0795   79.8151   85.7281   86.4297   86.0160   84.4636
   83.0518   78.5681   85.7589   86.0165   85.4973   82.9010
   81.4933   77.7798   85.9869   86.1201   85.1799   81.8080
   80.9530   78.0004   87.0042   86.6071   85.6681   81.7173
   81.4493   78.8203   88.3398   89.8843   90.3436   82.1813
  104.6703   90.6048   90.2322   94.3364  102.3470   92.4413
  129.4514  103.1773   97.9790  100.7811  125.0303  104.2121
  159.3930  118.3561  110.9745  107.6243  157.2887  120.9800
  165.9517  125.2468  111.3380  102.5898  163.5389  125.4797
  141.3331  121.0869  106.0504   97.8542  158.1537  113.6215
  118.9198  111.7291  106.5299  100.5252  131.9314  105.3408
   97.8296   99.2526  108.0198  103.1162  102.7528   99.2065
   96.0838   99.5771  111.0587  105.4269  105.4511  100.3635
   98.5316  102.6714  113.9359  107.4426  107.9997  103.0905
  100.3448  105.0457  116.0854  108.9150  109.8749  104.9863
  101.9700  107.1951  117.8012  109.8789  111.3498  106.6294
  102.9058  108.5193  118.6955  110.2953  112.0664  107.3460
  103.4786  109.3934  118.9345  110.1270  112.2074  107.5761
  103.5306  109.6217  118.5417  109.5864  111.7933  107.1084
  103.1367  109.2805  117.4303  108.5348  110.7985  106.0567
  102.4543  108.5709  115.9692  107.3043  109.5212  104.6270
  101.2430  107.2887  113.8594  105.6938  107.7557  102.6582
   99.9024  105.8665  111.6227  104.0267  105.8948  100.5576

muscleForces = struct;
for iPen = 1:length(penaltis)
    for iGroup = 1:length(muscles_groups)
        muscleForces.(penaltis{iPen}).(muscles_groups_names{iGroup}) = [];
    end
end

for iPen = 1:length(penaltis)
    for iGroup = 1:length(muscles_groups)
        muscles = muscles_groups{iGroup};
        muscle_foces_single_group =muscleForces.(penaltis{iPen}).(muscles{1});
        for iMuscle = 2:length(muscles)
            muscle_foces_single_group = muscle_foces_single_group + muscleForces.(penaltis{iPen}).(muscles{iMuscle});

        end
        muscleForces.(penaltis{iPen}).(muscles_groups_names{iGroup}) = muscle_foces_single_group;;

    end
end
{Unrecognized field name "addbrev_l".} 
muscleForces
muscleForces = 
  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

       Pen_0: [1×1 struct]
      Pen_10: [1×1 struct]
     Pen_100: [1×1 struct]
     Pen_500: [1×1 struct]
    Pen_1000: [1×1 struct]
iGroup
iGroup =
     1
iPen
iPen =
     1
muscleForces
muscleForces = 
  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

       Pen_0: [1×1 struct]
      Pen_10: [1×1 struct]
     Pen_100: [1×1 struct]
     Pen_500: [1×1 struct]
    Pen_1000: [1×1 struct]
iMuscle
iMuscle =
     7
iMuscle
iMuscle =
     7
muscles
muscles =
  1×7 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array
    {'addbrev_l'}    {'addlong_l'}    {'addmagDist_l'}    {'addmagIsch_l'}    {'addmagMid_l'}    {'addmagProx_l'}    {'grac_l'}
muscles{iMuscle}
ans =
    'grac_l'
muscleForces.(penaltis{iPen}).(muscles{iMuscle})
{Unrecognized field name "grac_l".} 
muscle_foces_single_group
muscle_foces_single_group =
  102.3721   97.7828  103.9541  108.9126  102.0335  103.5773
   99.6373   95.5272  103.1468  106.1612  100.0010  101.1922
   96.5429   92.7144  107.9876  103.1323   97.7677   98.5303
   93.4166   89.7452  112.8486  100.0759   95.4766   95.7694
   90.2409   86.5339  117.7512   96.9404   93.0666   92.8555
   87.3016   83.4033  111.7634   93.8831   90.6645   89.9360
   84.5270   80.3289   94.4818   90.9484   88.2708   87.0125
   82.4115   77.8259   86.8704   88.3082   86.1123   84.4092
   80.4759   75.4786   84.3626   85.9412   84.0781   81.8932
   79.5862   74.2363   82.2432   84.1360   82.6372   80.1972
   78.9005   73.2296   80.2102   82.6357   81.3282   78.7066
   79.0655   73.2144   78.8604   81.9247   80.9780   78.0927
   79.5608   73.6060   77.6326   81.4393   80.8055   77.8824
   80.6067   74.6754   77.0466   81.9014   81.5726   78.3449
   82.0907   76.2815   76.6806   82.4983   82.6920   79.3747
   83.9033   78.2902   76.8062   84.0845   84.5992   80.8300
   86.2645   80.9251   77.2558   85.8341   87.0263   82.9857
   88.7915   83.7495   78.0670   88.3999   90.0335   85.3531
   91.9492   87.2335   79.3125   91.2265   93.6593   88.5199
   95.2238   90.8344   80.8060   94.6726   97.6386   91.8314
   98.9871   94.9178   82.8138   98.4354  102.2428   95.7437
  102.9492   99.1847   84.9502  102.6251  107.0032   99.8613
  107.2689  103.7819   87.6261  107.1770  112.3721  104.3487
  111.9300  108.6478   90.3855  112.0185  117.8331  109.1182
  116.8666  113.7302   93.5771  117.3246  123.7692  114.1152
  122.3315  119.1296   96.9105  122.8442  129.8471  119.5081
  127.9726  124.6345  100.5895  128.9204  136.2710  125.0330
  134.2376  130.3233  104.5030  135.1232  142.8892  130.9908
  140.5867  135.9986  108.6977  141.8173  149.7407  136.9969
  147.2287  141.5301  113.2110  148.5450  156.6711  143.1462
  153.7775  146.8682  117.9210  155.3321  163.6503  149.1802
  160.1446  151.8295  122.8843  161.9811  170.1654  154.9901
  165.9753  156.2875  127.9184  168.0900  176.5509  160.3287
  171.3411  160.3095  132.8477  173.7061  181.5013  165.2589
  175.5431  163.4340  137.6950  178.3365  186.1299  169.2812
  179.3194  166.2300  141.9210  182.0651  188.8057  172.9713
  181.3793  167.7428  145.8195  184.7474  190.8672  175.3656
  183.1004  168.9918  148.8442  186.3878  191.2905  177.4899
  183.3745  169.0861  151.2748  187.3119  191.0399  178.4220
  183.3537  168.9097  152.9380  187.6480  189.9190  179.0717
  182.7107  168.1622  154.0119  187.7580  188.6799  179.1251
  182.3236  167.5229  154.6932  188.4096  187.3621  179.3332
  182.1747  166.9845  155.3798  189.1553  187.1927  179.6853
  183.7635  167.6865  156.0681  191.9044  187.3787  181.4277
  186.0474  168.8847  158.0921  195.0029  190.4709  183.7261
  192.1545  173.0701  160.4783  200.5942  194.1501  189.1194
  199.1580  177.9809  165.4388  206.7799  201.4204  195.2250
  210.5072  186.4960  171.2773  214.8401  209.5253  204.7392
  223.0209  196.0185  179.6875  223.2778  220.0744  215.0789
  238.2063  207.8521  189.2387  232.3574  231.1732  227.3123
  254.0932  220.3587  200.3772  241.0329  243.0371  239.8476
  270.6817  233.5384  211.9854  249.3045  254.4063  252.6847
  286.2869  246.1698  223.9311  256.2055  265.4201  264.5547
  301.4636  258.5623  234.7088  262.3003  274.6283  276.0032
  313.0581  268.7217  245.0876  265.9629  283.2200  284.9569
  323.6581  278.2381  252.0843  268.8543  288.4624  293.3665
  328.4979  283.9283  262.8042  317.3289  294.9009  299.2797
  335.2667  300.0287  325.3079  369.8064  320.8621  318.7861
  346.8581  342.1545  377.4444  332.4539  343.2162  372.2758
  362.5134  354.7071  396.0868  294.9854  353.9163  385.0684
  382.5337  335.4959  369.8332  256.8499  337.6769  354.1494
  349.0802  301.7137  276.2358  225.0329  281.0281  314.4288
  290.2971  261.0294  226.7200  209.6441  246.4723  270.5390
  267.6963  238.7445  211.3320  194.2269  229.0208  248.0778
  249.9355  219.4179  195.5546  178.7683  210.9349  228.9474
  227.8980  204.3789  179.6311  164.4014  192.6111  213.3210
  207.5540  191.1068  164.5133  150.9758  176.1546  200.2387
  191.8386  182.6644  149.6413  145.9345  160.3754  194.1101
  176.4034  173.8020  137.3182  145.0852  152.3727  184.8829
  161.2915  164.4550  125.7026  137.9944  143.8112  172.0806
  146.5715  149.8753  116.6223  129.3070  133.2472  155.3300
  132.0527  132.6086  108.6300  115.1115  121.8745  136.5518
  119.5806  119.1248  102.3993  101.0728  109.1923  120.2095
  107.7720  106.4281   97.3552   97.1896  100.8269  104.8249
  101.6581   96.4975   93.3000   93.5539   96.0589   99.1857
   95.9861   88.1851   90.4196   91.0079   92.5196   93.9847
   91.6398   84.7271   88.0212   88.8174   89.4843   90.0979
   87.9516   81.8876   86.7707   87.4005   87.6423   86.8714
   85.0795   79.8151   85.7281   86.4297   86.0160   84.4636
   83.0518   78.5681   85.7589   86.0165   85.4973   82.9010
   81.4933   77.7798   85.9869   86.1201   85.1799   81.8080
   80.9530   78.0004   87.0042   86.6071   85.6681   81.7173
   81.4493   78.8203   88.3398   89.8843   90.3436   82.1813
  104.6703   90.6048   90.2322   94.3364  102.3470   92.4413
  129.4514  103.1773   97.9790  100.7811  125.0303  104.2121
  159.3930  118.3561  110.9745  107.6243  157.2887  120.9800
  165.9517  125.2468  111.3380  102.5898  163.5389  125.4797
  141.3331  121.0869  106.0504   97.8542  158.1537  113.6215
  118.9198  111.7291  106.5299  100.5252  131.9314  105.3408
   97.8296   99.2526  108.0198  103.1162  102.7528   99.2065
   96.0838   99.5771  111.0587  105.4269  105.4511  100.3635
   98.5316  102.6714  113.9359  107.4426  107.9997  103.0905
  100.3448  105.0457  116.0854  108.9150  109.8749  104.9863
  101.9700  107.1951  117.8012  109.8789  111.3498  106.6294
  102.9058  108.5193  118.6955  110.2953  112.0664  107.3460
  103.4786  109.3934  118.9345  110.1270  112.2074  107.5761
  103.5306  109.6217  118.5417  109.5864  111.7933  107.1084
  103.1367  109.2805  117.4303  108.5348  110.7985  106.0567
  102.4543  108.5709  115.9692  107.3043  109.5212  104.6270
  101.2430  107.2887  113.8594  105.6938  107.7557  102.6582
   99.9024  105.8665  111.6227  104.0267  105.8948  100.5576
muscles{1}
ans =
    'addbrev_l'
iGroup
iGroup =
     1
  muscle_foces_single_group = muscleForces.(penaltis{iPen}).(muscles{1});
{Unrecognized field name "addbrev_l".} 
muscleForces.(penaltis{iPen})
ans = 
  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

     adductors: []
    hamstrings: []
       gastroc: []
     glmax_all: []
     glmed_all: []
     glmin_all: []
    ilio_psoas: []
         vasti: []
if system_dependent('IsDebugMode')==1, dbquit; end
  [muscleForces] = sumMuscleForces(muscleForces,l);
 cd(savedir)
    save(['results_' l '.mat'],"contactForces","muscleForces","ik","id","muscles_of_interest","joints")
if system_dependent('IsDebugMode')==1, dbquit all; end
load('results_l.mat')
plotReuslts_CMBBE_withTestData
ik
ik = 
  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    hip_flexion: [101×18 double]
     knee_angle: [101×18 double]
    ankle_angle: [101×18 double]
 [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,3);
    kinematics_color = [0.5 0.5 0.1];

    % plot kinematics
    axes(ha(1))
    plotShadedSD(mean(ik.hip_flexion,2),std(ik.hip_flexion,0,2),kinematics_color);
    ylabel('joint angle (deg)')

    axes(ha(2))
    plotShadedSD(mean(ik.knee_angle,2),std(ik.knee_angle,0,2),kinematics_color);

    axes(ha(3))
    plotShadedSD(mean(ik.ankle_angle,2),std(ik.ankle_angle,0,2),kinematics_color);

    % plot moments
    first_moments_plot = 4;
    axes(ha(first_moments_plot))
    plotShadedSD(mean(id.hip_flexion,2),std(id.hip_flexion,0,2),kinematics_color);
    ylabel('joint moment (Nm)')
    xlabel('Gait cycle(%)')

    axes(ha(first_moments_plot+1))
    plotShadedSD(mean(id.knee_angle,2),std(id.knee_angle,0,2),kinematics_color);
    xlabel('Gait cycle(%)')

    axes(ha(first_moments_plot+2))
    plotShadedSD(mean(id.ankle_angle,2),std(id.ankle_angle,0,2),kinematics_color);
    xlabel('Gait cycle(%)')

    tight_subplot_ticks(ha,LastRow,0)
    mmfn_inspect
    saveas(gcf,[savedir fp 'ExtBiomech_results_' l '.tiff'])
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('saveas')" style="font-weight:bold">saveas</a>
Invalid or missing path: C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\TestData\\figures\ExtBiomech_results_l.tiff} 
savedir
savedir =
    'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\TestData\\figures'
 isfolder(savedir)
ans =
  <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a>
   0
if system_dependent('IsDebugMode')==1, dbquit all; end
plotReuslts_CMBBE_withTestData
savedir
savedir =
    'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\TestData\figures'
isfolder(savedir)
ans =
  <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a>
   0
if system_dependent('IsDebugMode')==1, dbquit all; end
plotReuslts_CMBBE_withTestData
{Unrecognized function or variable 'penalties'.
Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plotReuslts_CMBBE_withTestData', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m', 61)" style="font-weight:bold">plotReuslts_CMBBE_withTestData</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',61,0)">line 61</a>)
    Plot_colors = colorBG(0,length(penalties));} 
opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',61,0)
plotReuslts_CMBBE_withTestData
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',63,1)">63  </a>    for iMuscle = 1:length(muscles_of_interest)
muscles_of_interest
muscles_of_interest =
  1×40 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array
  Columns 1 through 14
    {'addbrev_l'}    {'addlong_l'}    {'addmagDist_l'}    {'addmagIsch_l'}    {'addmagMid_l'}    {'addmagProx_l'}    {'bflh_l'}    {'bfsh_l'}    {'edl_l'}    {'ehl_l'}    {'fdl_l'}    {'fhl_l'}    {'gaslat_l'}    {'gasmed_l'}
  Columns 15 through 28
    {'glmax1_l'}    {'glmax2_l'}    {'glmax3_l'}    {'glmed1_l'}    {'glmed2_l'}    {'glmed3_l'}    {'glmin1_l'}    {'glmin2_l'}    {'glmin3_l'}    {'grac_l'}    {'iliacus_l'}    {'perbrev_l'}    {'perlong_l'}    {'piri_l'}
  Columns 29 through 40
    {'psoas_l'}    {'recfem_l'}    {'sart_l'}    {'semimem_l'}    {'semiten_l'}    {'soleus_l'}    {'tfl_l'}    {'tibant_l'}    {'tibpost_l'}    {'vasint_l'}    {'vaslat_l'}    {'vasmed_l'}
penalties
penalties =
  5×1 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array
    {'Pen_0'   }
    {'Pen_10'  }
    {'Pen_100' }
    {'Pen_500' }
    {'Pen_1000'}
muscles = fields(muscleForces.Pen_0)'; 
try open('muscles'); catch edit('muscles'); end
   muscles_of_to_plot = {'recfem_l' 'ilio_psoas' 'tfl_l' 'sart_l' 'glmax_all'	'glmed_all'	'glmin_all' 'adductors'	'hamstrings'	'gastroc' 'soleus_l'	'vasti'};
  muscles_of_to_plot = {'recfem_l' 'ilio_psoas' 'tfl_l' 'sart_l' 'glmax_all'	'glmed_all'	'glmin_all' 'adductors'	'hamstrings'	'gastroc' 'soleus_l'	'vasti'};

    [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(length(muscles_of_to_plot),0,[0.01 0.02],[],[0.03 0.08]);
  muscles_of_to_plot = {'recfem_l' 'ilio_psoas' 'tfl_l' 'sart_l' 'glmax_all' 'glmed_all' 'glmin_all' 'adductors' 'vasti' 'hamstrings' 'gastroc' 'soleus_l' };

    [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(length(muscles_of_to_plot),0,[0.01 0.02],[],[0.03 0.08]);

    for iMuscle = 1:length(muscles_of_to_plot)
        for iPen = 1:length(penalties)
            axes(ha(last_plot_not_muscle+iMuscle))

            MuscleName = muscles_of_to_plot{iMuscle};
            force_data = muscleForces.(['Pen_' penalties{iPen}]).(MuscleName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));

            if any(iMuscle == FirstCol)
                ylabel('Muscle force (N)')
            end
            if any(iMuscle == LastRow)
                xlabel('Gait cycle(%)')
            end
        end
        ylim([0 max(ylim)*1.15])
        t = title(MuscleName,'Interpreter','none');
        t.Position(2) = t.Position(2) *0.92;
    end
{Unrecognized field name "Pen_Pen_0".} 
  [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(length(muscles_of_to_plot),0,[0.01 0.02],[],[0.03 0.08]);

    for iMuscle = 1:length(muscles_of_to_plot)
        for iPen = 1:length(penalties)
            axes(ha(last_plot_not_muscle+iMuscle))

            MuscleName = muscles_of_to_plot{iMuscle};
            force_data = muscleForces.([penalties{iPen}]).(MuscleName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));

            if any(iMuscle == FirstCol)
                ylabel('Muscle force (N)')
            end
            if any(iMuscle == LastRow)
                xlabel('Gait cycle(%)')
            end
        end
        ylim([0 max(ylim)*1.15])
        t = title(MuscleName,'Interpreter','none');
        t.Position(2) = t.Position(2) *0.92;
    end
    ax = gca;
    lg = legend(ax.Children(2:2:end),flip(penalties));
    lg.Interpreter = "none";
    lg.Position = [0.94 0.5 0.05 0.09];
    tight_subplot_ticks(ha,LastRow,0)
mmfn_inspect
  muscles_of_to_plot = {'recfem_l' 'ilio_psoas' 'tfl_l' 'sart_l' 'glmax_all' 'glmed_all' 'glmin_all' 'adductors' 'vasti' 'hamstrings' 'gastroc' 'soleus_l' };
    muscle_titles = {'recfem' 'ilio_psoas' 'tfl' 'sart' 'glmax' 'glmed' 'glmin' 'adductors' 'vasti' 'hamstrings' 'gastroc' 'soleus' };

    [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(length(muscles_of_to_plot),0,[0.01 0.02],[],[0.03 0.08]);

    for iMuscle = 1:length(muscles_of_to_plot)
        for iPen = 1:length(penalties)
            axes(ha(last_plot_not_muscle+iMuscle))

            MuscleName = muscles_of_to_plot{iMuscle};
            force_data = muscleForces.([penalties{iPen}]).(MuscleName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));

            if any(iMuscle == FirstCol)
                ylabel('Muscle force (N)')
            end
            if any(iMuscle == LastRow)
                xlabel('Gait cycle(%)')
            end
        end
        ylim([0 max(ylim)*1.15])
        t = title(muscle_titles{iMuscle},'Interpreter','none');
        t.Position(2) = t.Position(2) *0.92;
    end
    ax = gca;
    lg = legend(ax.Children(2:2:end),flip(penalties));
    lg.Interpreter = "none";
    lg.Position = [0.94 0.5 0.05 0.09];
    tight_subplot_ticks(ha,LastRow,0)

    mmfn_inspect
leg
{Unrecognized function or variable 'leg'.} 
 if contains(l,'l'); leg = 'left';
    else; leg = 'right';
    end
 suptitle(['Muscle forces ' leg ])
mmfn_inspect
f = gcf
f = 
  <a href="matlab:helpPopup matlab.ui.Figure" style="font-weight:bold">Figure</a> (5) with properties:

      Number: 5
        Name: ''
       Color: [1 1 1]
    Position: [0.0042 0.0574 0.9917 0.8639]
       Units: 'normalized'

  Show <a href="matlab:if exist('f', 'var'), matlab.graphics.internal.getForDisplay('f', f, 'matlab.ui.Figure'), else, matlab.graphics.internal.getForDisplay('f'), end">all properties</a>
f = gca
f = 
  <a href="matlab:helpPopup matlab.graphics.axis.Axes" style="font-weight:bold">Axes</a> (soleus) with properties:

             XLim: [0 120]
             YLim: [0 2070]
           XScale: 'linear'
           YScale: 'linear'
    GridLineStyle: '-'
         Position: [0.7125 0.0372 0.2075 0.2768]
            Units: 'normalized'

  Show <a href="matlab:if exist('f', 'var'), matlab.graphics.internal.getForDisplay('f', f, 'matlab.graphics.axis.Axes'), else, matlab.graphics.internal.getForDisplay('f'), end">all properties</a>
f.FontName
ans =
    'Times New Roman'
get(gca,'FontName')
ans =
    'Times New Roman'

    suptitle(['Muscle forces ' leg ],'FontName',get(gca,'FontName'))
joints
joints =
  1×8 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array
    {'hip_resultant'}    {'hip_x'}    {'hip_y'}    {'hip_z'}    {'knee_resultant'}    {'knee_x'}    {'knee_y'}    {'knee_z'}
 [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(length(joints));
    last_plot_not_contact_force = 0;
    Plot_colors = colorBG(0,length(penalties));
for iJoint = 1:length(joints)
        for iPen = 1:length(penalties)
            axes(ha(last_plot_not_contact_force+iJoint))

            JointName = joints{iJoint};
            force_data = contactForces.(['Pen_' penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(iJoint == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(iJoint == LastRow)
                xlabel('Gait cycle(%)')
            end
        end
    end
{Unrecognized field name "Pen_Pen_0".} 
[ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(length(joints));
    last_plot_not_contact_force = 0;
    Plot_colors = colorBG(0,length(penalties));
    for iJoint = 1:length(joints)
        for iPen = 1:length(penalties)
            axes(ha(last_plot_not_contact_force+iJoint))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(iJoint == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(iJoint == LastRow)
                xlabel('Gait cycle(%)')
            end
        end
    end
{Unable to perform assignment because the indices on the left side are not compatible with the size of the right side.
Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plotShadedSD', 'C:\Git\MSKmodelling\src\plotting\plotShadedSD.m', 29)" style="font-weight:bold">plotShadedSD</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\src\plotting\plotShadedSD.m',29,0)">line 29</a>)
    p(ii) = plot(x,y1,'LineWidth',1);} 
iPen
iPen =
     1
iJoint
iJoint =
     5

            JointName = joints{iJoint}
JointName =
    'knee_resultant'
 force_data = contactForces.([penalties{iPen}]).(JointName);
force_data
force_data =
     []
if system_dependent('IsDebugMode')==1, dbquit all; end
Convert2Mat
loading data for left leg...
results_SO_left_1_Pen0_AVA_p30
results_SO_left_2_Pen0_AVA_p30
results_SO_left_3_Pen0_AVA_p30
results_SO_left_4_Pen0_AVA_p30
results_SO_left_5_Pen0_AVA_p30
results_SO_left_6_Pen0_AVA_p30
results_SO_left_1_Pen1000_AVA_p30
results_SO_left_1_Pen100_AVA_p30
results_SO_left_1_Pen10_AVA_p30
results_SO_left_2_Pen1000_AVA_p30
results_SO_left_2_Pen100_AVA_p30
results_SO_left_2_Pen10_AVA_p30
results_SO_left_3_Pen1000_AVA_p30
results_SO_left_3_Pen100_AVA_p30
results_SO_left_3_Pen10_AVA_p30
results_SO_left_4_Pen1000_AVA_p30
results_SO_left_4_Pen100_AVA_p30
results_SO_left_4_Pen10_AVA_p30
results_SO_left_5_Pen1000_AVA_p30
results_SO_left_5_Pen100_AVA_p30
results_SO_left_5_Pen10_AVA_p30
results_SO_left_6_Pen1000_AVA_p30
results_SO_left_6_Pen100_AVA_p30
results_SO_left_6_Pen10_AVA_p30
results_SO_left_1_Pen1000_AVA_p30
results_SO_left_1_Pen100_AVA_p30
results_SO_left_2_Pen1000_AVA_p30
results_SO_left_2_Pen100_AVA_p30
results_SO_left_3_Pen1000_AVA_p30
results_SO_left_3_Pen100_AVA_p30
results_SO_left_4_Pen1000_AVA_p30
results_SO_left_4_Pen100_AVA_p30
results_SO_left_5_Pen1000_AVA_p30
results_SO_left_5_Pen100_AVA_p30
results_SO_left_6_Pen1000_AVA_p30
results_SO_left_6_Pen100_AVA_p30
results_SO_left_1_Pen500_AVA_p30
results_SO_left_2_Pen500_AVA_p30
results_SO_left_3_Pen500_AVA_p30
results_SO_left_4_Pen500_AVA_p30
results_SO_left_5_Pen500_AVA_p30
results_SO_left_6_Pen500_AVA_p30
results_SO_left_1_Pen1000_AVA_p30
results_SO_left_2_Pen1000_AVA_p30
results_SO_left_3_Pen1000_AVA_p30
results_SO_left_4_Pen1000_AVA_p30
results_SO_left_5_Pen1000_AVA_p30
results_SO_left_6_Pen1000_AVA_p30
loading data for right leg...
results_SO_right_1_Pen0_AVA_p30
results_SO_right_2_Pen0_AVA_p30
results_SO_right_3_Pen0_AVA_p30
results_SO_right_4_Pen0_AVA_p30
results_SO_right_5_Pen0_AVA_p30
results_SO_right_6_Pen0_AVA_p30
results_SO_right_1_Pen1000_AVA_p30
results_SO_right_1_Pen100_AVA_p30
results_SO_right_1_Pen10_AVA_p30
results_SO_right_2_Pen1000_AVA_p30
results_SO_right_2_Pen100_AVA_p30
results_SO_right_2_Pen10_AVA_p30
results_SO_right_3_Pen1000_AVA_p30
results_SO_right_3_Pen100_AVA_p30
results_SO_right_3_Pen10_AVA_p30
results_SO_right_4_Pen1000_AVA_p30
results_SO_right_4_Pen100_AVA_p30
results_SO_right_4_Pen10_AVA_p30
results_SO_right_5_Pen1000_AVA_p30
results_SO_right_5_Pen100_AVA_p30
results_SO_right_5_Pen10_AVA_p30
results_SO_right_6_Pen1000_AVA_p30
results_SO_right_6_Pen100_AVA_p30
results_SO_right_6_Pen10_AVA_p30
results_SO_right_1_Pen1000_AVA_p30
results_SO_right_1_Pen100_AVA_p30
results_SO_right_2_Pen1000_AVA_p30
results_SO_right_2_Pen100_AVA_p30
results_SO_right_3_Pen1000_AVA_p30
results_SO_right_3_Pen100_AVA_p30
results_SO_right_4_Pen1000_AVA_p30
results_SO_right_4_Pen100_AVA_p30
results_SO_right_5_Pen1000_AVA_p30
results_SO_right_5_Pen100_AVA_p30
results_SO_right_6_Pen1000_AVA_p30
results_SO_right_6_Pen100_AVA_p30
results_SO_right_1_Pen500_AVA_p30
results_SO_right_2_Pen500_AVA_p30
results_SO_right_3_Pen500_AVA_p30
results_SO_right_4_Pen500_AVA_p30
results_SO_right_5_Pen500_AVA_p30
results_SO_right_6_Pen500_AVA_p30
results_SO_right_1_Pen1000_AVA_p30
results_SO_right_2_Pen1000_AVA_p30
results_SO_right_3_Pen1000_AVA_p30
results_SO_right_4_Pen1000_AVA_p30
results_SO_right_5_Pen1000_AVA_p30
results_SO_right_6_Pen1000_AVA_p30
plotReuslts_CMBBE_withTestData
{Unrecognized field name "recfem_l".
Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plotReuslts_CMBBE_withTestData', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m', 77)" style="font-weight:bold">plotReuslts_CMBBE_withTestData</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',77,0)">line 77</a>)
            force_data = muscleForces.([penalties{iPen}]).(MuscleName);} 
Convert2Mat
loading data for left leg...
results_SO_left_1_Pen0_AVA_p30
results_SO_left_2_Pen0_AVA_p30
results_SO_left_3_Pen0_AVA_p30
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\Convert2Mat.m',134,1)">134 </a>       end
 [muscleForces] = sumMuscleForces(muscleForces,l);
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\Convert2Mat.m',194,1)">194 </a>muscles_groups = {{'recfem_' leg} {'tfl_' leg} {'sart_' leg} {'soleus_' leg}
muscles_groups = {{'recfem_' leg} {'tfl_' leg} {'sart_' leg} {'soleus_' leg}
            strcat({'addbrev_' 'addlong_' 'addmagDist_' 'addmagIsch_' 'addmagMid_' 'addmagProx_' 'grac_'},leg) ...
            strcat({'bflh_' 'bfsh_' 'semimem_' 'semiten_'},leg)...
            strcat({'gaslat_' 'gasmed_'},leg)...
            strcat({'glmax1_' 'glmax2_' 'glmax3_'},leg)...
            strcat({'glmed1_' 'glmed2_' 'glmed3_'},leg)...
            strcat({'glmin1_' 'glmin2_' 'glmin3_'},leg)...
            strcat({'iliacus_' 'psoas_'},leg) ...
            strcat({'vasint_' 'vaslat_' 'vasmed_'},leg)};
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('vertcat')" style="font-weight:bold">vertcat</a>
Dimensions of arrays being concatenated are not consistent.} 
{'recfem_' leg}
ans =
  1×2 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array
    {'recfem_'}    {'l'}
muscles_groups = {{['recfem_' leg]} {'tfl_' leg} {'sart_' leg} {'soleus_' leg} ...
            strcat({'addbrev_' 'addlong_' 'addmagDist_' 'addmagIsch_' 'addmagMid_' 'addmagProx_' 'grac_'},leg) ...
            strcat({'bflh_' 'bfsh_' 'semimem_' 'semiten_'},leg)...
            strcat({'gaslat_' 'gasmed_'},leg)...
            strcat({'glmax1_' 'glmax2_' 'glmax3_'},leg)...
            strcat({'glmed1_' 'glmed2_' 'glmed3_'},leg)...
            strcat({'glmin1_' 'glmin2_' 'glmin3_'},leg)...
            strcat({'iliacus_' 'psoas_'},leg) ...
            strcat({'vasint_' 'vaslat_' 'vasmed_'},leg)};
muscles_groups = {{['recfem_' leg]} {['tfl_' leg]} {['sart_' leg]} {['soleus_' leg]} ...
            strcat({'addbrev_' 'addlong_' 'addmagDist_' 'addmagIsch_' 'addmagMid_' 'addmagProx_' 'grac_'},leg) ...
            strcat({'bflh_' 'bfsh_' 'semimem_' 'semiten_'},leg)...
            strcat({'gaslat_' 'gasmed_'},leg)...
            strcat({'glmax1_' 'glmax2_' 'glmax3_'},leg)...
            strcat({'glmed1_' 'glmed2_' 'glmed3_'},leg)...
            strcat({'glmin1_' 'glmin2_' 'glmin3_'},leg)...
            strcat({'iliacus_' 'psoas_'},leg) ...
            strcat({'vasint_' 'vaslat_' 'vasmed_'},leg)};

muscles_groups_names = {'adductors' 'hamstrings' 'gastroc' 'glmax_all' 'glmed_all' 'glmin_all' 'ilio_psoas' 'vasti'};

for iPen = 1:length(penalties)
    for iGroup = 1:length(muscles_groups)
        muscleForces.(penalties{iPen}).(muscles_groups_names{iGroup}) = [];
    end
end
{Index exceeds the number of array elements. Index must not exceed 8.} 
penalties
penalties =
  1×1 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array
    {'Pen_0'}
muscleForces
muscleForces = 
  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    Pen_0: [1×1 struct]

penalties = fields(muscleForces); 

muscles_groups = {{['recfem_' leg]} {['tfl_' leg]} {['sart_' leg]} {['soleus_' leg]} ...
            strcat({'addbrev_' 'addlong_' 'addmagDist_' 'addmagIsch_' 'addmagMid_' 'addmagProx_' 'grac_'},leg) ...
            strcat({'bflh_' 'bfsh_' 'semimem_' 'semiten_'},leg)...
            strcat({'gaslat_' 'gasmed_'},leg)...
            strcat({'glmax1_' 'glmax2_' 'glmax3_'},leg)...
            strcat({'glmed1_' 'glmed2_' 'glmed3_'},leg)...
            strcat({'glmin1_' 'glmin2_' 'glmin3_'},leg)...
            strcat({'iliacus_' 'psoas_'},leg) ...
            strcat({'vasint_' 'vaslat_' 'vasmed_'},leg)};

muscles_groups_names = {'recfem' 'tfl' 'sart' 'soleus' 'adductors' 'hamstrings' 'gastroc' 'glmax_all' 'glmed_all' 'glmin_all' 'ilio_psoas' 'vasti'};

for iPen = 1:length(penalties)
    for iGroup = 1:length(muscles_groups)
        muscleForces.(penalties{iPen}).(muscles_groups_names{iGroup}) = [];
    end
end

for iPen = 1:length(penalties)
    for iGroup = 1:length(muscles_groups)
        muscles = muscles_groups{iGroup};
        muscle_foces_single_group = muscleForces.(penalties{iPen}).(muscles{1});
        for iMuscle = 2:length(muscles)
            muscle_foces_single_group = muscle_foces_single_group + muscleForces.(penalties{iPen}).(muscles{iMuscle});

        end
        muscleForces.(penalties{iPen}).(muscles_groups_names{iGroup}) = muscle_foces_single_group;

    end
end
figure;plot(muscleForces.Pen_0.recfem_l,'DisplayName','muscleForces.Pen_0.recfem_l')
figure;plot(muscleForces.Pen_0.recfem,'DisplayName','muscleForces.Pen_0.recfem')
if system_dependent('IsDebugMode')==1, dbquit all; end
Convert2Mat
loading data for left leg...
results_SO_left_1_Pen0_AVA_p30
results_SO_left_2_Pen0_AVA_p30
results_SO_left_3_Pen0_AVA_p30
results_SO_left_4_Pen0_AVA_p30
results_SO_left_5_Pen0_AVA_p30
results_SO_left_6_Pen0_AVA_p30
results_SO_left_1_Pen1000_AVA_p30
results_SO_left_1_Pen100_AVA_p30
results_SO_left_1_Pen10_AVA_p30
results_SO_left_2_Pen1000_AVA_p30
results_SO_left_2_Pen100_AVA_p30
results_SO_left_2_Pen10_AVA_p30
results_SO_left_3_Pen1000_AVA_p30
results_SO_left_3_Pen100_AVA_p30
results_SO_left_3_Pen10_AVA_p30
results_SO_left_4_Pen1000_AVA_p30
results_SO_left_4_Pen100_AVA_p30
results_SO_left_4_Pen10_AVA_p30
results_SO_left_5_Pen1000_AVA_p30
results_SO_left_5_Pen100_AVA_p30
results_SO_left_5_Pen10_AVA_p30
results_SO_left_6_Pen1000_AVA_p30
results_SO_left_6_Pen100_AVA_p30
results_SO_left_6_Pen10_AVA_p30
results_SO_left_1_Pen1000_AVA_p30
results_SO_left_1_Pen100_AVA_p30
results_SO_left_2_Pen1000_AVA_p30
results_SO_left_2_Pen100_AVA_p30
results_SO_left_3_Pen1000_AVA_p30
results_SO_left_3_Pen100_AVA_p30
results_SO_left_4_Pen1000_AVA_p30
results_SO_left_4_Pen100_AVA_p30
results_SO_left_5_Pen1000_AVA_p30
results_SO_left_5_Pen100_AVA_p30
results_SO_left_6_Pen1000_AVA_p30
results_SO_left_6_Pen100_AVA_p30
results_SO_left_1_Pen500_AVA_p30
results_SO_left_2_Pen500_AVA_p30
results_SO_left_3_Pen500_AVA_p30
results_SO_left_4_Pen500_AVA_p30
results_SO_left_5_Pen500_AVA_p30
results_SO_left_6_Pen500_AVA_p30
results_SO_left_1_Pen1000_AVA_p30
results_SO_left_2_Pen1000_AVA_p30
results_SO_left_3_Pen1000_AVA_p30
results_SO_left_4_Pen1000_AVA_p30
results_SO_left_5_Pen1000_AVA_p30
results_SO_left_6_Pen1000_AVA_p30
loading data for right leg...
results_SO_right_1_Pen0_AVA_p30
results_SO_right_2_Pen0_AVA_p30
results_SO_right_3_Pen0_AVA_p30
results_SO_right_4_Pen0_AVA_p30
results_SO_right_5_Pen0_AVA_p30
results_SO_right_6_Pen0_AVA_p30
results_SO_right_1_Pen1000_AVA_p30
results_SO_right_1_Pen100_AVA_p30
results_SO_right_1_Pen10_AVA_p30
results_SO_right_2_Pen1000_AVA_p30
results_SO_right_2_Pen100_AVA_p30
results_SO_right_2_Pen10_AVA_p30
results_SO_right_3_Pen1000_AVA_p30
results_SO_right_3_Pen100_AVA_p30
results_SO_right_3_Pen10_AVA_p30
results_SO_right_4_Pen1000_AVA_p30
results_SO_right_4_Pen100_AVA_p30
results_SO_right_4_Pen10_AVA_p30
results_SO_right_5_Pen1000_AVA_p30
results_SO_right_5_Pen100_AVA_p30
results_SO_right_5_Pen10_AVA_p30
results_SO_right_6_Pen1000_AVA_p30
results_SO_right_6_Pen100_AVA_p30
results_SO_right_6_Pen10_AVA_p30
results_SO_right_1_Pen1000_AVA_p30
results_SO_right_1_Pen100_AVA_p30
results_SO_right_2_Pen1000_AVA_p30
results_SO_right_2_Pen100_AVA_p30
results_SO_right_3_Pen1000_AVA_p30
results_SO_right_3_Pen100_AVA_p30
results_SO_right_4_Pen1000_AVA_p30
results_SO_right_4_Pen100_AVA_p30
results_SO_right_5_Pen1000_AVA_p30
results_SO_right_5_Pen100_AVA_p30
results_SO_right_6_Pen1000_AVA_p30
results_SO_right_6_Pen100_AVA_p30
results_SO_right_1_Pen500_AVA_p30
results_SO_right_2_Pen500_AVA_p30
results_SO_right_3_Pen500_AVA_p30
results_SO_right_4_Pen500_AVA_p30
results_SO_right_5_Pen500_AVA_p30
results_SO_right_6_Pen500_AVA_p30
results_SO_right_1_Pen1000_AVA_p30
results_SO_right_2_Pen1000_AVA_p30
results_SO_right_3_Pen1000_AVA_p30
results_SO_right_4_Pen1000_AVA_p30
results_SO_right_5_Pen1000_AVA_p30
results_SO_right_6_Pen1000_AVA_p30
plotReuslts_CMBBE_withTestData
close all
ccc
plotReuslts_CMBBE_withTestData
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',100,1)">100 </a>    saveas(gcf,[savedir fp 'MuscleForces_results_' l '.tiff'])
 [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(length(muscles_of_to_plot),0,[0.01 0.02],[],[0.03 0.08]);

    for iMuscle = 1:length(muscles_of_to_plot)
        for iPen = 1:length(penalties)
            axes(ha(last_plot_not_muscle+iMuscle))

            MuscleName = muscles_of_to_plot{iMuscle};
            force_data = muscleForces.([penalties{iPen}]).(MuscleName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));

            if any(iMuscle == FirstCol)
                ylabel('Muscle force (N)')
            else
                yticks('')
            end
            if any(iMuscle == LastRow)
                xlabel('Gait cycle(%)')
            end
        end
        ylim([0 3000])
        t = title(muscle_titles{iMuscle},'Interpreter','none');
        t.Position(2) = t.Position(2) *0.92;
    end
    ax = gca;
    lg = legend(ax.Children(2:2:end),{'normal recfem function' 'recfem inhibition (10 AU)' '... (100 AU)' '... (500 AU)' '... (1000 AU)'});
    lg.Interpreter = "none";
    lg.Position = [0.94 0.5 0.05 0.09];
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Muscle forces ' leg ],'FontName',get(gca,'FontName'))

    mmfn_inspect
 [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(length(muscles_of_to_plot),0,[0.01 0.02],[],[0.03 0.08]);

    for iMuscle = 1:length(muscles_of_to_plot)                                                                      % loop through muscles
        for iPen = 1:length(penalties)                                                                              % loop through penalties
            axes(ha(last_plot_not_muscle+iMuscle))

            MuscleName = muscles_of_to_plot{iMuscle};
            force_data = muscleForces.([penalties{iPen}]).(MuscleName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));                              % plot mean and SD

            if any(iMuscle == FirstCol)
                ylabel('Muscle force (N)')                                                                          % ylabels
            else
                yticks('')                                                                                          % yticks
            end
            if any(iMuscle == LastRow)
                xlabel('Gait cycle(%)')                                                                             % xlabels
            end
        end
        ylim([0 3500])                                                                                              % ylim
        t = title(muscle_titles{iMuscle},'Interpreter','none');                                                     % title
        t.Position(2) = t.Position(2) *0.92;
    end
    ax = gca;
    lg = legend(ax.Children(2:2:end),{'normal recfem function' 'recfem inhibition (10 AU)' '... (100 AU)' '... (500 AU)' '... (1000 AU)'});
    lg.Interpreter = "none";
    lg.Position = [0.94 0.5 0.05 0.09];
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Muscle forces ' leg ],'FontName',get(gca,'FontName'))
mmfn_inspect
lg = legend(ax.Children(2:2:end),{'normal recfem function' 'inhibition 10' 'inhibition 100' 'inhibition 500' 'inhibition 1000'});
    lg.Position
ans =
    0.9070    0.4620    0.0867    0.0952
 [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(length(joints));
    last_plot_not_contact_force = 0;
    Plot_colors = colorBG(0,length(penalties));
    for iJoint = 1:length(joints)
        for iPen = 1:length(penalties)
            axes(ha(last_plot_not_contact_force+iJoint))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(iJoint == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(iJoint == LastRow)
                xlabel('Gait cycle(%)')
            end
        end
    end

    % appearance
    ax = gca;
    lg = legend(ax.Children(2:2:end),flip(penalties));
    lg.Interpreter = "none";
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Joint contact forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect
  [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(length(joints));
    last_plot_not_contact_force = 0;
    Plot_colors = colorBG(0,length(penalties));
    for iJoint = 1:length(joints)
        for iPen = 1:length(penalties)
            axes(ha(last_plot_not_contact_force+iJoint))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(iJoint == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(iJoint == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                              % ylim
        end
    end

    % appearance
    ax = gca;
    lg = legend(ax.Children(2:2:end),flip(penalties));
    lg.Interpreter = "none";
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Joint contact forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect
    [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(length(joints));
    [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,1);
    last_plot_not_contact_force = 0;
    Plot_colors = colorBG(0,length(penalties));
    for iJoint = [1,5]%1:length(joints)
        for iPen = 1:length(penalties)
            axes(ha(last_plot_not_contact_force+iJoint))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(iJoint == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(iJoint == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                              % ylim
        end
    end
{Index exceeds the number of array elements. Index must not exceed 2.} 
ccc
 for iJoint = [1,5]%1:length(joints)
        for iPen = 1:length(penalties)
            axes(ha(last_plot_not_contact_force+iJoint))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(iJoint == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(iJoint == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                              % ylim
        end
    end
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('axes')" style="font-weight:bold">axes</a>
Invalid axes handle} 
 [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,1);
    last_plot_not_contact_force = 0;
    Plot_colors = colorBG(0,length(penalties));
    for iJoint = [1,5]%1:length(joints)
        for iPen = 1:length(penalties)
            axes(ha(last_plot_not_contact_force+iJoint))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(iJoint == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(iJoint == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                              % ylim
        end
    end
{Index exceeds the number of array elements. Index must not exceed 2.} 
iJoint
iJoint =
     5
iPen
iPen =
     1
[ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,1);
    last_plot_not_contact_force = 0;
    Plot_colors = colorBG(0,length(penalties));
    count = 0;
    for iJoint = [1,5]%1:length(joints)
        count = count +1;
        for iPen = 1:length(penalties)
            axes(ha(last_plot_not_contact_force+count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(iJoint == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(iJoint == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                              % ylim
        end
    end

    % appearance
    ax = gca;
    lg = legend(ax.Children(2:2:end),flip(penalties));
    lg.Interpreter = "none";
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Joint contact forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect
get(gcf,'Size')
ans =
  0×0 empty <a href="matlab:helpPopup char" style="font-weight:bold">char</a> array
get(gcf,'Postionm')
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('matlab.ui.Figure/get')" style="font-weight:bold">matlab.ui.Figure/get</a>
Unrecognized property Postionm for class Figure.} 
get(gcf,'Postion')
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('matlab.ui.Figure/get')" style="font-weight:bold">matlab.ui.Figure/get</a>
Unrecognized property Postion for class Figure.} 
get(gcf,'Position')
ans =
    0.1786    0.0472    0.3953    0.8639
get(gcf,'Position')
ans =
    0.3089    0.0574    0.3953    0.8639
   [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,1,[],[],[],[0.3 0.05 0.4 0.85]);
  
ccc
 [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,1,[],[],[0.1 0.15],[0.3 0.05 0.4 0.85]);
    last_plot_not_contact_force = 0;
    Plot_colors = colorBG(0,length(penalties));
    count = 0;
    for iJoint = [1,5]%1:length(joints)
        count = count +1;
        for iPen = 1:length(penalties)
            axes(ha(last_plot_not_contact_force+count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(iJoint == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(iJoint == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                              % ylim
        end
    end

    % appearance
    ax = gca;
    lg = legend(ax.Children(2:2:end),flip(penalties));
    lg.Interpreter = "none";
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Joint contact forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect
FirstCol
FirstCol =
     1     2
iJoint
iJoint =
     5
 [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,1,[],[],[0.1 0.15],[0.3 0.05 0.4 0.85]);
    last_plot_not_contact_force = 0;
    Plot_colors = colorBG(0,length(penalties));
    count = 0;
    for iJoint = [1,5]%1:length(joints)
        count = count +1;
        for iPen = 1:length(penalties)
            axes(ha(last_plot_not_contact_force+count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                              % ylim
        end
    end

    % appearance
    ax = gca;
    lg = legend(ax.Children(2:2:end),flip(penalties));
    lg.Interpreter = "none";
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Joint contact forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect
lg.Position
ans =
    0.8515    0.4477    0.1316    0.0921
 [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,1,[],[],[0.1 0.2],[0.3 0.05 0.4 0.85]);
    last_plot_not_contact_force = 0;
    Plot_colors = colorBG(0,length(penalties));
    count = 0;
    for iJoint = [1,5]%1:length(joints)
        count = count +1;
        for iPen = 1:length(penalties)
            axes(ha(last_plot_not_contact_force+count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                              % ylim
        end
    end

    % appearance
    ax = gca;
    lg = legend(ax.Children(2:2:end),flip(penalties));
    lg.Position = [0.85 0.5 0.15 0.1];
    lg.Interpreter = "none";
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Joint contact forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect
legend_Iterations = {'normal recfem function' 'inhibition 10' 'inhibition 100' 'inhibition 500' 'inhibition 1000'};
[ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,1,[],[],[0.1 0.2],[0.3 0.05 0.4 0.85]);
    last_plot_not_contact_force = 0;
    Plot_colors = colorBG(0,length(penalties));
    count = 0;
    for iJoint = [1,5]%1:length(joints)
        count = count +1;
        for iPen = 1:length(penalties)
            axes(ha(last_plot_not_contact_force+count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                              % ylim
        end
    end

    % appearance
    ax = gca;
    lg = legend(ax.Children(2:2:end),legend_Iterations);
    lg.Position = [0.85 0.5 0.15 0.1];
    lg.Interpreter = "none";
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Joint contact forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect
    lg.Position
ans =
    0.7488    0.7246    0.2194    0.1065
ccc
 [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,1,[],[],[0.1 0.2],[0.3 0.05 0.4 0.85]);
    last_plot_not_contact_force = 0;
    Plot_colors = colorBG(0,length(penalties));
    count = 0;
    for iJoint = [1,5]%1:length(joints)
        count = count +1;
        for iPen = 1:length(penalties)
            axes(ha(last_plot_not_contact_force+count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                              % ylim
        end
    end

    % appearance
    ax = gca;
    lg = legend(ax.Children(2:2:end),legend_Iterations);
    lg.Position = [0.75 0.75 0.21 0.15];
    lg.Interpreter = "none";
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Joint contact forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect

    saveas(gcf,[savedir fp 'JCF_results_' l '.tiff'])
 [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,1,[],[],[0.1 0.2],[0.3 0.05 0.4 0.85]);
    last_plot_not_contact_force = 0;
    Plot_colors = colorBG(0,length(penalties));
    count = 0;
    for iJoint = [1,5]%1:length(joints)
        count = count +1;
        for iPen = 1:length(penalties)
            axes(ha(last_plot_not_contact_force+count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                              % ylim
        end
    end

    % appearance
    ax = gca;
    lg = legend(ax.Children(2:2:end),legend_Iterations);
    lg.Position = [0.75 0.75 0.21 0.05];
    lg.Interpreter = "none";
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Joint contact forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect
force_data
force_data =
   1.0e+03 *
    1.7143    1.5575    1.1666    1.2176    1.2404    1.2841
    1.8201    1.5307    1.3293    1.2861    1.2447    1.3170
    1.4610    1.2306    1.1271    1.0698    1.0296    1.0668
    1.2010    1.0911    0.9650    0.9296    0.9158    0.9203
    1.0944    1.1998    0.8855    1.0066    1.0105    0.9340
    1.1824    1.3671    0.8739    1.1099    1.1416    1.0849
    1.4062    1.5752    0.9329    1.2545    1.3105    1.3313
    1.5467    1.7054    1.0081    1.3856    1.4340    1.4779
    1.6645    1.8143    1.0919    1.5041    1.5335    1.5972
    1.7125    1.9068    1.2107    1.6264    1.6358    1.7319
    1.7559    1.9945    1.3372    1.7509    1.7387    1.8609
    1.7838    2.0621    1.4581    1.8653    1.8465    1.9619
    1.8062    2.1143    1.5764    1.9768    1.9475    2.0416
    1.8196    2.1408    1.6802    2.0444    2.0079    2.0859
    1.8242    2.1283    1.7738    2.1058    2.0486    2.0934
    1.8222    2.0863    1.8449    2.1254    2.0450    2.0733
    1.7907    2.0028    1.9072    2.1341    2.0147    2.0122
    1.7503    1.9068    1.9596    2.0884    1.9546    1.9387
    1.7100    1.8008    2.0254    2.0339    1.8842    1.8539
    1.6730    1.7165    2.0990    1.9586    1.8081    1.7752
    1.6535    1.7476    2.1942    1.8875    1.7759    1.7307
    1.6636    1.8064    2.2947    1.8223    1.7548    1.7233
    1.7269    1.9151    2.3538    1.7841    1.8686    1.7826
    1.8015    2.0122    2.4071    1.7675    1.9870    1.8602
    1.8852    2.1000    2.4319    1.8227    2.1019    1.9523
    1.9902    2.1849    2.4525    1.9108    2.2088    2.0437
    2.1024    2.2689    2.4630    1.9980    2.2961    2.1347
    2.2192    2.3524    2.4786    2.0850    2.3782    2.2088
    2.3395    2.4363    2.5001    2.1863    2.4540    2.2815
    2.4785    2.5231    2.5329    2.2910    2.5199    2.3523
    2.6190    2.6107    2.5726    2.4288    2.5795    2.4262
    2.7625    2.6996    2.6202    2.5635    2.6485    2.5060
    2.8961    2.7752    2.6700    2.6859    2.7201    2.5857
    3.0209    2.8393    2.7130    2.8054    2.8047    2.6655
    3.1395    2.9006    2.7544    2.9195    2.8906    2.7525
    3.2559    2.9610    2.7847    3.0361    2.9807    2.8423
    3.3627    3.0367    2.8180    3.1558    3.0713    2.9476
    3.4715    3.1174    2.8591    3.2849    3.1633    3.0569
    3.5990    3.2237    2.9089    3.4205    3.2626    3.1854
    3.7312    3.3379    2.9702    3.5523    3.3712    3.3150
    3.8735    3.4686    3.0266    3.6826    3.4788    3.4470
    4.0030    3.5931    3.0797    3.7818    3.5858    3.5579
    4.1206    3.7117    3.1078    3.8756    3.6519    3.6492
    4.1887    3.8070    3.1282    3.9099    3.7053    3.7076
    4.2370    3.8928    3.1021    3.9310    3.6899    3.7528
    4.2070    3.8718    3.0676    3.8552    3.6612    3.7319
    4.1604    3.8323    2.9864    3.7480    3.5527    3.6930
    4.0398    3.7257    2.8941    3.5417    3.4209    3.5574
    3.8992    3.5835    2.7698    3.2978    3.2213    3.3931
    3.7130    3.3595    2.6190    2.9901    2.9988    3.1632
    3.4878    3.1100    2.4314    2.6736    2.7445    2.9196
    3.2236    2.8350    2.2113    2.3484    2.4843    2.6622
    2.8881    2.5000    1.9677    1.9794    2.2197    2.3666
    2.5215    2.1389    1.7639    1.5847    1.9167    2.0544
    2.0874    1.7420    1.5737    1.2241    1.6006    1.6921
    1.6471    1.3474    1.3122    0.8743    1.2603    1.3265
    1.2247    1.0185    1.0470    0.6530    0.9253    0.9873
    0.8693    0.7365    0.8267    0.4512    0.6899    0.7039
    0.6814    0.5714    0.6355    0.4349    0.5056    0.5598
    0.5440    0.4659    0.5381    0.4136    0.4862    0.4721
    0.4610    0.4243    0.4513    0.3638    0.4369    0.4451
    0.3843    0.3583    0.3805    0.3451    0.3427    0.3829
    0.3107    0.2807    0.3796    0.4075    0.3399    0.3042
    0.3564    0.3247    0.4328    0.4645    0.4080    0.3372
    0.4181    0.3857    0.4871    0.5138    0.4707    0.3861
    0.4669    0.4419    0.5417    0.5407    0.5314    0.4352
    0.5074    0.4879    0.5535    0.5481    0.5577    0.4765
    0.5255    0.5061    0.5573    0.5335    0.5775    0.4967
    0.5291    0.5059    0.5137    0.5079    0.5586    0.5003
    0.5159    0.4842    0.4666    0.4667    0.5334    0.4847
    0.4886    0.4454    0.4065    0.4214    0.4861    0.4520
    0.4541    0.3977    0.3559    0.3791    0.4367    0.4103
    0.4151    0.3488    0.3204    0.3382    0.3843    0.3673
    0.3760    0.3010    0.3032    0.3186    0.3425    0.3252
    0.3469    0.2756    0.3012    0.3011    0.3094    0.3034
    0.3210    0.2547    0.2985    0.2921    0.2869    0.2846
    0.3044    0.2474    0.2956    0.2850    0.2688    0.2753
    0.2923    0.2419    0.2955    0.2820    0.2644    0.2693
    0.2860    0.2385    0.2958    0.2775    0.2623    0.2676
    0.2796    0.2413    0.2965    0.2710    0.2677    0.2677
    0.2733    0.2475    0.2957    0.2631    0.2712    0.2689
    0.2623    0.2457    0.2891    0.2542    0.2668    0.2628
    0.2502    0.2423    0.2822    0.2498    0.2570    0.2549
    0.2316    0.2368    0.2747    0.2473    0.2379    0.2405
    0.2191    0.2381    0.2786    0.2650    0.2429    0.2344
    0.2268    0.2617    0.2925    0.2868    0.2696    0.2554
    0.2509    0.2944    0.3417    0.3572    0.3175    0.2974
    0.2969    0.3392    0.4066    0.4349    0.3750    0.3672
    0.4165    0.4211    0.5159    0.5656    0.4720    0.4871
    0.5802    0.5253    0.6333    0.7006    0.5772    0.6370
    0.7893    0.6821    0.7794    0.8511    0.7668    0.8251
    1.0074    0.8500    0.9211    0.9915    0.9517    1.0208
    1.1785    1.0000    1.0435    1.1134    1.1160    1.1786
    1.3267    1.1353    1.1434    1.1990    1.2480    1.3142
    1.3903    1.2163    1.2009    1.2456    1.3187    1.3683
    1.4114    1.2554    1.2128    1.2338    1.3306    1.3708
    1.3715    1.2344    1.1806    1.1850    1.2858    1.2992
    1.2813    1.1641    1.0990    1.0828    1.1855    1.1737
    1.1587    1.0617    0.9934    0.9619    1.0582    1.0132
    1.2943    0.9853    1.0254    1.0503    1.0888    1.1742
    1.4929    0.9152    1.0842    1.1697    1.1502    1.4137
trpz
{Unrecognized function or variable 'trpz'.} 
trapz(force_data)
ans =
   1.0e+05 *
    1.6702    1.5960    1.4622    1.5350    1.5509    1.5477
contactForces.([penalties{iPen}]).(JointName)
ans =
   1.0e+03 *
    1.7143    1.5575    1.1666    1.2176    1.2404    1.2841
    1.8201    1.5307    1.3293    1.2861    1.2447    1.3170
    1.4610    1.2306    1.1271    1.0698    1.0296    1.0668
    1.2010    1.0911    0.9650    0.9296    0.9158    0.9203
    1.0944    1.1998    0.8855    1.0066    1.0105    0.9340
    1.1824    1.3671    0.8739    1.1099    1.1416    1.0849
    1.4062    1.5752    0.9329    1.2545    1.3105    1.3313
    1.5467    1.7054    1.0081    1.3856    1.4340    1.4779
    1.6645    1.8143    1.0919    1.5041    1.5335    1.5972
    1.7125    1.9068    1.2107    1.6264    1.6358    1.7319
    1.7559    1.9945    1.3372    1.7509    1.7387    1.8609
    1.7838    2.0621    1.4581    1.8653    1.8465    1.9619
    1.8062    2.1143    1.5764    1.9768    1.9475    2.0416
    1.8196    2.1408    1.6802    2.0444    2.0079    2.0859
    1.8242    2.1283    1.7738    2.1058    2.0486    2.0934
    1.8222    2.0863    1.8449    2.1254    2.0450    2.0733
    1.7907    2.0028    1.9072    2.1341    2.0147    2.0122
    1.7503    1.9068    1.9596    2.0884    1.9546    1.9387
    1.7100    1.8008    2.0254    2.0339    1.8842    1.8539
    1.6730    1.7165    2.0990    1.9586    1.8081    1.7752
    1.6535    1.7476    2.1942    1.8875    1.7759    1.7307
    1.6636    1.8064    2.2947    1.8223    1.7548    1.7233
    1.7269    1.9151    2.3538    1.7841    1.8686    1.7826
    1.8015    2.0122    2.4071    1.7675    1.9870    1.8602
    1.8852    2.1000    2.4319    1.8227    2.1019    1.9523
    1.9902    2.1849    2.4525    1.9108    2.2088    2.0437
    2.1024    2.2689    2.4630    1.9980    2.2961    2.1347
    2.2192    2.3524    2.4786    2.0850    2.3782    2.2088
    2.3395    2.4363    2.5001    2.1863    2.4540    2.2815
    2.4785    2.5231    2.5329    2.2910    2.5199    2.3523
    2.6190    2.6107    2.5726    2.4288    2.5795    2.4262
    2.7625    2.6996    2.6202    2.5635    2.6485    2.5060
    2.8961    2.7752    2.6700    2.6859    2.7201    2.5857
    3.0209    2.8393    2.7130    2.8054    2.8047    2.6655
    3.1395    2.9006    2.7544    2.9195    2.8906    2.7525
    3.2559    2.9610    2.7847    3.0361    2.9807    2.8423
    3.3627    3.0367    2.8180    3.1558    3.0713    2.9476
    3.4715    3.1174    2.8591    3.2849    3.1633    3.0569
    3.5990    3.2237    2.9089    3.4205    3.2626    3.1854
    3.7312    3.3379    2.9702    3.5523    3.3712    3.3150
    3.8735    3.4686    3.0266    3.6826    3.4788    3.4470
    4.0030    3.5931    3.0797    3.7818    3.5858    3.5579
    4.1206    3.7117    3.1078    3.8756    3.6519    3.6492
    4.1887    3.8070    3.1282    3.9099    3.7053    3.7076
    4.2370    3.8928    3.1021    3.9310    3.6899    3.7528
    4.2070    3.8718    3.0676    3.8552    3.6612    3.7319
    4.1604    3.8323    2.9864    3.7480    3.5527    3.6930
    4.0398    3.7257    2.8941    3.5417    3.4209    3.5574
    3.8992    3.5835    2.7698    3.2978    3.2213    3.3931
    3.7130    3.3595    2.6190    2.9901    2.9988    3.1632
    3.4878    3.1100    2.4314    2.6736    2.7445    2.9196
    3.2236    2.8350    2.2113    2.3484    2.4843    2.6622
    2.8881    2.5000    1.9677    1.9794    2.2197    2.3666
    2.5215    2.1389    1.7639    1.5847    1.9167    2.0544
    2.0874    1.7420    1.5737    1.2241    1.6006    1.6921
    1.6471    1.3474    1.3122    0.8743    1.2603    1.3265
    1.2247    1.0185    1.0470    0.6530    0.9253    0.9873
    0.8693    0.7365    0.8267    0.4512    0.6899    0.7039
    0.6814    0.5714    0.6355    0.4349    0.5056    0.5598
    0.5440    0.4659    0.5381    0.4136    0.4862    0.4721
    0.4610    0.4243    0.4513    0.3638    0.4369    0.4451
    0.3843    0.3583    0.3805    0.3451    0.3427    0.3829
    0.3107    0.2807    0.3796    0.4075    0.3399    0.3042
    0.3564    0.3247    0.4328    0.4645    0.4080    0.3372
    0.4181    0.3857    0.4871    0.5138    0.4707    0.3861
    0.4669    0.4419    0.5417    0.5407    0.5314    0.4352
    0.5074    0.4879    0.5535    0.5481    0.5577    0.4765
    0.5255    0.5061    0.5573    0.5335    0.5775    0.4967
    0.5291    0.5059    0.5137    0.5079    0.5586    0.5003
    0.5159    0.4842    0.4666    0.4667    0.5334    0.4847
    0.4886    0.4454    0.4065    0.4214    0.4861    0.4520
    0.4541    0.3977    0.3559    0.3791    0.4367    0.4103
    0.4151    0.3488    0.3204    0.3382    0.3843    0.3673
    0.3760    0.3010    0.3032    0.3186    0.3425    0.3252
    0.3469    0.2756    0.3012    0.3011    0.3094    0.3034
    0.3210    0.2547    0.2985    0.2921    0.2869    0.2846
    0.3044    0.2474    0.2956    0.2850    0.2688    0.2753
    0.2923    0.2419    0.2955    0.2820    0.2644    0.2693
    0.2860    0.2385    0.2958    0.2775    0.2623    0.2676
    0.2796    0.2413    0.2965    0.2710    0.2677    0.2677
    0.2733    0.2475    0.2957    0.2631    0.2712    0.2689
    0.2623    0.2457    0.2891    0.2542    0.2668    0.2628
    0.2502    0.2423    0.2822    0.2498    0.2570    0.2549
    0.2316    0.2368    0.2747    0.2473    0.2379    0.2405
    0.2191    0.2381    0.2786    0.2650    0.2429    0.2344
    0.2268    0.2617    0.2925    0.2868    0.2696    0.2554
    0.2509    0.2944    0.3417    0.3572    0.3175    0.2974
    0.2969    0.3392    0.4066    0.4349    0.3750    0.3672
    0.4165    0.4211    0.5159    0.5656    0.4720    0.4871
    0.5802    0.5253    0.6333    0.7006    0.5772    0.6370
    0.7893    0.6821    0.7794    0.8511    0.7668    0.8251
    1.0074    0.8500    0.9211    0.9915    0.9517    1.0208
    1.1785    1.0000    1.0435    1.1134    1.1160    1.1786
    1.3267    1.1353    1.1434    1.1990    1.2480    1.3142
    1.3903    1.2163    1.2009    1.2456    1.3187    1.3683
    1.4114    1.2554    1.2128    1.2338    1.3306    1.3708
    1.3715    1.2344    1.1806    1.1850    1.2858    1.2992
    1.2813    1.1641    1.0990    1.0828    1.1855    1.1737
    1.1587    1.0617    0.9934    0.9619    1.0582    1.0132
    1.2943    0.9853    1.0254    1.0503    1.0888    1.1742
    1.4929    0.9152    1.0842    1.1697    1.1502    1.4137
mean(trapz(force_data))
ans =
   1.5603e+05
 [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,1,[],[],[0.1 0.2],[0.3 0.05 0.4 0.85]);
    last_plot_not_contact_force = 0;
    Plot_colors = colorBG(0,length(penalties));
    count = 0;
    trap_JCF = [];
    for iJoint = [1,5]%1:length(joints)
        count = count +1;
        for iPen = 1:length(penalties)
            axes(ha(last_plot_not_contact_force+count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);
            
            trap_JCF(count, iPen) = mean(trapz(force_data));

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                              % ylim
        end
    end

    % appearance
    ax = gca;
    lg = legend(ax.Children(2:2:end),legend_Iterations);
    lg.Position = [0.75 0.75 0.21 0.05];
    lg.Interpreter = "none";
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Joint contact forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect
trap_JCF
trap_JCF =
   1.0e+05 *
    2.3310    2.3247    2.3411    2.3476    2.3512
    2.1168    1.6425    1.5732    1.5622    1.5603
   last_plot_not_muscle = 0;
    penalties = fields(muscleForces); 
    Plot_colors = colorBG(0,length(penalties));

    muscles_of_to_plot = {'recfem' 'ilio_psoas' 'tfl' 'sart' 'glmax_all' 'glmed_all' 'glmin_all' 'adductors' 'vasti' 'hamstrings' 'gastroc' 'soleus' };
    muscle_titles = {'recfem' 'ilio_psoas' 'tfl' 'sart' 'glmax' 'glmed' 'glmin' 'adductors' 'vasti' 'hamstrings' 'gastroc' 'soleus' };
    legend_Iterations = {'normal recfem function' 'inhibition 10' 'inhibition 100' 'inhibition 500' 'inhibition 1000'};

    [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(length(muscles_of_to_plot),0,[0.01 0.02],[],[0.03 0.08]);
    trap_MF = [];

    for iMuscle = 1:length(muscles_of_to_plot)                                                                      % loop through muscles
        for iPen = 1:length(penalties)                                                                              % loop through penalties
            axes(ha(last_plot_not_muscle+iMuscle))

            MuscleName = muscles_of_to_plot{iMuscle};
            force_data = muscleForces.([penalties{iPen}]).(MuscleName);
            
            if contains(MuscleName,'recfem')
                trap_MF(1, iPen) = mean(trapz(force_data));
            end

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));                              % plot mean and SD

            if any(iMuscle == FirstCol)
                ylabel('Muscle force (N)')                                                                          % ylabels
            else
                yticks('')                                                                                          % yticks
            end
            if any(iMuscle == LastRow)
                xlabel('Gait cycle(%)')                                                                             % xlabels
            end
        end
        ylim([0 3500])                                                                                              % ylim
        t = title(muscle_titles{iMuscle},'Interpreter','none');                                                     % title
        t.Position(2) = t.Position(2) *0.92;
    end
    ax = gca;
    lg = legend(ax.Children(2:2:end),legend_Iterations);
    lg.Interpreter = "none";
    lg.Position = [ 0.9070    0.4620    0.0867    0.0952];
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Muscle forces ' leg ],'FontName',get(gca,'FontName'))
   mmfn_inspect
trap_MF
trap_MF =
   1.0e+04 *
    3.0393    0.6669    0.3004    0.2537    0.2537
  [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,2,[],[],[0.1 0.2],[0.3 0.05 0.4 0.85]);

    Plot_colors = colorBG(0,length(penalties));
    count = 0;
    trap_JCF = [];
    for iJoint = [1,5]%1:length(joints)
        count = count +1;
        for iPen = 1:length(penalties)
            axes(ha(count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);
            
            trap_JCF(1, iPen) = mean(trapz(force_data));

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                          % ylim
        end
        count = count +1;
        axes(ha(count))
        scatter(trap_MF, trap_JCF)
    end

    % appearance
    ax = gca;
    lg = legend(ax.Children(2:2:end),legend_Iterations);
[Warning: Ignoring extra legend entries.] 
[> In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('legend>process_inputs', 'C:\Program Files\MATLAB\R2022a\toolbox\matlab\scribe\legend.m', 592)" style="font-weight:bold">legend>process_inputs</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2022a\toolbox\matlab\scribe\legend.m',592,0)">line 592</a>)
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('legend>make_legend', 'C:\Program Files\MATLAB\R2022a\toolbox\matlab\scribe\legend.m', 319)" style="font-weight:bold">legend>make_legend</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2022a\toolbox\matlab\scribe\legend.m',319,0)">line 319</a>)
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('legend', 'C:\Program Files\MATLAB\R2022a\toolbox\matlab\scribe\legend.m', 263)" style="font-weight:bold">legend</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2022a\toolbox\matlab\scribe\legend.m',263,0)">line 263</a>)
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plotReuslts_CMBBE_withTestData', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m', 100)" style="font-weight:bold">plotReuslts_CMBBE_withTestData</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',100,0)">line 100</a>)] 
    lg.Position = [0.75 0.75 0.21 0.05];
    lg.Interpreter = "none";
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Joint contact forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect
get(gcf,'Position')
ans =
    0.3042    0.0574    0.5823    0.7639
get(gcf,'Position')
ans =
    0.1505    0.0852    0.5854    0.8185
 [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,2,[],[],[0.1 0.2],[0.2 0.08 0.6 0.81]);

    Plot_colors = colorBG(0,length(penalties));
    count = 0;
    trap_JCF = [];
    for iJoint = [1,5]%1:length(joints)
        count = count +1;
        for iPen = 1:length(penalties)
            axes(ha(count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);
            
            trap_JCF(1, iPen) = mean(trapz(force_data));

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                          % ylim
        end
        count = count +1;
        axes(ha(count))
        scatter(trap_MF, trap_JCF)
    end

    % appearance
    ax = ha(1);
    lg = legend(ax.Children(2:2:end),legend_Iterations);
    lg.Position = [0.75 0.75 0.21 0.05];
    lg.Interpreter = "none";
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Joint contact forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect
Convert2Mat
loading data for left leg...
results_SO_left_1_Pen0_AVA_p30
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\Convert2Mat.m',134,1)">134 </a>        end
muscleForces
muscleForces = 
  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    Pen_0: [1×1 struct]
force_data.(iMuscle)
ans =
   22.5442
   22.8584
   23.3043
   23.8094
   24.2952
   24.6612
   24.8247
   24.8836
   24.8997
   24.8883
   24.8547
   24.7955
   24.6923
   24.5240
   24.3054
   24.0629
   23.8146
   23.5738
   23.3510
   23.1536
   22.9844
   22.8440
   22.7340
   22.6592
   22.6266
   22.6445
   22.7230
   22.8750
   23.1171
   23.4691
   23.9507
   24.5495
   24.9276
   25.1298
   25.1913
   24.5357
   23.5047
   22.5312
   21.7213
   23.9807
   28.5508
   30.0225
   28.1745
   23.7270
   21.7043
   22.4346
   23.3308
   24.3436
   25.1520
   25.1272
   24.8450
   23.9935
   23.1161
   22.5400
   22.2980
   22.2979
   22.4448
time_range
time_range =
    0.9600    2.0800
try open('trap'); catch edit('trap'); end
trap(force_data.(iMuscle))
{Unrecognized function or variable 'trap'.} 
trapz(force_data.(iMuscle))
ans =
   1.3424e+03
trapz(force_data.(iMuscle),time_range-time_range(1))
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('trapz')" style="font-weight:bold">trapz</a>
Point spacing must be a scalar specifying uniform spacing or a vector of x-coordinates for each data point.} 
time_range-time_range(1)
ans =
         0    1.1200
try open('force_data'); catch edit('force_data'); end
trapz(force_data.(iMuscle),force_data.time)
ans =
   -1.8053
iMuscle
iMuscle =
    'vasmed_l'
try open('force_data'); catch edit('force_data'); end
figure;plot(force_data.vasmed_l)
trap.muscleForces = struct;
trap.contactForces = struct;
contactForces_data
contactForces_data = 
  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

                                              time: [57×1 double]
              ground_pelvis_on_ground_in_ground_fx: [57×1 double]
              ground_pelvis_on_ground_in_ground_fy: [57×1 double]
              ground_pelvis_on_ground_in_ground_fz: [57×1 double]
              ground_pelvis_on_ground_in_ground_mx: [57×1 double]
              ground_pelvis_on_ground_in_ground_my: [57×1 double]
              ground_pelvis_on_ground_in_ground_mz: [57×1 double]
              ground_pelvis_on_ground_in_ground_px: [57×1 double]
              ground_pelvis_on_ground_in_ground_py: [57×1 double]
              ground_pelvis_on_ground_in_ground_pz: [57×1 double]
                      hip_r_on_pelvis_in_pelvis_fx: [57×1 double]
                      hip_r_on_pelvis_in_pelvis_fy: [57×1 double]
                      hip_r_on_pelvis_in_pelvis_fz: [57×1 double]
                      hip_r_on_pelvis_in_pelvis_mx: [57×1 double]
                      hip_r_on_pelvis_in_pelvis_my: [57×1 double]
                      hip_r_on_pelvis_in_pelvis_mz: [57×1 double]
                      hip_r_on_pelvis_in_pelvis_px: [57×1 double]
                      hip_r_on_pelvis_in_pelvis_py: [57×1 double]
                      hip_r_on_pelvis_in_pelvis_pz: [57×1 double]
            walker_knee_r_on_femur_r_in_femur_r_fx: [57×1 double]
            walker_knee_r_on_femur_r_in_femur_r_fy: [57×1 double]
            walker_knee_r_on_femur_r_in_femur_r_fz: [57×1 double]
            walker_knee_r_on_femur_r_in_femur_r_mx: [57×1 double]
            walker_knee_r_on_femur_r_in_femur_r_my: [57×1 double]
            walker_knee_r_on_femur_r_in_femur_r_mz: [57×1 double]
            walker_knee_r_on_femur_r_in_femur_r_px: [57×1 double]
            walker_knee_r_on_femur_r_in_femur_r_py: [57×1 double]
            walker_knee_r_on_femur_r_in_femur_r_pz: [57×1 double]
         patellofemoral_r_on_femur_r_in_femur_r_fx: [57×1 double]
         patellofemoral_r_on_femur_r_in_femur_r_fy: [57×1 double]
         patellofemoral_r_on_femur_r_in_femur_r_fz: [57×1 double]
         patellofemoral_r_on_femur_r_in_femur_r_mx: [57×1 double]
         patellofemoral_r_on_femur_r_in_femur_r_my: [57×1 double]
         patellofemoral_r_on_femur_r_in_femur_r_mz: [57×1 double]
         patellofemoral_r_on_femur_r_in_femur_r_px: [57×1 double]
         patellofemoral_r_on_femur_r_in_femur_r_py: [57×1 double]
         patellofemoral_r_on_femur_r_in_femur_r_pz: [57×1 double]
                  ankle_r_on_tibia_r_in_tibia_r_fx: [57×1 double]
                  ankle_r_on_tibia_r_in_tibia_r_fy: [57×1 double]
                  ankle_r_on_tibia_r_in_tibia_r_fz: [57×1 double]
                  ankle_r_on_tibia_r_in_tibia_r_mx: [57×1 double]
                  ankle_r_on_tibia_r_in_tibia_r_my: [57×1 double]
                  ankle_r_on_tibia_r_in_tibia_r_mz: [57×1 double]
                  ankle_r_on_tibia_r_in_tibia_r_px: [57×1 double]
                  ankle_r_on_tibia_r_in_tibia_r_py: [57×1 double]
                  ankle_r_on_tibia_r_in_tibia_r_pz: [57×1 double]
               subtalar_r_on_talus_r_in_talus_r_fx: [57×1 double]
               subtalar_r_on_talus_r_in_talus_r_fy: [57×1 double]
               subtalar_r_on_talus_r_in_talus_r_fz: [57×1 double]
               subtalar_r_on_talus_r_in_talus_r_mx: [57×1 double]
               subtalar_r_on_talus_r_in_talus_r_my: [57×1 double]
               subtalar_r_on_talus_r_in_talus_r_mz: [57×1 double]
               subtalar_r_on_talus_r_in_talus_r_px: [57×1 double]
               subtalar_r_on_talus_r_in_talus_r_py: [57×1 double]
               subtalar_r_on_talus_r_in_talus_r_pz: [57×1 double]
                    mtp_r_on_calcn_r_in_calcn_r_fx: [57×1 double]
                    mtp_r_on_calcn_r_in_calcn_r_fy: [57×1 double]
                    mtp_r_on_calcn_r_in_calcn_r_fz: [57×1 double]
                    mtp_r_on_calcn_r_in_calcn_r_mx: [57×1 double]
                    mtp_r_on_calcn_r_in_calcn_r_my: [57×1 double]
                    mtp_r_on_calcn_r_in_calcn_r_mz: [57×1 double]
                    mtp_r_on_calcn_r_in_calcn_r_px: [57×1 double]
                    mtp_r_on_calcn_r_in_calcn_r_py: [57×1 double]
                    mtp_r_on_calcn_r_in_calcn_r_pz: [57×1 double]
                      hip_l_on_pelvis_in_pelvis_fx: [57×1 double]
                      hip_l_on_pelvis_in_pelvis_fy: [57×1 double]
                      hip_l_on_pelvis_in_pelvis_fz: [57×1 double]
                      hip_l_on_pelvis_in_pelvis_mx: [57×1 double]
                      hip_l_on_pelvis_in_pelvis_my: [57×1 double]
                      hip_l_on_pelvis_in_pelvis_mz: [57×1 double]
                      hip_l_on_pelvis_in_pelvis_px: [57×1 double]
                      hip_l_on_pelvis_in_pelvis_py: [57×1 double]
                      hip_l_on_pelvis_in_pelvis_pz: [57×1 double]
            walker_knee_l_on_femur_l_in_femur_l_fx: [57×1 double]
            walker_knee_l_on_femur_l_in_femur_l_fy: [57×1 double]
            walker_knee_l_on_femur_l_in_femur_l_fz: [57×1 double]
            walker_knee_l_on_femur_l_in_femur_l_mx: [57×1 double]
            walker_knee_l_on_femur_l_in_femur_l_my: [57×1 double]
            walker_knee_l_on_femur_l_in_femur_l_mz: [57×1 double]
            walker_knee_l_on_femur_l_in_femur_l_px: [57×1 double]
            walker_knee_l_on_femur_l_in_femur_l_py: [57×1 double]
            walker_knee_l_on_femur_l_in_femur_l_pz: [57×1 double]
         patellofemoral_l_on_femur_l_in_femur_l_fx: [57×1 double]
         patellofemoral_l_on_femur_l_in_femur_l_fy: [57×1 double]
         patellofemoral_l_on_femur_l_in_femur_l_fz: [57×1 double]
         patellofemoral_l_on_femur_l_in_femur_l_mx: [57×1 double]
         patellofemoral_l_on_femur_l_in_femur_l_my: [57×1 double]
         patellofemoral_l_on_femur_l_in_femur_l_mz: [57×1 double]
         patellofemoral_l_on_femur_l_in_femur_l_px: [57×1 double]
         patellofemoral_l_on_femur_l_in_femur_l_py: [57×1 double]
         patellofemoral_l_on_femur_l_in_femur_l_pz: [57×1 double]
                  ankle_l_on_tibia_l_in_tibia_l_fx: [57×1 double]
                  ankle_l_on_tibia_l_in_tibia_l_fy: [57×1 double]
                  ankle_l_on_tibia_l_in_tibia_l_fz: [57×1 double]
                  ankle_l_on_tibia_l_in_tibia_l_mx: [57×1 double]
                  ankle_l_on_tibia_l_in_tibia_l_my: [57×1 double]
                  ankle_l_on_tibia_l_in_tibia_l_mz: [57×1 double]
                  ankle_l_on_tibia_l_in_tibia_l_px: [57×1 double]
                  ankle_l_on_tibia_l_in_tibia_l_py: [57×1 double]
                  ankle_l_on_tibia_l_in_tibia_l_pz: [57×1 double]
               subtalar_l_on_talus_l_in_talus_l_fx: [57×1 double]
               subtalar_l_on_talus_l_in_talus_l_fy: [57×1 double]
               subtalar_l_on_talus_l_in_talus_l_fz: [57×1 double]
               subtalar_l_on_talus_l_in_talus_l_mx: [57×1 double]
               subtalar_l_on_talus_l_in_talus_l_my: [57×1 double]
               subtalar_l_on_talus_l_in_talus_l_mz: [57×1 double]
               subtalar_l_on_talus_l_in_talus_l_px: [57×1 double]
               subtalar_l_on_talus_l_in_talus_l_py: [57×1 double]
               subtalar_l_on_talus_l_in_talus_l_pz: [57×1 double]
                    mtp_l_on_calcn_l_in_calcn_l_fx: [57×1 double]
                    mtp_l_on_calcn_l_in_calcn_l_fy: [57×1 double]
                    mtp_l_on_calcn_l_in_calcn_l_fz: [57×1 double]
                    mtp_l_on_calcn_l_in_calcn_l_mx: [57×1 double]
                    mtp_l_on_calcn_l_in_calcn_l_my: [57×1 double]
                    mtp_l_on_calcn_l_in_calcn_l_mz: [57×1 double]
                    mtp_l_on_calcn_l_in_calcn_l_px: [57×1 double]
                    mtp_l_on_calcn_l_in_calcn_l_py: [57×1 double]
                    mtp_l_on_calcn_l_in_calcn_l_pz: [57×1 double]
                       back_on_pelvis_in_pelvis_fx: [57×1 double]
                       back_on_pelvis_in_pelvis_fy: [57×1 double]
                       back_on_pelvis_in_pelvis_fz: [57×1 double]
                       back_on_pelvis_in_pelvis_mx: [57×1 double]
                       back_on_pelvis_in_pelvis_my: [57×1 double]
                       back_on_pelvis_in_pelvis_mz: [57×1 double]
                       back_on_pelvis_in_pelvis_px: [57×1 double]
                       back_on_pelvis_in_pelvis_py: [57×1 double]
                       back_on_pelvis_in_pelvis_pz: [57×1 double]
                                             hip_l: [57×1 double]
                                            knee_l: [57×1 double]
                                           ankle_l: [57×1 double]
         ground_pelvis_on_ground_in_ground_fx_norm: [101×1 double]
         ground_pelvis_on_ground_in_ground_fy_norm: [101×1 double]
         ground_pelvis_on_ground_in_ground_fz_norm: [101×1 double]
         ground_pelvis_on_ground_in_ground_mx_norm: [101×1 double]
         ground_pelvis_on_ground_in_ground_my_norm: [101×1 double]
         ground_pelvis_on_ground_in_ground_mz_norm: [101×1 double]
         ground_pelvis_on_ground_in_ground_px_norm: [101×1 double]
         ground_pelvis_on_ground_in_ground_py_norm: [101×1 double]
         ground_pelvis_on_ground_in_ground_pz_norm: [101×1 double]
                 hip_r_on_pelvis_in_pelvis_fx_norm: [101×1 double]
                 hip_r_on_pelvis_in_pelvis_fy_norm: [101×1 double]
                 hip_r_on_pelvis_in_pelvis_fz_norm: [101×1 double]
                 hip_r_on_pelvis_in_pelvis_mx_norm: [101×1 double]
                 hip_r_on_pelvis_in_pelvis_my_norm: [101×1 double]
                 hip_r_on_pelvis_in_pelvis_mz_norm: [101×1 double]
                 hip_r_on_pelvis_in_pelvis_px_norm: [101×1 double]
                 hip_r_on_pelvis_in_pelvis_py_norm: [101×1 double]
                 hip_r_on_pelvis_in_pelvis_pz_norm: [101×1 double]
       walker_knee_r_on_femur_r_in_femur_r_fx_norm: [101×1 double]
       walker_knee_r_on_femur_r_in_femur_r_fy_norm: [101×1 double]
       walker_knee_r_on_femur_r_in_femur_r_fz_norm: [101×1 double]
       walker_knee_r_on_femur_r_in_femur_r_mx_norm: [101×1 double]
       walker_knee_r_on_femur_r_in_femur_r_my_norm: [101×1 double]
       walker_knee_r_on_femur_r_in_femur_r_mz_norm: [101×1 double]
       walker_knee_r_on_femur_r_in_femur_r_px_norm: [101×1 double]
       walker_knee_r_on_femur_r_in_femur_r_py_norm: [101×1 double]
       walker_knee_r_on_femur_r_in_femur_r_pz_norm: [101×1 double]
    patellofemoral_r_on_femur_r_in_femur_r_fx_norm: [101×1 double]
    patellofemoral_r_on_femur_r_in_femur_r_fy_norm: [101×1 double]
    patellofemoral_r_on_femur_r_in_femur_r_fz_norm: [101×1 double]
    patellofemoral_r_on_femur_r_in_femur_r_mx_norm: [101×1 double]
    patellofemoral_r_on_femur_r_in_femur_r_my_norm: [101×1 double]
    patellofemoral_r_on_femur_r_in_femur_r_mz_norm: [101×1 double]
    patellofemoral_r_on_femur_r_in_femur_r_px_norm: [101×1 double]
    patellofemoral_r_on_femur_r_in_femur_r_py_norm: [101×1 double]
    patellofemoral_r_on_femur_r_in_femur_r_pz_norm: [101×1 double]
             ankle_r_on_tibia_r_in_tibia_r_fx_norm: [101×1 double]
             ankle_r_on_tibia_r_in_tibia_r_fy_norm: [101×1 double]
             ankle_r_on_tibia_r_in_tibia_r_fz_norm: [101×1 double]
             ankle_r_on_tibia_r_in_tibia_r_mx_norm: [101×1 double]
             ankle_r_on_tibia_r_in_tibia_r_my_norm: [101×1 double]
             ankle_r_on_tibia_r_in_tibia_r_mz_norm: [101×1 double]
             ankle_r_on_tibia_r_in_tibia_r_px_norm: [101×1 double]
             ankle_r_on_tibia_r_in_tibia_r_py_norm: [101×1 double]
             ankle_r_on_tibia_r_in_tibia_r_pz_norm: [101×1 double]
          subtalar_r_on_talus_r_in_talus_r_fx_norm: [101×1 double]
          subtalar_r_on_talus_r_in_talus_r_fy_norm: [101×1 double]
          subtalar_r_on_talus_r_in_talus_r_fz_norm: [101×1 double]
          subtalar_r_on_talus_r_in_talus_r_mx_norm: [101×1 double]
          subtalar_r_on_talus_r_in_talus_r_my_norm: [101×1 double]
          subtalar_r_on_talus_r_in_talus_r_mz_norm: [101×1 double]
          subtalar_r_on_talus_r_in_talus_r_px_norm: [101×1 double]
          subtalar_r_on_talus_r_in_talus_r_py_norm: [101×1 double]
          subtalar_r_on_talus_r_in_talus_r_pz_norm: [101×1 double]
               mtp_r_on_calcn_r_in_calcn_r_fx_norm: [101×1 double]
               mtp_r_on_calcn_r_in_calcn_r_fy_norm: [101×1 double]
               mtp_r_on_calcn_r_in_calcn_r_fz_norm: [101×1 double]
               mtp_r_on_calcn_r_in_calcn_r_mx_norm: [101×1 double]
               mtp_r_on_calcn_r_in_calcn_r_my_norm: [101×1 double]
               mtp_r_on_calcn_r_in_calcn_r_mz_norm: [101×1 double]
               mtp_r_on_calcn_r_in_calcn_r_px_norm: [101×1 double]
               mtp_r_on_calcn_r_in_calcn_r_py_norm: [101×1 double]
               mtp_r_on_calcn_r_in_calcn_r_pz_norm: [101×1 double]
                 hip_l_on_pelvis_in_pelvis_fx_norm: [101×1 double]
                 hip_l_on_pelvis_in_pelvis_fy_norm: [101×1 double]
                 hip_l_on_pelvis_in_pelvis_fz_norm: [101×1 double]
                 hip_l_on_pelvis_in_pelvis_mx_norm: [101×1 double]
                 hip_l_on_pelvis_in_pelvis_my_norm: [101×1 double]
                 hip_l_on_pelvis_in_pelvis_mz_norm: [101×1 double]
                 hip_l_on_pelvis_in_pelvis_px_norm: [101×1 double]
                 hip_l_on_pelvis_in_pelvis_py_norm: [101×1 double]
                 hip_l_on_pelvis_in_pelvis_pz_norm: [101×1 double]
       walker_knee_l_on_femur_l_in_femur_l_fx_norm: [101×1 double]
       walker_knee_l_on_femur_l_in_femur_l_fy_norm: [101×1 double]
       walker_knee_l_on_femur_l_in_femur_l_fz_norm: [101×1 double]
       walker_knee_l_on_femur_l_in_femur_l_mx_norm: [101×1 double]
       walker_knee_l_on_femur_l_in_femur_l_my_norm: [101×1 double]
       walker_knee_l_on_femur_l_in_femur_l_mz_norm: [101×1 double]
       walker_knee_l_on_femur_l_in_femur_l_px_norm: [101×1 double]
       walker_knee_l_on_femur_l_in_femur_l_py_norm: [101×1 double]
       walker_knee_l_on_femur_l_in_femur_l_pz_norm: [101×1 double]
    patellofemoral_l_on_femur_l_in_femur_l_fx_norm: [101×1 double]
    patellofemoral_l_on_femur_l_in_femur_l_fy_norm: [101×1 double]
    patellofemoral_l_on_femur_l_in_femur_l_fz_norm: [101×1 double]
    patellofemoral_l_on_femur_l_in_femur_l_mx_norm: [101×1 double]
    patellofemoral_l_on_femur_l_in_femur_l_my_norm: [101×1 double]
    patellofemoral_l_on_femur_l_in_femur_l_mz_norm: [101×1 double]
    patellofemoral_l_on_femur_l_in_femur_l_px_norm: [101×1 double]
    patellofemoral_l_on_femur_l_in_femur_l_py_norm: [101×1 double]
    patellofemoral_l_on_femur_l_in_femur_l_pz_norm: [101×1 double]
             ankle_l_on_tibia_l_in_tibia_l_fx_norm: [101×1 double]
             ankle_l_on_tibia_l_in_tibia_l_fy_norm: [101×1 double]
             ankle_l_on_tibia_l_in_tibia_l_fz_norm: [101×1 double]
             ankle_l_on_tibia_l_in_tibia_l_mx_norm: [101×1 double]
             ankle_l_on_tibia_l_in_tibia_l_my_norm: [101×1 double]
             ankle_l_on_tibia_l_in_tibia_l_mz_norm: [101×1 double]
             ankle_l_on_tibia_l_in_tibia_l_px_norm: [101×1 double]
             ankle_l_on_tibia_l_in_tibia_l_py_norm: [101×1 double]
             ankle_l_on_tibia_l_in_tibia_l_pz_norm: [101×1 double]
          subtalar_l_on_talus_l_in_talus_l_fx_norm: [101×1 double]
          subtalar_l_on_talus_l_in_talus_l_fy_norm: [101×1 double]
          subtalar_l_on_talus_l_in_talus_l_fz_norm: [101×1 double]
          subtalar_l_on_talus_l_in_talus_l_mx_norm: [101×1 double]
          subtalar_l_on_talus_l_in_talus_l_my_norm: [101×1 double]
          subtalar_l_on_talus_l_in_talus_l_mz_norm: [101×1 double]
          subtalar_l_on_talus_l_in_talus_l_px_norm: [101×1 double]
          subtalar_l_on_talus_l_in_talus_l_py_norm: [101×1 double]
          subtalar_l_on_talus_l_in_talus_l_pz_norm: [101×1 double]
               mtp_l_on_calcn_l_in_calcn_l_fx_norm: [101×1 double]
               mtp_l_on_calcn_l_in_calcn_l_fy_norm: [101×1 double]
               mtp_l_on_calcn_l_in_calcn_l_fz_norm: [101×1 double]
               mtp_l_on_calcn_l_in_calcn_l_mx_norm: [101×1 double]
               mtp_l_on_calcn_l_in_calcn_l_my_norm: [101×1 double]
               mtp_l_on_calcn_l_in_calcn_l_mz_norm: [101×1 double]
               mtp_l_on_calcn_l_in_calcn_l_px_norm: [101×1 double]
               mtp_l_on_calcn_l_in_calcn_l_py_norm: [101×1 double]
               mtp_l_on_calcn_l_in_calcn_l_pz_norm: [101×1 double]
                  back_on_pelvis_in_pelvis_fx_norm: [101×1 double]
                  back_on_pelvis_in_pelvis_fy_norm: [101×1 double]
                  back_on_pelvis_in_pelvis_fz_norm: [101×1 double]
                  back_on_pelvis_in_pelvis_mx_norm: [101×1 double]
                  back_on_pelvis_in_pelvis_my_norm: [101×1 double]
                  back_on_pelvis_in_pelvis_mz_norm: [101×1 double]
                  back_on_pelvis_in_pelvis_px_norm: [101×1 double]
                  back_on_pelvis_in_pelvis_py_norm: [101×1 double]
                  back_on_pelvis_in_pelvis_pz_norm: [101×1 double]
                                        hip_l_norm: [101×1 double]
                                       knee_l_norm: [101×1 double]
                                      ankle_l_norm: [101×1 double]
contactForces_data.time
ans =
    0.9600
    0.9800
    1.0000
    1.0200
    1.0400
    1.0600
    1.0800
    1.1000
    1.1200
    1.1400
    1.1600
    1.1800
    1.2000
    1.2200
    1.2400
    1.2600
    1.2800
    1.3000
    1.3200
    1.3400
    1.3600
    1.3800
    1.4000
    1.4200
    1.4400
    1.4600
    1.4800
    1.5000
    1.5200
    1.5400
    1.5600
    1.5800
    1.6000
    1.6200
    1.6400
    1.6600
    1.6800
    1.7000
    1.7200
    1.7400
    1.7600
    1.7800
    1.8000
    1.8200
    1.8400
    1.8600
    1.8800
    1.9000
    1.9200
    1.9400
    1.9600
    1.9800
    2.0000
    2.0200
    2.0400
    2.0600
    2.0800
iJoint
iJoint =
     8
trap.contactForces.(['Pen_' curr_penalty]).
 trap.contactForces.(['Pen_' curr_penalty]).
                                            ↑
{Error: Invalid expression. Check for missing or extra characters.
} 
trap.contactForces.(['Pen_' curr_penalty])
{Unrecognized field name "Pen_0".} 
   muscleForces.(['Pen_' curr_penalty]) = struct;
        for iMuscle = 1:length(muscles_of_interest)
            iMuscle = muscles_of_interest{iMuscle};
            muscleForces.(['Pen_' curr_penalty]).(iMuscle) = [];
            trap.muscleForces.(['Pen_' curr_penalty]).(iMuscle) = [];
        end

        for iJoint = 1:length(joints)
            contactForces.(['Pen_' curr_penalty]).(joints{iJoint}) = [];
            trap.contactForces.(['Pen_' curr_penalty]).(joints{iJoint}) = [];
        end
trap
trap = 
  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

     muscleForces: [1×1 struct]
    contactForces: [1×1 struct]
trap.contactForces.(['Pen_' curr_penalty])
ans = 
  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

     hip_resultant: []
             hip_x: []
             hip_y: []
             hip_z: []
    knee_resultant: []
            knee_x: []
            knee_y: []
            knee_z: []
     trap.contactForces.(['Pen_' curr_penalty]).hip_resultant = trapz(contactForces_data.(['hip_' l]),contactForces_data.time);
            trap.contactForces.(['Pen_' curr_penalty]).knee_resultant = trapz(contactForces_data.(['knee_' l]),contactForces_data.time);
if system_dependent('IsDebugMode')==1, dbquit all; end
Convert2Mat
loading data for left leg...
results_SO_left_1_Pen0_AVA_p30
results_SO_left_2_Pen0_AVA_p30
results_SO_left_3_Pen0_AVA_p30
results_SO_left_4_Pen0_AVA_p30
results_SO_left_5_Pen0_AVA_p30
results_SO_left_6_Pen0_AVA_p30
results_SO_left_1_Pen1000_AVA_p30
results_SO_left_1_Pen100_AVA_p30
results_SO_left_1_Pen10_AVA_p30
results_SO_left_2_Pen1000_AVA_p30
results_SO_left_2_Pen100_AVA_p30
results_SO_left_2_Pen10_AVA_p30
results_SO_left_3_Pen1000_AVA_p30
results_SO_left_3_Pen100_AVA_p30
results_SO_left_3_Pen10_AVA_p30
results_SO_left_4_Pen1000_AVA_p30
results_SO_left_4_Pen100_AVA_p30
results_SO_left_4_Pen10_AVA_p30
results_SO_left_5_Pen1000_AVA_p30
results_SO_left_5_Pen100_AVA_p30
results_SO_left_5_Pen10_AVA_p30
results_SO_left_6_Pen1000_AVA_p30
results_SO_left_6_Pen100_AVA_p30
results_SO_left_6_Pen10_AVA_p30
results_SO_left_1_Pen1000_AVA_p30
results_SO_left_1_Pen100_AVA_p30
results_SO_left_2_Pen1000_AVA_p30
results_SO_left_2_Pen100_AVA_p30
results_SO_left_3_Pen1000_AVA_p30
results_SO_left_3_Pen100_AVA_p30
results_SO_left_4_Pen1000_AVA_p30
results_SO_left_4_Pen100_AVA_p30
results_SO_left_5_Pen1000_AVA_p30
results_SO_left_5_Pen100_AVA_p30
results_SO_left_6_Pen1000_AVA_p30
results_SO_left_6_Pen100_AVA_p30
results_SO_left_1_Pen500_AVA_p30
results_SO_left_2_Pen500_AVA_p30
results_SO_left_3_Pen500_AVA_p30
results_SO_left_4_Pen500_AVA_p30
results_SO_left_5_Pen500_AVA_p30
results_SO_left_6_Pen500_AVA_p30
results_SO_left_1_Pen1000_AVA_p30
results_SO_left_2_Pen1000_AVA_p30
results_SO_left_3_Pen1000_AVA_p30
results_SO_left_4_Pen1000_AVA_p30
results_SO_left_5_Pen1000_AVA_p30
results_SO_left_6_Pen1000_AVA_p30
 save(['results_' l '.mat'],'contactForces','muscleForces','trap','ik','id','muscles_of_interest','joints')
plotReuslts_CMBBE_withTestData
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',108,1)">108 </a>    saveas(gcf,[savedir fp 'MuscleForces_results_' l '.tiff'])
if system_dependent('IsDebugMode')==1, dbcont; end
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',155,1)">155 </a>    trap
 mean(trap.contactForces([penalties{iPen}]))
{Index exceeds the number of array elements. Index must not exceed 1.} 
[penalties{iPen}]
ans =
    'Pen_1000'
trap.contactForces([penalties{iPen}])
{Index exceeds the number of array elements. Index must not exceed 1.} 
trap.contactForces.([penalties{iPen}])
ans = 
  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

     hip_resultant: 1.2686e+03
             hip_x: []
             hip_y: []
             hip_z: []
    knee_resultant: 1.3551e+03
            knee_x: []
            knee_y: []
            knee_z: []
JointName
JointName =
    'knee_resultant'
         trap_JCF(1, iPen) = mean(trap.contactForces.([penalties{iPen}]).(JointName))
trap_JCF =
   1.0e+05 *
    2.1168    1.6425    1.5732    1.5622    0.0136
 last_plot_not_muscle = 0;
    penalties = fields(muscleForces); 
    Plot_colors = colorBG(0,length(penalties));

    muscles_of_to_plot = {'recfem' 'ilio_psoas' 'tfl' 'sart' 'glmax_all' 'glmed_all' 'glmin_all' 'adductors' 'vasti' 'hamstrings' 'gastroc' 'soleus' };
    muscle_titles = {'recfem' 'ilio_psoas' 'tfl' 'sart' 'glmax' 'glmed' 'glmin' 'adductors' 'vasti' 'hamstrings' 'gastroc' 'soleus' };
    legend_Iterations = {'normal recfem function' 'inhibition 10' 'inhibition 100' 'inhibition 500' 'inhibition 1000'};

    [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(length(muscles_of_to_plot),0,[0.01 0.02],[],[0.03 0.08]);
    trap_MF = [];

    for iMuscle = 1:length(muscles_of_to_plot)                                                                      % loop through muscles
        for iPen = 1:length(penalties)                                                                              % loop through penalties
            axes(ha(last_plot_not_muscle+iMuscle))

            MuscleName = muscles_of_to_plot{iMuscle};
            force_data = muscleForces.([penalties{iPen}]).(MuscleName);
            
            if contains(MuscleName,'recfem')
                trap_MF(1, iPen) = mean(trap.muscleForces.([penalties{iPen}]).(MuscleName));
            end

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));                              % plot mean and SD

            if any(iMuscle == FirstCol)
                ylabel('Muscle force (N)')                                                                          % ylabels
            else
                yticks('')                                                                                          % yticks
            end
            if any(iMuscle == LastRow)
                xlabel('Gait cycle(%)')                                                                             % xlabels
            end
        end
        ylim([0 3500])                                                                                              % ylim
        t = title(muscle_titles{iMuscle},'Interpreter','none');                                                     % title
        t.Position(2) = t.Position(2) *0.92;
    end
{Unrecognized field name "recfem".} 
leg
leg =
    'left'
   muscles_of_to_plot = {'recfem' 'ilio_psoas' 'tfl' 'sart' 'glmax_all' 'glmed_all' 'glmin_all' 'adductors' 'vasti' 'hamstrings' 'gastroc' 'soleus' };
    muscle_titles = {'recfem' 'ilio_psoas' 'tfl' 'sart' 'glmax' 'glmed' 'glmin' 'adductors' 'vasti' 'hamstrings' 'gastroc' 'soleus' };
    legend_Iterations = {'normal recfem function' 'inhibition 10' 'inhibition 100' 'inhibition 500' 'inhibition 1000'};

    [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(length(muscles_of_to_plot),0,[0.01 0.02],[],[0.03 0.08]);
    trap_MF = [];

    for iMuscle = 1:length(muscles_of_to_plot)                                                                      % loop through muscles
        for iPen = 1:length(penalties)                                                                              % loop through penalties
            axes(ha(last_plot_not_muscle+iMuscle))

            MuscleName = muscles_of_to_plot{iMuscle};
            force_data = muscleForces.([penalties{iPen}]).(MuscleName);
            
            if contains(MuscleName,'recfem')
                trap_MF(1, iPen) = mean(trap.muscleForces.([penalties{iPen}]).([MuscleName '_' l]));
            end

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));                              % plot mean and SD

            if any(iMuscle == FirstCol)
                ylabel('Muscle force (N)')                                                                          % ylabels
            else
                yticks('')                                                                                          % yticks
            end
            if any(iMuscle == LastRow)
                xlabel('Gait cycle(%)')                                                                             % xlabels
            end
        end
        ylim([0 3500])                                                                                              % ylim
        t = title(muscle_titles{iMuscle},'Interpreter','none');                                                     % title
        t.Position(2) = t.Position(2) *0.92;
    end
    ax = gca;
    lg = legend(ax.Children(2:2:end),legend_Iterations);
    lg.Interpreter = "none";
    lg.Position = [ 0.9070    0.4620    0.0867    0.0952];
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Muscle forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect
 
    saveas(gcf,[savedir fp 'MuscleForces_results_' l '.tiff'])
    [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,2,[],[],[0.1 0.2],[0.2 0.08 0.6 0.81]);

    Plot_colors = colorBG(0,length(penalties));
    count = 0;
    trap_JCF = [];
    for iJoint = [1,5]%1:length(joints)
        count = count +1;
        for iPen = 1:length(penalties)
            axes(ha(count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);
            
            trap_JCF(1, iPen) = mean(trap.contactForces.([penalties{iPen}]).(JointName));

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                          % ylim
        end
        count = count +1;
        axes(ha(count))
        scatter(trap_MF, trap_JCF)
    end

    % appearance
    ax = ha(1);
    lg = legend(ax.Children(2:2:end),legend_Iterations);
    lg.Position = [0.75 0.75 0.21 0.05];
    lg.Interpreter = "none";
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Joint contact forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect

    saveas(gcf,[savedir fp 'JCF_results_' l '.tiff'])
if system_dependent('IsDebugMode')==1, dbquit; end
if system_dependent('IsDebugMode')==1, dbquit; end
Convert2Mat
loading data for left leg...
results_SO_left_1_Pen0_AVA_p30
 trap.contactForces.(['Pen_' curr_penalty]).(joints{1})
ans =
 -426.2263
contactForces_data.(['hip_' l])
ans =
   1.0e+03 *
    1.7760
    2.6234
    1.9708
    2.2716
    2.9701
    3.6187
    3.9502
    4.0581
    3.9969
    3.8444
    3.6244
    3.4219
    3.1966
    2.9044
    2.7604
    2.8436
    2.9938
    3.1204
    3.1583
    3.2458
    3.4437
    3.5853
    3.7606
    4.0200
    4.2506
    4.3896
    4.4238
    4.4383
    4.3197
    3.9205
    3.2801
    2.2684
    1.3224
    1.1753
    1.2319
    0.9786
    1.0690
    0.8938
    0.7486
    0.6666
    0.5621
    0.4463
    0.4564
    0.5192
    0.5709
    0.5709
    0.5048
    0.7423
    0.8302
    0.7072
    0.8698
    1.2579
    1.5089
    1.5125
    1.3627
    1.1981
    1.8667
contactForces_data.(['hip_' l])
ans =
   1.0e+03 *
    1.7760
    2.6234
    1.9708
    2.2716
    2.9701
    3.6187
    3.9502
    4.0581
    3.9969
    3.8444
    3.6244
    3.4219
    3.1966
    2.9044
    2.7604
    2.8436
    2.9938
    3.1204
    3.1583
    3.2458
    3.4437
    3.5853
    3.7606
    4.0200
    4.2506
    4.3896
    4.4238
    4.4383
    4.3197
    3.9205
    3.2801
    2.2684
    1.3224
    1.1753
    1.2319
    0.9786
    1.0690
    0.8938
    0.7486
    0.6666
    0.5621
    0.4463
    0.4564
    0.5192
    0.5709
    0.5709
    0.5048
    0.7423
    0.8302
    0.7072
    0.8698
    1.2579
    1.5089
    1.5125
    1.3627
    1.1981
    1.8667
figure; plot(contactForces_data.time,contactForces_data.(['hip_' l]))
 trapz(contactForces_data.(['hip_' l]),contactForces_data.time)
ans =
 -426.2263
trapz(contactForces_data.time, contactForces_data.(['hip_' l]))
ans =
   2.6040e+03
if system_dependent('IsDebugMode')==1, dbquit all; end
Convert2Mat
loading data for left leg...
results_SO_left_1_Pen0_AVA_p30
results_SO_left_2_Pen0_AVA_p30
results_SO_left_3_Pen0_AVA_p30
results_SO_left_4_Pen0_AVA_p30
results_SO_left_5_Pen0_AVA_p30
results_SO_left_6_Pen0_AVA_p30
results_SO_left_1_Pen1000_AVA_p30
results_SO_left_1_Pen100_AVA_p30
results_SO_left_1_Pen10_AVA_p30
results_SO_left_2_Pen1000_AVA_p30
results_SO_left_2_Pen100_AVA_p30
results_SO_left_2_Pen10_AVA_p30
results_SO_left_3_Pen1000_AVA_p30
results_SO_left_3_Pen100_AVA_p30
results_SO_left_3_Pen10_AVA_p30
results_SO_left_4_Pen1000_AVA_p30
results_SO_left_4_Pen100_AVA_p30
results_SO_left_4_Pen10_AVA_p30
results_SO_left_5_Pen1000_AVA_p30
results_SO_left_5_Pen100_AVA_p30
results_SO_left_5_Pen10_AVA_p30
results_SO_left_6_Pen1000_AVA_p30
results_SO_left_6_Pen100_AVA_p30
results_SO_left_6_Pen10_AVA_p30
results_SO_left_1_Pen1000_AVA_p30
results_SO_left_1_Pen100_AVA_p30
results_SO_left_2_Pen1000_AVA_p30
results_SO_left_2_Pen100_AVA_p30
results_SO_left_3_Pen1000_AVA_p30
results_SO_left_3_Pen100_AVA_p30
results_SO_left_4_Pen1000_AVA_p30
results_SO_left_4_Pen100_AVA_p30
results_SO_left_5_Pen1000_AVA_p30
results_SO_left_5_Pen100_AVA_p30
results_SO_left_6_Pen1000_AVA_p30
results_SO_left_6_Pen100_AVA_p30
results_SO_left_1_Pen500_AVA_p30
results_SO_left_2_Pen500_AVA_p30
results_SO_left_3_Pen500_AVA_p30
results_SO_left_4_Pen500_AVA_p30
results_SO_left_5_Pen500_AVA_p30
results_SO_left_6_Pen500_AVA_p30
results_SO_left_1_Pen1000_AVA_p30
results_SO_left_2_Pen1000_AVA_p30
results_SO_left_3_Pen1000_AVA_p30
results_SO_left_4_Pen1000_AVA_p30
results_SO_left_5_Pen1000_AVA_p30
results_SO_left_6_Pen1000_AVA_p30
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\Convert2Mat.m',154,1)">154 </a>end
plotReuslts_CMBBE_withTestData
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',82,1)">82  </a>                trap_MF(1, iPen) = mean(trap.muscleForces.([penalties{iPen}]).([MuscleName '_' l]));
trap.muscleForces.([penalties{iPen}]).([MuscleName '_' l])
ans =
  301.8249  331.9584  349.6842  326.4763  334.4902  354.4767
    [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(length(muscles_of_to_plot),0,[0.01 0.02],[],[0.03 0.08]);
    trap_MF = [];

    for iMuscle = 1:length(muscles_of_to_plot)                                                                      % loop through muscles
        for iPen = 1:length(penalties)                                                                              % loop through penalties
            axes(ha(last_plot_not_muscle+iMuscle))

            MuscleName = muscles_of_to_plot{iMuscle};
            force_data = muscleForces.([penalties{iPen}]).(MuscleName);
            
            if contains(MuscleName,'recfem')
                trap_MF(end+1, iPen) = trap.muscleForces.([penalties{iPen}]).([MuscleName '_' l]);
            end

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));                              % plot mean and SD

            if any(iMuscle == FirstCol)
                ylabel('Muscle force (N)')                                                                          % ylabels
            else
                yticks('')                                                                                          % yticks
            end
            if any(iMuscle == LastRow)
                xlabel('Gait cycle(%)')                                                                             % xlabels
            end
        end
        ylim([0 3500])                                                                                              % ylim
        t = title(muscle_titles{iMuscle},'Interpreter','none');                                                     % title
        t.Position(2) = t.Position(2) *0.92;
    end
{Unable to perform assignment because the indices on the left side are not compatible with the size of the right side.} 
trap.muscleForces.([penalties{iPen}]).([MuscleName '_' l])
ans =
  301.8249  331.9584  349.6842  326.4763  334.4902  354.4767
iPen
iPen =
     1
 [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(length(muscles_of_to_plot),0,[0.01 0.02],[],[0.03 0.08]);
    trap_MF = [];

    for iMuscle = 1:length(muscles_of_to_plot)                                                                      % loop through muscles
        for iPen = 1:length(penalties)                                                                              % loop through penalties
            axes(ha(last_plot_not_muscle+iMuscle))

            MuscleName = muscles_of_to_plot{iMuscle};
            force_data = muscleForces.([penalties{iPen}]).(MuscleName);
            
            if contains(MuscleName,'recfem')
                trap_MF(end+1, :) = trap.muscleForces.([penalties{iPen}]).([MuscleName '_' l]);
            end

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));                              % plot mean and SD

            if any(iMuscle == FirstCol)
                ylabel('Muscle force (N)')                                                                          % ylabels
            else
                yticks('')                                                                                          % yticks
            end
            if any(iMuscle == LastRow)
                xlabel('Gait cycle(%)')                                                                             % xlabels
            end
        end
        ylim([0 3500])                                                                                              % ylim
        t = title(muscle_titles{iMuscle},'Interpreter','none');                                                     % title
        t.Position(2) = t.Position(2) *0.92;
    end
{Unable to perform assignment because the size of the left side is 1-by-6 and the size of the right side is 1-by-18.} 
trap.muscleForces.([penalties{iPen}]).([MuscleName '_' l])
ans =
   26.9047   33.4824  133.1590   27.7476   35.7226  140.3561   28.4864   41.4184  173.0535   27.3640   37.2736  146.0251   28.5506   39.8912  159.9645   28.6579   41.2707  168.5988
clc
[penalties{iPen}]
ans =
    'Pen_10'
MuscleName
MuscleName =
    'recfem'
trap.muscleForces.([penalties{iPen}]).([MuscleName '_' l])
ans =
   26.9047   33.4824  133.1590   27.7476   35.7226  140.3561   28.4864   41.4184  173.0535   27.3640   37.2736  146.0251   28.5506   39.8912  159.9645   28.6579   41.2707  168.5988
if system_dependent('IsDebugMode')==1, dbquit; end
iPen
iPen =
     5
iPen= 2
iPen =
     2
 curr_penalty = penalties{iPen};


        resultsDirs = dir([tesdataDir fp 'results_SO_' leg '_*_Pen' curr_penalty '*']);
        cd(resultsDirs(1).folder)

        muscles_of_interest = strcat({'iliacus_' 'psoas_' 'recfem_' 'tfl_' 'glmax1_' 'glmed1_' 'glmin1_'}, l);

        muscles_of_interest = strcat({'addbrev_' 'addlong_' 'addmagDist_' 'addmagIsch_' 'addmagMid_' 'addmagProx_' 'bflh_' 'bfsh_' ...
            'edl_' 'ehl_' 'fdl_' 'fhl_' 'gaslat_' 'gasmed_' 'glmax1_' 'glmax2_' 'glmax3_' 'glmed1_' 'glmed2_' 'glmed3_'...
            'glmin1_' 'glmin2_' 'glmin3_' 'grac_' 'iliacus_' 'perbrev_' 'perlong_' 'piri_' 'psoas_' 'recfem_' 'sart_' ...
            'semimem_' 'semiten_' 'soleus_' 'tfl_' 'tibant_' 'tibpost_' 'vasint_' 'vaslat_' 'vasmed_'},l);


        force_file = [resultsDirs(1).name fp 'results_forces.sto'];
        force_data = load_sto_file(force_file);
        fs = 1/(force_data.time(2)-force_data.time(1));

        muscleForces.(['Pen_' curr_penalty]) = struct;
        for iMuscle = 1:length(muscles_of_interest)
            iMuscle = muscles_of_interest{iMuscle};
            muscleForces.(['Pen_' curr_penalty]).(iMuscle) = [];
            trap.muscleForces.(['Pen_' curr_penalty]).(iMuscle) = [];
        end

        for iJoint = 1:length(joints)
            contactForces.(['Pen_' curr_penalty]).(joints{iJoint}) = [];
            trap.contactForces.(['Pen_' curr_penalty]).(joints{iJoint}) = [];
        end
trap.contactForces.(['Pen_' curr_penalty])
ans = 
  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

     hip_resultant: []
             hip_x: []
             hip_y: []
             hip_z: []
    knee_resultant: []
            knee_x: []
            knee_y: []
            knee_z: []
  trap.muscleForces.(['Pen_' curr_penalty])
ans = 
  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

       addbrev_l: []
       addlong_l: []
    addmagDist_l: []
    addmagIsch_l: []
     addmagMid_l: []
    addmagProx_l: []
          bflh_l: []
          bfsh_l: []
           edl_l: []
           ehl_l: []
           fdl_l: []
           fhl_l: []
        gaslat_l: []
        gasmed_l: []
        glmax1_l: []
        glmax2_l: []
        glmax3_l: []
        glmed1_l: []
        glmed2_l: []
        glmed3_l: []
        glmin1_l: []
        glmin2_l: []
        glmin3_l: []
          grac_l: []
       iliacus_l: []
       perbrev_l: []
       perlong_l: []
          piri_l: []
         psoas_l: []
        recfem_l: []
          sart_l: []
       semimem_l: []
       semiten_l: []
        soleus_l: []
           tfl_l: []
        tibant_l: []
       tibpost_l: []
        vasint_l: []
        vaslat_l: []
        vasmed_l: []
resultsDirs
resultsDirs = 
  18×1 <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> array with fields:
    name
    folder
    date
    bytes
    isdir
    datenum
iFolder = 1
iFolder =
     1
[tesdataDir fp 'results_SO_' leg '_*_Pen' curr_penalty '*']
ans =
    'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\TestData\\results_SO_left_*_Pen10*'
resultsDirs
resultsDirs = 
  18×1 <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> array with fields:
    name
    folder
    date
    bytes
    isdir
    datenum
curr_penalty
curr_penalty =
    '10'
      resultsDirs = dir([tesdataDir fp 'results_SO_' leg '_*_Pen' curr_penalty '_*'])
resultsDirs = 
  6×1 <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> array with fields:
    name
    folder
    date
    bytes
    isdir
    datenum
  l = lower(legs{iLeg});

    if contains(l,'l'); leg = 'left';
    else; leg = 'right';
    end

    count_loops = 0;
    disp(['loading data for ' leg ' leg...'])
loading data for left leg...
    for iPen = 1:length(penalties)

        curr_penalty = penalties{iPen};


        resultsDirs = dir([tesdataDir fp 'results_SO_' leg '_*_Pen' curr_penalty '_*']);
        cd(resultsDirs(1).folder)

        muscles_of_interest = strcat({'iliacus_' 'psoas_' 'recfem_' 'tfl_' 'glmax1_' 'glmed1_' 'glmin1_'}, l);

        muscles_of_interest = strcat({'addbrev_' 'addlong_' 'addmagDist_' 'addmagIsch_' 'addmagMid_' 'addmagProx_' 'bflh_' 'bfsh_' ...
            'edl_' 'ehl_' 'fdl_' 'fhl_' 'gaslat_' 'gasmed_' 'glmax1_' 'glmax2_' 'glmax3_' 'glmed1_' 'glmed2_' 'glmed3_'...
            'glmin1_' 'glmin2_' 'glmin3_' 'grac_' 'iliacus_' 'perbrev_' 'perlong_' 'piri_' 'psoas_' 'recfem_' 'sart_' ...
            'semimem_' 'semiten_' 'soleus_' 'tfl_' 'tibant_' 'tibpost_' 'vasint_' 'vaslat_' 'vasmed_'},l);


        force_file = [resultsDirs(1).name fp 'results_forces.sto'];
        force_data = load_sto_file(force_file);
        fs = 1/(force_data.time(2)-force_data.time(1));

        muscleForces.(['Pen_' curr_penalty]) = struct;
        for iMuscle = 1:length(muscles_of_interest)
            iMuscle = muscles_of_interest{iMuscle};
            muscleForces.(['Pen_' curr_penalty]).(iMuscle) = [];
            trap.muscleForces.(['Pen_' curr_penalty]).(iMuscle) = [];
        end

        for iJoint = 1:length(joints)
            contactForces.(['Pen_' curr_penalty]).(joints{iJoint}) = [];
            trap.contactForces.(['Pen_' curr_penalty]).(joints{iJoint}) = [];
        end

        % loop through each trial
        for iFolder = 1:length(resultsDirs)

            disp([resultsDirs(iFolder).name])
            count_loops = count_loops +1;
            
            % load muscle forces
            force_file = [resultsDirs(iFolder).name fp 'results_forces.sto'];
            force_data = load_sto_file(force_file);
            
            % load joint contact force
            contactForces_file = [resultsDirs(iFolder).name fp 'results_JointReaction_JointRxn_ReactionLoads.sto'];
            contactForces_data = load_sto_file(contactForces_file);

            look_for_substrings = {['hip_' l], ['knee_' l], ['ankle_' l]};
            [contactForces_data] = calc_resultant_JCF(contactForces_data,look_for_substrings,fs);

            try % in child
                contactForces.(['Pen_' curr_penalty]).(joints{1})(:,end+1) = contactForces_data.(['hip_' l '_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{2})(:,end+1) = contactForces_data.(['hip_' l '_on_femur_' l '_in_femur_' l '_fx_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{3})(:,end+1) = contactForces_data.(['hip_' l '_on_femur_' l '_in_femur_' l '_fy_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{4})(:,end+1) = contactForces_data.(['hip_' l '_on_femur_' l '_in_femur_' l '_fz_norm']);

                contactForces.(['Pen_' curr_penalty]).(joints{5})(:,end+1) = contactForces_data.(['knee_' l '_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{6})(:,end+1) = contactForces_data.(['walker_knee_' l '_on_tibia_' l '_in_tibia_' l '_fx_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{7})(:,end+1) = contactForces_data.(['walker_knee_' l '_on_tibia_' l '_in_tibia_' l '_fy_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{8})(:,end+1) = contactForces_data.(['walker_knee_' l '_on_tibia_' l '_in_tibia_' l '_fz_norm']);

            catch % in parent

                contactForces.(['Pen_' curr_penalty]).(joints{1})(:,end+1) = contactForces_data.(['hip_' l '_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{2})(:,end+1) = contactForces_data.(['hip_' l '_on_pelvis_in_pelvis_fx_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{3})(:,end+1) = contactForces_data.(['hip_' l '_on_pelvis_in_pelvis_fy_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{4})(:,end+1) = contactForces_data.(['hip_' l '_on_pelvis_in_pelvis_fz_norm']);

                contactForces.(['Pen_' curr_penalty]).(joints{5})(:,end+1) = contactForces_data.(['knee_' l '_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{6})(:,end+1) = contactForces_data.(['walker_knee_' l '_on_femur_' l '_in_femur_' l '_fx_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{7})(:,end+1) = contactForces_data.(['walker_knee_' l '_on_femur_' l '_in_femur_' l '_fy_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{8})(:,end+1) = contactForces_data.(['walker_knee_' l '_on_femur_' l '_in_femur_' l '_fz_norm']);
            end

            % area under the curve of resultant contact force
            trap.contactForces.(['Pen_' curr_penalty]).(joints{1})(end+1) = trapz(contactForces_data.time,contactForces_data.(['hip_' l]));
            trap.contactForces.(['Pen_' curr_penalty]).(joints{5})(end+1) = trapz(contactForces_data.time,contactForces_data.(['knee_' l]));

            % find time range in muscle force data to only use the ext
            % biomech for the same time range
            time_range = [min(force_data.time) max(force_data.time)];
            idx_time = [find(ik_data.time==time_range(1)): find(ik_data.time==time_range(2))]';
           

            % load IK and ID data (only use the iterations of the first
            % penalty, after that kinematics and kienctics just repeat)
            if count_loops <= length(resultsDirs)
                ik.hip_flexion(:,end+1) = TimeNorm(ik_data.(['hip_flexion_' l])(idx_time),fs);
                ik.knee_angle(:,end+1)  = TimeNorm(ik_data.(['knee_angle_' l])(idx_time),fs);
                ik.ankle_angle(:,end+1) = TimeNorm(ik_data.(['ankle_angle_' l])(idx_time),fs);

                id.hip_flexion(:,end+1) = TimeNorm(id_data.(['hip_flexion_' l '_moment'])(idx_time),fs);
                id.knee_angle(:,end+1)  = TimeNorm(id_data.(['knee_angle_' l '_moment'])(idx_time),fs);
                id.ankle_angle(:,end+1) = TimeNorm(id_data.(['ankle_angle_' l '_moment'])(idx_time),fs);
            end

            
            % add muscle forces and AUC to the final struct
            for iMuscle = 1:length(muscles_of_interest)
                iMuscle = muscles_of_interest{iMuscle};
                muscleForces.(['Pen_' curr_penalty]).(iMuscle)(:,end+1) = TimeNorm([force_data.(iMuscle)],fs);

                trap.muscleForces.(['Pen_' curr_penalty]).(iMuscle)(:,end+1) = trapz(force_data.time,force_data.(iMuscle));
            end
        end
    end
results_SO_left_1_Pen0_AVA_p30
results_SO_left_2_Pen0_AVA_p30
results_SO_left_3_Pen0_AVA_p30
results_SO_left_4_Pen0_AVA_p30
results_SO_left_5_Pen0_AVA_p30
results_SO_left_6_Pen0_AVA_p30
results_SO_left_1_Pen10_AVA_p30
results_SO_left_2_Pen10_AVA_p30
results_SO_left_3_Pen10_AVA_p30
results_SO_left_4_Pen10_AVA_p30
results_SO_left_5_Pen10_AVA_p30
results_SO_left_6_Pen10_AVA_p30
results_SO_left_1_Pen100_AVA_p30
results_SO_left_2_Pen100_AVA_p30
results_SO_left_3_Pen100_AVA_p30
results_SO_left_4_Pen100_AVA_p30
results_SO_left_5_Pen100_AVA_p30
results_SO_left_6_Pen100_AVA_p30
results_SO_left_1_Pen500_AVA_p30
results_SO_left_2_Pen500_AVA_p30
results_SO_left_3_Pen500_AVA_p30
results_SO_left_4_Pen500_AVA_p30
results_SO_left_5_Pen500_AVA_p30
results_SO_left_6_Pen500_AVA_p30
results_SO_left_1_Pen1000_AVA_p30
results_SO_left_2_Pen1000_AVA_p30
results_SO_left_3_Pen1000_AVA_p30
results_SO_left_4_Pen1000_AVA_p30
results_SO_left_5_Pen1000_AVA_p30
results_SO_left_6_Pen1000_AVA_p30
    [muscleForces] = sumMuscleForces(muscleForces,l);
    cd(savedir)
 save(['results_' l '.mat'],'contactForces','muscleForces','trap','ik','id','muscles_of_interest','joints')
plotReuslts_CMBBE_withTestData
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',82,1)">82  </a>                trap_MF(end+1, :) = trap.muscleForces.([penalties{iPen}]).([MuscleName '_' l]);
 trap.muscleForces.([penalties{iPen}]).([MuscleName '_' l])
ans =
  301.8249  331.9584  349.6842  326.4763  334.4902  354.4767
  [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(length(muscles_of_to_plot),0,[0.01 0.02],[],[0.03 0.08]);
    trap_MF = [];

    for iMuscle = 1:length(muscles_of_to_plot)                                                                      % loop through muscles
        for iPen = 1:length(penalties)                                                                              % loop through penalties
            axes(ha(last_plot_not_muscle+iMuscle))

            MuscleName = muscles_of_to_plot{iMuscle};
            force_data = muscleForces.([penalties{iPen}]).(MuscleName);
            
            if contains(MuscleName,'recfem')
                trap_MF(end+1, :) = trap.muscleForces.([penalties{iPen}]).([MuscleName '_' l]);
            end

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));                              % plot mean and SD

            if any(iMuscle == FirstCol)
                ylabel('Muscle force (N)')                                                                          % ylabels
            else
                yticks('')                                                                                          % yticks
            end
            if any(iMuscle == LastRow)
                xlabel('Gait cycle(%)')                                                                             % xlabels
            end
        end
        ylim([0 3500])                                                                                              % ylim
        t = title(muscle_titles{iMuscle},'Interpreter','none');                                                     % title
        t.Position(2) = t.Position(2) *0.92;
    end
    ax = gca;
    lg = legend(ax.Children(2:2:end),legend_Iterations);
    lg.Interpreter = "none";
    lg.Position = [ 0.9070    0.4620    0.0867    0.0952];
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Muscle forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect
 saveas(gcf,[savedir fp 'MuscleForces_results_' l '.tiff'])
trap_MF
trap_MF =
  301.8249  331.9584  349.6842  326.4763  334.4902  354.4767
  133.1590  140.3561  173.0535  146.0251  159.9645  168.5988
   33.4824   35.7226   41.4184   37.2736   39.8912   41.2707
   26.9047   27.7476   28.4864   27.3640   28.5506   28.6579
   26.9047   27.7476   28.4864   27.3640   28.5506   28.6579
  [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,2,[],[],[0.1 0.2],[0.2 0.08 0.6 0.81]);

    Plot_colors = colorBG(0,length(penalties));
    count = 0;
    trap_JCF = [];
 iJoint = [1
]
iJoint =
     1
count = count +1;
count
count =
     1
iPen = 1
iPen =
     1
   axes(ha(count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);
            

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);
            
            trap_JCF(count,:) = trap.contactForces.([penalties{iPen}]).(JointName)
trap_JCF =
   1.0e+03 *
    2.6040    2.5912    2.5886    2.4399    2.5544    2.6565
  Plot_colors = colorBG(0,length(penalties));
    count = 0;
    trap_JCF = [];
 count = count +1;
        for iPen = 1:length(penalties)
            axes(ha(count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);
            
            trap_JCF(count,:) = trap.contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                          % ylim
        end
        count = count +1;
        axes(ha(count))
trap_MF
trap_MF =
  301.8249  331.9584  349.6842  326.4763  334.4902  354.4767
  133.1590  140.3561  173.0535  146.0251  159.9645  168.5988
   33.4824   35.7226   41.4184   37.2736   39.8912   41.2707
   26.9047   27.7476   28.4864   27.3640   28.5506   28.6579
   26.9047   27.7476   28.4864   27.3640   28.5506   28.6579
trap_JCF
trap_JCF =
   1.0e+03 *
    2.6015    2.5714    2.6421    2.4601    2.5984    2.6928
 [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,2,[],[],[0.1 0.2],[0.2 0.08 0.6 0.81]);

    Plot_colors = colorBG(0,length(penalties));
    count = 0;
    trap_JCF = [];
 count = count +1;
        for iPen = 1:length(penalties)
            axes(ha(count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);
            
            trap_JCF(end+1,:) = trap.contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                          % ylim
        end
        count = count +1;
        axes(ha(count))
scatter(trap_MF, trap_JCF)
mean(trap_MF)
ans =
  104.4552  112.7064  124.2258  112.9006  118.2894  124.3324
mean(trap_MF,2)
ans =
  333.1518
  153.5262
   38.1765
   27.9519
   27.9519

        axes(ha(count))
        scatter(mean(trap_MF,2), mean(trap_JCF,2))
trap_JCF
trap_JCF =
   1.0e+03 *
    2.6040    2.5912    2.5886    2.4399    2.5544    2.6565
    2.5549    2.5162    2.5694    2.3903    2.5293    2.6172
    2.5812    2.5506    2.6189    2.4375    2.5753    2.6698
    2.5983    2.5680    2.6378    2.4561    2.5943    2.6885
    2.6015    2.5714    2.6421    2.4601    2.5984    2.6928
mean(trap_JCF,2)
ans =
   1.0e+03 *
    2.5725
    2.5295
    2.5722
    2.5905
    2.5944

        axes(ha(count))
        plot(mean(trap_MF,2), mean(trap_JCF,2),'.','MarkerSize',10)
errorbar(mean(trap_MF,2), std(trap_JCF,0,2))
figure; hold on
        plot(mean(trap_MF,2), mean(trap_JCF,2),'.','MarkerSize',20)
        errorbar(mean(trap_MF,2), std(trap_JCF,0,2))
mean(trap_MF,2)
ans =
  333.1518
  153.5262
   38.1765
   27.9519
   27.9519
  figure; hold on
        x = 1:10;
        y = sin(x);
        e = std(y)*ones(size(x));
        errorbar(x,y,e)
  figure; hold on
        plot(mean(trap_MF,2), mean(trap_JCF,2),'.','MarkerSize',20)
        errorbar(mean(trap_MF,2),mean(trap_JCF,2), std(trap_JCF,0,2))
 figure; hold on
        plot(mean(trap_MF,2), mean(trap_JCF,2),'.','MarkerSize',20)
        errorbar(mean(trap_MF,2),mean(trap_JCF,2), std(trap_JCF,0,2),'Color',k)
{Unrecognized function or variable 'k'.} 
figure; hold on
        plot(mean(trap_MF,2), mean(trap_JCF,2),'.','MarkerSize',20)
        errorbar(mean(trap_MF,2),mean(trap_JCF,2), std(trap_JCF,0,2),'Color',[0 0 0 ])
ylim([0 3000])
[ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,2,[],[],[0.1 0.2],[0.2 0.08 0.6 0.81]);

    Plot_colors = colorBG(0,length(penalties));
    count = 0;
    trap_JCF = [];
    for iJoint = [1,5]%1:length(joints)
        count = count +1;
        for iPen = 1:length(penalties)
            axes(ha(count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);
            
            trap_JCF(end+1,:) = trap.contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                          % ylim
        end
        count = count +1;
        axes(ha(count));
        figure; hold on
        plot(mean(trap_MF,2), mean(trap_JCF,2),'.','MarkerSize',20)
        errorbar(mean(trap_MF,2),mean(trap_JCF,2), std(trap_JCF,0,2),'Color',[0 0 0 ])
        ylim([0 3000])
        ylabel('Contact force (AUC)')
        if any(count == LastRow)
            xlabel('Muscle force (AUC)')
        end
    end
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plot')" style="font-weight:bold">plot</a>
Vectors must be the same length.} 
axes(ha(count)); hold on
        plot(mean(trap_MF,2), mean(trap_JCF,2),'.','MarkerSize',20)
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plot')" style="font-weight:bold">plot</a>
Vectors must be the same length.} 
trap_JCF
trap_JCF =
   1.0e+03 *
    2.6040    2.5912    2.5886    2.4399    2.5544    2.6565
    2.5549    2.5162    2.5694    2.3903    2.5293    2.6172
    2.5812    2.5506    2.6189    2.4375    2.5753    2.6698
    2.5983    2.5680    2.6378    2.4561    2.5943    2.6885
    2.6015    2.5714    2.6421    2.4601    2.5984    2.6928
    2.3751    2.3472    2.3738    2.2163    2.3096    2.3813
    2.0493    1.9825    1.9640    1.8488    1.9576    1.9953
    1.8900    1.8080    1.6454    1.6750    1.7346    1.7622
    1.8711    1.7885    1.6072    1.6553    1.7048    1.7320
    1.8695    1.7869    1.6039    1.6540    1.7024    1.7296
trap_MF
trap_MF =
  301.8249  331.9584  349.6842  326.4763  334.4902  354.4767
  133.1590  140.3561  173.0535  146.0251  159.9645  168.5988
   33.4824   35.7226   41.4184   37.2736   39.8912   41.2707
   26.9047   27.7476   28.4864   27.3640   28.5506   28.6579
   26.9047   27.7476   28.4864   27.3640   28.5506   28.6579
trap_JCF = [];
iJoint
iJoint =
     5
iJoint = [1
]
iJoint =
     1
count
count =
     4
  count = 0;
  count = count +1;
 for iPen = 1:length(penalties)
            axes(ha(count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);
            
            trap_JCF(end+1,:) = trap.contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                          % ylim
        end
ccc
  Plot_colors = colorBG(0,length(penalties));
    count = 0;
    trap_JCF = [];
iJoint
iJoint =
     1
 count = count +1;
for iPen = 1:length(penalties)
            axes(ha(count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);
            
            trap_JCF(end+1,:) = trap.contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                          % ylim
        end
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('axes')" style="font-weight:bold">axes</a>
Invalid axes handle} 
[ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,2,[],[],[0.1 0.2],[0.2 0.08 0.6 0.81]);
 for iPen = 1:length(penalties)
            axes(ha(count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);
            
            trap_JCF(end+1,:) = trap.contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                          % ylim
        end
   count = count +1;
        axes(ha(count)); hold on
        plot(mean(trap_MF,2), mean(trap_JCF,2),'.','MarkerSize',20)
        errorbar(mean(trap_MF,2),mean(trap_JCF,2), std(trap_JCF,0,2),'Color',[0 0 0 ])
        ylim([0 3000])
        ylabel('Contact force (AUC)')
        if any(count == LastRow)
            xlabel('Muscle force (AUC)')
        end
iJoint
iJoint =
     1
iJoint= 5
iJoint =
     5
 count = count +1;
count
count =
     3
 for iPen = 1:length(penalties)
            axes(ha(count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);
            
            trap_JCF(end+1,:) = trap.contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                          % ylim
        end
 count = count +1;
 axes(ha(count)); hold on
trap_MF
trap_MF =
  301.8249  331.9584  349.6842  326.4763  334.4902  354.4767
  133.1590  140.3561  173.0535  146.0251  159.9645  168.5988
   33.4824   35.7226   41.4184   37.2736   39.8912   41.2707
   26.9047   27.7476   28.4864   27.3640   28.5506   28.6579
   26.9047   27.7476   28.4864   27.3640   28.5506   28.6579
trap_JCF
trap_JCF =
   1.0e+03 *
    2.6040    2.5912    2.5886    2.4399    2.5544    2.6565
    2.5549    2.5162    2.5694    2.3903    2.5293    2.6172
    2.5812    2.5506    2.6189    2.4375    2.5753    2.6698
    2.5983    2.5680    2.6378    2.4561    2.5943    2.6885
    2.6015    2.5714    2.6421    2.4601    2.5984    2.6928
    2.3751    2.3472    2.3738    2.2163    2.3096    2.3813
    2.0493    1.9825    1.9640    1.8488    1.9576    1.9953
    1.8900    1.8080    1.6454    1.6750    1.7346    1.7622
    1.8711    1.7885    1.6072    1.6553    1.7048    1.7320
    1.8695    1.7869    1.6039    1.6540    1.7024    1.7296
 [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,2,[],[],[0.1 0.2],[0.2 0.08 0.6 0.81]);

    Plot_colors = colorBG(0,length(penalties));
    count = 0;
   
    for iJoint = [1,5]%1:length(joints)
        count = count +1;
        trap_JCF = [];
        for iPen = 1:length(penalties)
            axes(ha(count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);
            
            trap_JCF(end+1,:) = trap.contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                          % ylim
        end
        count = count +1;
        axes(ha(count)); hold on
        plot(mean(trap_MF,2), mean(trap_JCF,2),'.','MarkerSize',20)
        errorbar(mean(trap_MF,2),mean(trap_JCF,2), std(trap_JCF,0,2),'Color',[0 0 0 ])
        ylim([0 3000])
        ylabel('Contact force (AUC)')
        if any(count == LastRow)
            xlabel('Muscle force (AUC)')
        end
    end

    % appearance
    ax = ha(1);
    lg = legend(ax.Children(2:2:end),legend_Iterations);
    lg.Position = [0.75 0.75 0.21 0.05];
    lg.Interpreter = "none";
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Joint contact forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect
    lg.Position 
ans =
    0.2544    0.7763    0.2100    0.0972
    lg.Position 
ans =
    0.2544    0.7763    0.2100    0.0972
 [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,2,[],[],[0.1 0.1],[0.2 0.08 0.6 0.81]);

    Plot_colors = colorBG(0,length(penalties));
    count = 0;
   
    for iJoint = [1,5]%1:length(joints)
        count = count +1;
        trap_JCF = [];
        for iPen = 1:length(penalties)
            axes(ha(count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);
            
            trap_JCF(end+1,:) = trap.contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                          % ylim
        end
        count = count +1;
        axes(ha(count)); hold on
        plot(mean(trap_MF,2), mean(trap_JCF,2),'.','MarkerSize',20)
        errorbar(mean(trap_MF,2),mean(trap_JCF,2), std(trap_JCF,0,2),'Color',[0 0 0 ])
        ylim([0 3000])
        ylabel('Contact force (AUC)')
        if any(count == LastRow)
            xlabel('Muscle force (AUC)')
        end
    end

    % appearance
    ax = ha(1);
    lg = legend(ax.Children(2:2:end),legend_Iterations);
    lg.Position = [0.25 0.78 0.21 0.05];
    lg.Interpreter = "none";
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Joint contact forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect
    lg.Position 
ans =
    0.2931    0.7564    0.2100    0.0972
get(gca,'FontName')
ans =
    'Times New Roman'
  suptitle(['Joint contact forces ' leg ],'FontName',get(gca,'FontName'))
mmfn_inspect
mmfn_inspect
 [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,2,[],[0.1 0.3],[0.1 0.1],[0.2 0.08 0.6 0.81]);

  
  [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,2,[],[0.15 0.1],[0.1 0.1],[0.2 0.08 0.6 0.81]);

    Plot_colors = colorBG(0,length(penalties));
    count = 0;
   
    for iJoint = [1,5]%1:length(joints)
        count = count +1;
        trap_JCF = [];
        for iPen = 1:length(penalties)
            axes(ha(count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);
            
            trap_JCF(end+1,:) = trap.contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                          % ylim
        end
        count = count +1;
        axes(ha(count)); hold on
        plot(mean(trap_MF,2), mean(trap_JCF,2),'.','MarkerSize',20)
        errorbar(mean(trap_MF,2),mean(trap_JCF,2), std(trap_JCF,0,2),'Color',[0 0 0 ])
        ylim([0 3000])
        ylabel('Contact force (AUC)')
        if any(count == LastRow)
            xlabel('Muscle force (AUC)')
        end
    end

    % appearance
    ax = ha(1);
    lg = legend(ax.Children(2:2:end),legend_Iterations);
    lg.Position = [0.3 0.78 0.21 0.05];
    lg.Interpreter = "none";
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Joint contact forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect
(mean(trap_MF,2)
 (mean(trap_MF,2)
                 ↑
{Invalid expression. When calling a function or indexing a variable, use parentheses. Otherwise, check for mismatched delimiters.
} 
(mean(trap_MF,2))
ans =
  333.1518
  153.5262
   38.1765
   27.9519
   27.9519
trap_JCF
trap_JCF =
   1.0e+03 *
    2.3751    2.3472    2.3738    2.2163    2.3096    2.3813
    2.0493    1.9825    1.9640    1.8488    1.9576    1.9953
    1.8900    1.8080    1.6454    1.6750    1.7346    1.7622
    1.8711    1.7885    1.6072    1.6553    1.7048    1.7320
    1.8695    1.7869    1.6039    1.6540    1.7024    1.7296
mean(trap_JCF,2)
ans =
   1.0e+03 *
    2.3339
    1.9663
    1.7525
    1.7265
    1.7244
r = corrcoef(trap_MF, trap_JCF)
r =
    1.0000    0.9470
    0.9470    1.0000
trap_JCF
trap_JCF =
   1.0e+03 *
    2.3751    2.3472    2.3738    2.2163    2.3096    2.3813
    2.0493    1.9825    1.9640    1.8488    1.9576    1.9953
    1.8900    1.8080    1.6454    1.6750    1.7346    1.7622
    1.8711    1.7885    1.6072    1.6553    1.7048    1.7320
    1.8695    1.7869    1.6039    1.6540    1.7024    1.7296
try open('correlationPlot'); catch edit('correlationPlot'); end
size(trap_MF,1)
ans =
     5
  [rsquared,pvalue, p1,rlo,rup] = plotCorr (trap_MF(irow,;),trap_JCF(irow,;))
   [rsquared,pvalue, p1,rlo,rup] = plotCorr (trap_MF(irow,;),trap_JCF(irow,;))
                                                          ↑
{Invalid expression. When calling a function or indexing a variable, use parentheses. Otherwise, check for mismatched delimiters.
} 
[rsquared,pvalue, p1,rlo,rup] = plotCorr (trap_MF(irow,:),trap_JCF(irow,:))
{Unrecognized function or variable 'irow'.} 
irow = 1
irow =
     1
    [rsquared,pvalue, p1,rlo,rup] = plotCorr (trap_MF(irow,:),trap_JCF(irow,:))
[Warning: Polynomial is not unique; degree >= number of data points.] 
[> In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('polyfit', 'C:\Program Files\MATLAB\R2022a\toolbox\matlab\polyfun\polyfit.m', 79)" style="font-weight:bold">polyfit</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2022a\toolbox\matlab\polyfun\polyfit.m',79,0)">line 79</a>)
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plotCorr', 'C:\Git\MSKmodelling\src\plotting\plotCorr.m', 48)" style="font-weight:bold">plotCorr</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\src\plotting\plotCorr.m',48,0)">line 48</a>)
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plotReuslts_CMBBE_withTestData', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m', 82)" style="font-weight:bold">plotReuslts_CMBBE_withTestData</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',82,0)">line 82</a>)
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('Convert2Mat', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\Convert2Mat.m', 154)" style="font-weight:bold">Convert2Mat</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\Convert2Mat.m',154,0)">line 154</a>)] 
[Warning: Zero degrees of freedom implies infinite error bounds.] 
[> In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('polyval', 'C:\Program Files\MATLAB\R2022a\toolbox\matlab\polyfun\polyval.m', 112)" style="font-weight:bold">polyval</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2022a\toolbox\matlab\polyfun\polyval.m',112,0)">line 112</a>)
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plotCorr', 'C:\Git\MSKmodelling\src\plotting\plotCorr.m', 49)" style="font-weight:bold">plotCorr</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\src\plotting\plotCorr.m',49,0)">line 49</a>)
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plotReuslts_CMBBE_withTestData', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m', 82)" style="font-weight:bold">plotReuslts_CMBBE_withTestData</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',82,0)">line 82</a>)
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('Convert2Mat', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\Convert2Mat.m', 154)" style="font-weight:bold">Convert2Mat</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\Convert2Mat.m',154,0)">line 154</a>)] 
rsquared =
    0.0352
pvalue =
    0.7218
p1 = 
  1×2 <a href="matlab:helpPopup matlab.graphics.chart.primitive.Line" style="font-weight:bold">Line</a> array:

    Line    Line
rlo =
    1.0000   -0.7360
   -0.7360    1.0000
rup =
    1.0000    0.8672
    0.8672    1.0000
        
ccc
   [rsquared,pvalue, p1,rlo,rup] = plotCorr (trap_MF(irow,:),trap_JCF(irow,:))
[Warning: Polynomial is not unique; degree >= number of data points.] 
[> In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('polyfit', 'C:\Program Files\MATLAB\R2022a\toolbox\matlab\polyfun\polyfit.m', 79)" style="font-weight:bold">polyfit</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2022a\toolbox\matlab\polyfun\polyfit.m',79,0)">line 79</a>)
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plotCorr', 'C:\Git\MSKmodelling\src\plotting\plotCorr.m', 48)" style="font-weight:bold">plotCorr</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\src\plotting\plotCorr.m',48,0)">line 48</a>)
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plotReuslts_CMBBE_withTestData', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m', 82)" style="font-weight:bold">plotReuslts_CMBBE_withTestData</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',82,0)">line 82</a>)
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('Convert2Mat', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\Convert2Mat.m', 154)" style="font-weight:bold">Convert2Mat</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\Convert2Mat.m',154,0)">line 154</a>)] 
[Warning: Zero degrees of freedom implies infinite error bounds.] 
[> In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('polyval', 'C:\Program Files\MATLAB\R2022a\toolbox\matlab\polyfun\polyval.m', 112)" style="font-weight:bold">polyval</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2022a\toolbox\matlab\polyfun\polyval.m',112,0)">line 112</a>)
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plotCorr', 'C:\Git\MSKmodelling\src\plotting\plotCorr.m', 49)" style="font-weight:bold">plotCorr</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\src\plotting\plotCorr.m',49,0)">line 49</a>)
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plotReuslts_CMBBE_withTestData', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m', 82)" style="font-weight:bold">plotReuslts_CMBBE_withTestData</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',82,0)">line 82</a>)
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('Convert2Mat', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\Convert2Mat.m', 154)" style="font-weight:bold">Convert2Mat</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\Convert2Mat.m',154,0)">line 154</a>)] 
rsquared =
    0.0352
pvalue =
    0.7218
p1 = 
  1×2 <a href="matlab:helpPopup matlab.graphics.chart.primitive.Line" style="font-weight:bold">Line</a> array:

    Line    Line
rlo =
    1.0000   -0.7360
   -0.7360    1.0000
rup =
    1.0000    0.8672
    0.8672    1.0000
        
[rsquared,pvalue, p1,rlo,rup] = plotCorr (trap_MF(irow,:),trap_JCF(irow,:),1)
rsquared =
    0.0352
pvalue =
    0.7218
p1 = 
  1×2 <a href="matlab:helpPopup matlab.graphics.chart.primitive.Line" style="font-weight:bold">Line</a> array:

    Line    Line
rlo =
    1.0000   -0.7360
   -0.7360    1.0000
rup =
    1.0000    0.8672
    0.8672    1.0000
[rsquared,pvalue, p1,rlo,rup] = plotCorr (trap_MF(irow,:),trap_JCF(irow,:),1)
rsquared =
    0.0352
pvalue =
    0.7218
p1 = 
  1×2 <a href="matlab:helpPopup matlab.graphics.chart.primitive.Line" style="font-weight:bold">Line</a> array:

    Line    Line
rlo =
    1.0000   -0.7360
   -0.7360    1.0000
rup =
    1.0000    0.8672
    0.8672    1.0000
            [rsquared,pvalue, p1,rlo,rup] = plotCorr (trap_MF,trap_JCF,1)
rsquared =
    0.8967
pvalue =
   2.4640e-15
p1 = 
  1×2 <a href="matlab:helpPopup matlab.graphics.chart.primitive.Line" style="font-weight:bold">Line</a> array:

    Line    Line
rlo =
    1.0000    0.8905
    0.8905    1.0000
rup =
    1.0000    0.9747
    0.9747    1.0000
 [rsquared,pvalue, p1,rlo,rup] = plotCorr (trap_MF',trap_JCF',1)
rsquared =
    0.8967
pvalue =
   2.4640e-15
p1 = 
  1×2 <a href="matlab:helpPopup matlab.graphics.chart.primitive.Line" style="font-weight:bold">Line</a> array:

    Line    Line
rlo =
    1.0000    0.8905
    0.8905    1.0000
rup =
    1.0000    0.9747
    0.9747    1.0000
 [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,2,[],[0.15 0.1],[0.1 0.1],[0.2 0.08 0.6 0.81]);

    Plot_colors = colorBG(0,length(penalties));
    count = 0;
   
    for iJoint = [1,5]%1:length(joints)
        count = count +1;
        trap_JCF = [];
        for iPen = 1:length(penalties)
            axes(ha(count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);
            
            trap_JCF(end+1,:) = trap.contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                          % ylim
        end
        count = count +1;
        axes(ha(count)); hold on
        for irow = 1:size(trap_MF,1)            
            [rsquared,pvalue, p1,rlo,rup] = plotCorr (trap_MF(irow,:),trap_JCF(irow,:),1);
%             plot(trap_MF,2), mean(trap_JCF,2),'.','MarkerSize',20)
%             errorbar(mean(trap_MF,2),mean(trap_JCF,2), std(trap_JCF,0,2),'Color',[0 0 0])
        end
        ylim([0 3000])
        ylabel('Contact force (AUC)')
        if any(count == LastRow)
            xlabel('Muscle force (AUC)')
        end
    end

    % appearance
    ax = ha(1);
    lg = legend(ax.Children(2:2:end),legend_Iterations);
    lg.Position = [0.3 0.78 0.21 0.05];
    lg.Interpreter = "none";
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Joint contact forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect
 [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,2,[],[0.15 0.1],[0.1 0.1],[0.2 0.08 0.6 0.81]);

    Plot_colors = colorBG(0,length(penalties));
    count = 0;
   
    for iJoint = [1,5]%1:length(joints)
        count = count +1;
        trap_JCF = [];
        for iPen = 1:length(penalties)
            axes(ha(count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);
            
            trap_JCF(end+1,:) = trap.contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                          % ylim
        end
        count = count +1;
        axes(ha(count)); hold on
        for icol = 1:size(trap_MF,2)            
            [rsquared,pvalue, p1,rlo,rup] = plotCorr (trap_MF(:,icol),trap_JCF(:,icol),1);
%             plot(trap_MF,2), mean(trap_JCF,2),'.','MarkerSize',20)
%             errorbar(mean(trap_MF,2),mean(trap_JCF,2), std(trap_JCF,0,2),'Color',[0 0 0])
        end
        ylim([0 3000])
        ylabel('Contact force (AUC)')
        if any(count == LastRow)
            xlabel('Muscle force (AUC)')
        end
    end

    % appearance
    ax = ha(1);
    lg = legend(ax.Children(2:2:end),legend_Iterations);
    lg.Position = [0.3 0.78 0.21 0.05];
    lg.Interpreter = "none";
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Joint contact forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect
iJoint= 1
iJoint =
     1
 [ha, pos,FirstCol,LastRow,LastCol] = tight_subplotBG(2,2,[],[0.15 0.1],[0.1 0.1],[0.2 0.08 0.6 0.81]);

    Plot_colors = colorBG(0,length(penalties));
    count = 0;
 count = count +1;
        trap_JCF = [];
        for iPen = 1:length(penalties)
            axes(ha(count))

            JointName = joints{iJoint};
            force_data = contactForces.([penalties{iPen}]).(JointName);
            
            trap_JCF(end+1,:) = trap.contactForces.([penalties{iPen}]).(JointName);

            plotShadedSD(mean(force_data,2),std(force_data,0,2), Plot_colors(iPen,:));
            title(JointName,'Interpreter','none')
            if any(count == FirstCol)
                ylabel('Contact force (N)')
            end
            if any(count == LastRow)
                xlabel('Gait cycle(%)')
            end
            ylim([0 5500])                                                                                          % ylim
        end
        count = count +1;
        axes(ha(count)); hold on
        rsquared = []; pvalue =[]; p1=[];rlo=[];rup=[];
        for icol = 1:size(trap_MF,2)            
            [rsquared(icol),pvalue(icol), p1(icol),rlo(icol),rup(icol)] = plotCorr (trap_MF(:,icol),trap_JCF(:,icol),1,0.05,Plot_colors(icol,:),5);
%             plot(trap_MF,2), mean(trap_JCF,2),'.','MarkerSize',20)
%             errorbar(mean(trap_MF,2),mean(trap_JCF,2), std(trap_JCF,0,2),'Color',[0 0 0])
        end
{Unable to perform assignment because the indices on the left side are not compatible with the size of the right side.} 
rsquared
rsquared =
    0.0076
  [rsquared(icol),pvalue(icol), p1(icol),rlo(icol),rup(icol)] = plotCorr (trap_MF(:,icol),trap_JCF(:,icol),1,0.05,Plot_colors(icol,:),5);
{Unable to perform assignment because the indices on the left side are not compatible with the size of the right side.} 
plotCorr (trap_MF(:,icol),trap_JCF(:,icol),1,0.05,Plot_colors(icol,:),5)
ans =
    0.0076
plotCorr (trap_MF(:,icol),trap_JCF(:,icol),1,0.05,Plot_colors(icol,:),5)
ans =
    0.0076
plotCorr (trap_MF(:,icol),trap_JCF(:,icol),1,0.05,Plot_colors(icol,:),5)
ans =
    0.0076
plotCorr (trap_MF(:,icol),trap_JCF(:,icol),1,0.05,Plot_colors(icol,:),5)
ans =
    0.0076
plotCorr (trap_MF(:,icol),trap_JCF(:,icol),1,0.05,Plot_colors(icol,:),5)
ans =
    0.0076
plotCorr (trap_MF(:,icol),trap_JCF(:,icol),1,0.05,Plot_colors(icol,:),5)
ans =
    0.0076
icol
icol =
     1
icol
icol =
     1
p1
p1 =
     []
  [rsquared(icol),pvalue(icol), p1(icol),rlo(icol,1:2),rup(icol,1:2)] = plotCorr (trap_MF(:,icol),trap_JCF(:,icol),1,0.05,Plot_colors(icol,:),5);
{Unable to perform assignment because the indices on the left side are not compatible with the size of the right side.} 
 axes(ha(count)); hold on
        rsquared = []; pvalue=[]; rlo=[]; rup=[];
        for icol = 1:size(trap_MF,2)            
            [rsquared(icol),pvalue(icol), ~,rlo(icol,1:2),rup(icol,1:2)] = plotCorr (trap_MF(:,icol),trap_JCF(:,icol),1,0.05,Plot_colors(icol,:),5);
%             plot(trap_MF,2), mean(trap_JCF,2),'.','MarkerSize',20)
%             errorbar(mean(trap_MF,2),mean(trap_JCF,2), std(trap_JCF,0,2),'Color',[0 0 0])
        end
{Unable to perform assignment because the indices on the left side are not compatible with the size of the right side.} 
[a,b,c,d,e]=  plotCorr (trap_MF(:,icol),trap_JCF(:,icol),1,0.05,Plot_colors(icol,:),5);
[a,b,c,d,e]=  plotCorr (trap_MF(:,icol),trap_JCF(:,icol),1,0.05,Plot_colors(icol,:),5)
a =
    0.0076
b =
    0.8894
c = 
  1×2 <a href="matlab:helpPopup matlab.graphics.chart.primitive.Line" style="font-weight:bold">Line</a> array:

    Line    Line
d =
    1.0000   -0.8614
   -0.8614    1.0000
e =
    1.0000    0.9002
    0.9002    1.0000
   axes(ha(count)); hold on
        rsquared = []; pvalue=[]; rlo=[]; rup=[];
        for icol = 1:size(trap_MF,2)            
            [rsquared(icol),pvalue(icol), ~,rlo(icol),rup(icol)] = plotCorr (trap_MF(:,icol),trap_JCF(:,icol),1,0.05,Plot_colors(icol,:),5);
%             plot(trap_MF,2), mean(trap_JCF,2),'.','MarkerSize',20)
%             errorbar(mean(trap_MF,2),mean(trap_JCF,2), std(trap_JCF,0,2),'Color',[0 0 0])
        end
{Index in position 1 exceeds array bounds. Index must not exceed 5.} 
trap_MF
trap_MF =
  301.8249  331.9584  349.6842  326.4763  334.4902  354.4767
  133.1590  140.3561  173.0535  146.0251  159.9645  168.5988
   33.4824   35.7226   41.4184   37.2736   39.8912   41.2707
   26.9047   27.7476   28.4864   27.3640   28.5506   28.6579
   26.9047   27.7476   28.4864   27.3640   28.5506   28.6579
penalties{iPen}
ans =
    'Pen_1000'
contactForces.([penalties{iPen}]).(JointName)
ans =
   1.0e+03 *
    2.2424    2.2424    2.0943    2.0943    1.3792    1.3792    1.5598    1.5598    1.5951    1.5951    1.6437    1.6437
    2.5504    2.5504    2.2119    2.2119    1.6120    1.6120    1.7338    1.7338    1.6948    1.6948    1.7863    1.7863
    2.1886    2.1886    1.8865    1.8865    1.4302    1.4302    1.5558    1.5558    1.4841    1.4841    1.5361    1.5361
    1.9987    1.9987    1.7870    1.7870    1.2892    1.2892    1.4852    1.4852    1.4228    1.4228    1.4509    1.4509
    2.0744    2.0744    2.0367    2.0367    1.2319    1.2319    1.7212    1.7212    1.6686    1.6686    1.6206    1.6206
    2.2953    2.2953    2.3679    2.3679    1.3367    1.3367    1.9758    1.9758    1.9566    1.9566    1.9511    1.9511
    2.6173    2.6173    2.7557    2.7557    1.6097    1.6097    2.2599    2.2599    2.2884    2.2884    2.3937    2.3937
    2.8818    2.8818    3.0593    3.0593    1.9411    1.9411    2.5441    2.5441    2.5382    2.5382    2.6659    2.6659
    3.1305    3.1305    3.3399    3.3399    2.3032    2.3032    2.8286    2.8286    2.7446    2.7446    2.8916    2.8916
    3.2591    3.2591    3.5048    3.5048    2.6645    2.6645    3.1196    3.1196    3.0029    3.0029    3.2470    3.2470
    3.3676    3.3676    3.6628    3.6628    3.0256    3.0256    3.4141    3.4141    3.2728    3.2728    3.5945    3.5945
    3.3930    3.3930    3.7986    3.7986    3.2439    3.2439    3.6182    3.6182    3.5264    3.5264    3.8950    3.8950
    3.3932    3.3932    3.8965    3.8965    3.4408    3.4408    3.7965    3.7965    3.7612    3.7612    4.1213    4.1213
    3.3513    3.3513    3.9310    3.9310    3.5269    3.5269    3.8749    3.8749    3.8875    3.8875    4.2236    4.2236
    3.3163    3.3163    3.9432    3.9432    3.6130    3.6130    3.9417    3.9417    3.9774    3.9774    4.2439    4.2439
    3.2866    3.2866    3.9387    3.9387    3.6991    3.6991    3.9733    3.9733    3.9859    3.9859    4.2026    4.2026
    3.2649    3.2649    3.8866    3.8866    3.8331    3.8331    3.9920    3.9920    3.9579    3.9579    4.1069    4.1069
    3.2457    3.2457    3.8201    3.8201    4.0206    4.0206    3.9469    3.9469    3.8892    3.8892    3.9949    3.9949
    3.2927    3.2927    3.7326    3.7326    4.1573    4.1573    3.9003    3.9003    3.8483    3.8483    3.9111    3.9111
    3.3352    3.3352    3.6399    3.6399    4.2649    4.2649    3.8503    3.8503    3.8234    3.8234    3.8397    3.8397
    3.3416    3.3416    3.5235    3.5235    4.2913    4.2913    3.8113    3.8113    3.8131    3.8131    3.8274    3.8274
    3.3038    3.3038    3.4096    3.4096    4.2974    4.2974    3.7872    3.7872    3.8064    3.8064    3.8004    3.8004
    3.1867    3.1867    3.3002    3.3002    4.2664    4.2664    3.7402    3.7402    3.7399    3.7399    3.7471    3.7471
    3.0869    3.0869    3.2159    3.2159    4.2338    4.2338    3.6747    3.6747    3.6714    3.6714    3.6761    3.6761
    3.0010    3.0010    3.1519    3.1519    4.2005    4.2005    3.5983    3.5983    3.6047    3.6047    3.5908    3.5908
    2.9995    2.9995    3.1243    3.1243    4.1650    4.1650    3.5170    3.5170    3.5378    3.5378    3.5071    3.5071
    3.0263    3.0263    3.1087    3.1087    4.1245    4.1245    3.4149    3.4149    3.4706    3.4706    3.4239    3.4239
    3.0916    3.0916    3.0928    3.0928    4.0804    4.0804    3.3081    3.3081    3.4060    3.4060    3.3455    3.3455
    3.1569    3.1569    3.0779    3.0779    4.0322    4.0322    3.2266    3.2266    3.3444    3.3444    3.2801    3.2801
    3.2090    3.2090    3.0685    3.0685    3.9996    3.9996    3.1550    3.1550    3.3091    3.3091    3.2907    3.2907
    3.2441    3.2441    3.0585    3.0585    3.9766    3.9766    3.1889    3.1889    3.2899    3.2899    3.3085    3.3085
    3.2461    3.2461    3.0470    3.0470    3.9601    3.9601    3.2330    3.2330    3.3082    3.3082    3.3402    3.3402
    3.2642    3.2642    3.0540    3.0540    3.9455    3.9455    3.3170    3.3170    3.3369    3.3369    3.3741    3.3741
    3.2963    3.2963    3.0772    3.0772    3.9327    3.9327    3.4017    3.4017    3.4006    3.4006    3.4099    3.4099
    3.3814    3.3814    3.1454    3.1454    3.9229    3.9229    3.4878    3.4878    3.4709    3.4709    3.4842    3.4842
    3.4858    3.4858    3.2301    3.2301    3.9364    3.9364    3.5650    3.5650    3.5785    3.5785    3.5727    3.5727
    3.5659    3.5659    3.3167    3.3167    3.9515    3.9515    3.6319    3.6319    3.6833    3.6833    3.6554    3.6554
    3.6460    3.6460    3.4044    3.4044    3.9707    3.9707    3.6739    3.6739    3.7808    3.7808    3.7370    3.7370
    3.7391    3.7391    3.4978    3.4978    3.9931    3.9931    3.6988    3.6988    3.8746    3.8746    3.8146    3.8146
    3.8475    3.8475    3.5907    3.5907    4.0195    4.0195    3.7345    3.7345    3.9635    3.9635    3.9016    3.9016
    3.9884    3.9884    3.6823    3.6823    4.0704    4.0704    3.7742    3.7742    4.0446    4.0446    4.0085    4.0085
    4.1213    4.1213    3.7863    3.7863    4.1377    4.1377    3.8241    3.8241    4.1203    4.1203    4.1155    4.1155
    4.2470    4.2470    3.9018    3.9018    4.2173    4.2173    3.8757    3.8757    4.1879    4.1879    4.2225    4.2225
    4.3368    4.3368    4.0207    4.0207    4.3008    4.3008    3.9562    3.9562    4.2529    4.2529    4.3226    4.3226
    4.4122    4.4122    4.1409    4.1409    4.3519    4.3519    4.0459    4.0459    4.3241    4.3241    4.4199    4.4199
    4.4349    4.4349    4.2372    4.2372    4.3995    4.3995    4.2046    4.2046    4.4013    4.4013    4.5103    4.5103
    4.4534    4.4534    4.3365    4.3365    4.4360    4.4360    4.3776    4.3776    4.5337    4.5337    4.6054    4.6054
    4.4796    4.4796    4.4804    4.4804    4.4820    4.4820    4.5961    4.5961    4.6531    4.6531    4.7448    4.7448
    4.4839    4.4839    4.6090    4.6090    4.5560    4.5560    4.7168    4.7168    4.7343    4.7343    4.8356    4.8356
    4.4380    4.4380    4.7024    4.7024    4.5713    4.5713    4.6712    4.6712    4.7580    4.7580    4.8153    4.8153
    4.3062    4.3062    4.6740    4.6740    4.5050    4.5050    4.4386    4.4386    4.7017    4.7017    4.7458    4.7458
    4.0886    4.0886    4.5236    4.5236    4.2718    4.2718    4.0188    4.0188    4.4771    4.4771    4.6272    4.6272
    3.7820    3.7820    4.1326    4.1326    3.9188    3.9188    3.3960    3.3960    4.1314    4.1314    4.2414    4.2414
    3.4367    3.4367    3.6369    3.6369    3.4031    3.4031    2.6537    2.6537    3.5296    3.5296    3.7392    3.7392
    2.8964    2.8964    2.8334    2.8334    2.8319    2.8319    1.8662    1.8662    2.8403    2.8403    2.9137    2.9137
    2.3340    2.3340    2.0111    2.0111    2.1593    2.1593    1.0644    1.0644    2.0240    2.0240    2.0685    2.0685
    1.7850    1.7850    1.3738    1.3738    1.5192    1.5192    1.0000    1.0000    1.2459    1.2459    1.4190    1.4190
    1.3700    1.3700    0.9701    0.9701    1.4221    1.4221    1.0311    1.0311    1.1164    1.1164    1.0150    1.0150
    1.2906    1.2906    1.1509    1.1509    1.3699    1.3699    1.2358    1.2358    1.0849    1.0849    1.2251    1.2251
    1.2773    1.2773    1.2934    1.2934    1.4624    1.4624    1.3921    1.3921    1.3698    1.3698    1.3925    1.3925
    1.3351    1.3351    1.3950    1.3950    1.4622    1.4622    1.2703    1.2703    1.4760    1.4760    1.5141    1.5141
    1.2793    1.2793    1.3099    1.3099    1.3227    1.3227    1.1781    1.1781    1.3142    1.3142    1.4215    1.4215
    1.1697    1.1697    1.1364    1.1364    1.2453    1.2453    1.1629    1.1629    1.2406    1.2406    1.2274    1.2274
    1.2035    1.2035    1.0973    1.0973    1.2159    1.2159    1.1237    1.1237    1.2353    1.2353    1.1660    1.1660
    1.2492    1.2492    1.0760    1.0760    1.1481    1.1481    1.0496    1.0496    1.1918    1.1918    1.1227    1.1227
    1.1822    1.1822    1.0343    1.0343    1.0659    1.0659    0.9729    0.9729    1.1338    1.1338    1.0685    1.0685
    1.1088    1.1088    0.9837    0.9837    0.9559    0.9559    0.8941    0.8941    1.0443    1.0443    1.0097    1.0097
    1.0176    1.0176    0.9088    0.9088    0.8427    0.8427    0.8192    0.8192    0.9509    0.9509    0.9386    0.9386
    0.9244    0.9244    0.8287    0.8287    0.7326    0.7326    0.7463    0.7463    0.8568    0.8568    0.8589    0.8589
    0.8290    0.8290    0.7426    0.7426    0.6292    0.6292    0.6830    0.6830    0.7644    0.7644    0.7693    0.7693
    0.7471    0.7471    0.6661    0.6661    0.5504    0.5504    0.6220    0.6220    0.6779    0.6779    0.6825    0.6825
    0.6722    0.6722    0.5945    0.5945    0.4963    0.4963    0.5744    0.5744    0.6037    0.6037    0.5973    0.5973
    0.6197    0.6197    0.5384    0.5384    0.4821    0.4821    0.5303    0.5303    0.5492    0.5492    0.5328    0.5328
    0.5724    0.5724    0.4864    0.4864    0.5159    0.5159    0.5291    0.5291    0.5195    0.5195    0.4745    0.4745
    0.5529    0.5529    0.4611    0.4611    0.5896    0.5896    0.5348    0.5348    0.5103    0.5103    0.4660    0.4660
    0.5460    0.5460    0.4448    0.4448    0.6629    0.6629    0.5708    0.5708    0.5352    0.5352    0.4701    0.4701
    0.5771    0.5771    0.4561    0.4561    0.7359    0.7359    0.6062    0.6062    0.5742    0.5742    0.5118    0.5118
    0.6083    0.6083    0.4775    0.4775    0.7717    0.7717    0.6403    0.6403    0.6139    0.6139    0.5558    0.5558
    0.6396    0.6396    0.5114    0.5114    0.8003    0.8003    0.6694    0.6694    0.6526    0.6526    0.6029    0.6029
    0.6475    0.6475    0.5467    0.5467    0.7790    0.7790    0.6922    0.6922    0.6592    0.6592    0.6322    0.6322
    0.6424    0.6424    0.5827    0.5827    0.7571    0.7571    0.7131    0.7131    0.6613    0.6613    0.6517    0.6517
    0.6242    0.6242    0.6166    0.6166    0.7332    0.7332    0.7326    0.7326    0.6450    0.6450    0.6686    0.6686
    0.6066    0.6066    0.6500    0.6500    0.7077    0.7077    0.7348    0.7348    0.6377    0.6377    0.6853    0.6853
    0.6716    0.6716    0.6795    0.6795    0.6793    0.6793    0.7296    0.7296    0.6464    0.6464    0.7093    0.7093
    0.7299    0.7299    0.6986    0.6986    0.6559    0.6559    0.6870    0.6870    0.6630    0.6630    0.7181    0.7181
    0.7659    0.7659    0.6828    0.6828    0.6370    0.6370    0.6368    0.6368    0.6865    0.6865    0.6765    0.6765
    0.7676    0.7676    0.6816    0.6816    0.6539    0.6539    0.6673    0.6673    0.7127    0.7127    0.6605    0.6605
    0.7235    0.7235    0.6997    0.6997    0.6870    0.6870    0.7062    0.7062    0.7402    0.7402    0.6785    0.6785
    0.7632    0.7632    0.7318    0.7318    0.7596    0.7596    0.7971    0.7971    0.7726    0.7726    0.7467    0.7467
    0.8532    0.8532    0.7722    0.7722    0.8399    0.8399    0.8982    0.8982    0.8083    0.8083    0.8450    0.8450
    1.0459    1.0459    0.8911    0.8911    0.9704    0.9704    1.0352    1.0352    0.9784    0.9784    1.0252    1.0252
    1.2597    1.2597    1.0269    1.0269    1.0984    1.0984    1.1597    1.1597    1.1452    1.1452    1.2225    1.2225
    1.3989    1.3989    1.1497    1.1497    1.2151    1.2151    1.2614    1.2614    1.2979    1.2979    1.3785    1.3785
    1.5087    1.5087    1.2571    1.2571    1.3014    1.3014    1.3196    1.3196    1.4129    1.4129    1.5043    1.5043
    1.5107    1.5107    1.3084    1.3084    1.3301    1.3301    1.3309    1.3309    1.4565    1.4565    1.5195    1.5195
    1.4777    1.4777    1.3219    1.3219    1.3180    1.3180    1.2950    1.2950    1.4424    1.4424    1.4868    1.4868
    1.3947    1.3947    1.2811    1.2811    1.2663    1.2663    1.2291    1.2291    1.3726    1.3726    1.3855    1.3855
    1.3066    1.3066    1.2083    1.2083    1.1835    1.1835    1.1393    1.1393    1.2698    1.2698    1.2468    1.2468
    1.2152    1.2152    1.1147    1.1147    1.0855    1.0855    1.0410    1.0410    1.1510    1.1510    1.0839    1.0839
    1.4949    1.4949    1.0836    1.0836    1.1864    1.1864    1.2140    1.2140    1.2514    1.2514    1.3492    1.3492
    1.8653    1.8653    1.0678    1.0678    1.3263    1.3263    1.4274    1.4274    1.3947    1.3947    1.7192    1.7192
JointName
JointName =
    'hip_resultant'
figure;plot(contactForces.Pen_10.hip_resultant,'DisplayName','contactForces.Pen_10.hip_resultant')
if system_dependent('IsDebugMode')==1, dbquit; end
if system_dependent('IsDebugMode')==1, dbquit; end
ccc
Convert2Mat
loading data for left leg...
results_SO_left_1_Pen0_AVA_p30
figure;plot(contactForces.Pen_0.hip_resultant,'DisplayName','contactForces.Pen_0.hip_resultant')
contactForces_data.(['hip_' l '_norm'])
ans =
   1.0e+03 *
    2.2459
    2.5524
    2.1905
    2.0363
    2.2031
    2.4998
    2.8871
    3.2527
    3.6122
    3.7992
    3.9609
    4.0207
    4.0454
    4.0114
    3.9486
    3.8640
    3.7507
    3.6288
    3.5161
    3.4018
    3.2769
    3.1387
    2.9767
    2.8602
    2.7803
    2.7950
    2.8411
    2.9224
    3.0038
    3.0740
    3.1275
    3.1485
    3.1843
    3.2328
    3.3261
    3.4359
    3.5166
    3.5975
    3.6947
    3.8068
    3.9506
    4.0862
    4.2141
    4.3057
    4.3827
    4.4069
    4.4247
    4.4327
    4.4183
    4.3526
    4.2090
    3.9877
    3.6732
    3.3181
    2.7793
    2.2216
    1.6971
    1.2991
    1.2175
    1.1904
    1.2218
    1.1366
    0.9962
    1.0225
    1.0621
    0.9649
    0.8722
    0.7917
    0.7275
    0.6820
    0.6283
    0.5704
    0.5071
    0.4466
    0.4522
    0.4651
    0.4999
    0.5320
    0.5607
    0.5709
    0.5709
    0.5401
    0.5095
    0.6412
    0.7536
    0.8024
    0.8010
    0.7328
    0.7636
    0.8537
    1.0466
    1.2604
    1.3995
    1.5093
    1.5113
    1.4784
    1.3954
    1.3073
    1.2160
    1.4960
    1.8667
contactForces_data.(['hip_' l '_norm'])
ans =
   1.0e+03 *
    2.2459
    2.5524
    2.1905
    2.0363
    2.2031
    2.4998
    2.8871
    3.2527
    3.6122
    3.7992
    3.9609
    4.0207
    4.0454
    4.0114
    3.9486
    3.8640
    3.7507
    3.6288
    3.5161
    3.4018
    3.2769
    3.1387
    2.9767
    2.8602
    2.7803
    2.7950
    2.8411
    2.9224
    3.0038
    3.0740
    3.1275
    3.1485
    3.1843
    3.2328
    3.3261
    3.4359
    3.5166
    3.5975
    3.6947
    3.8068
    3.9506
    4.0862
    4.2141
    4.3057
    4.3827
    4.4069
    4.4247
    4.4327
    4.4183
    4.3526
    4.2090
    3.9877
    3.6732
    3.3181
    2.7793
    2.2216
    1.6971
    1.2991
    1.2175
    1.1904
    1.2218
    1.1366
    0.9962
    1.0225
    1.0621
    0.9649
    0.8722
    0.7917
    0.7275
    0.6820
    0.6283
    0.5704
    0.5071
    0.4466
    0.4522
    0.4651
    0.4999
    0.5320
    0.5607
    0.5709
    0.5709
    0.5401
    0.5095
    0.6412
    0.7536
    0.8024
    0.8010
    0.7328
    0.7636
    0.8537
    1.0466
    1.2604
    1.3995
    1.5093
    1.5113
    1.4784
    1.3954
    1.3073
    1.2160
    1.4960
    1.8667
contactForces_data.(['hip_' l '_norm'])
ans =
   1.0e+03 *
    2.2459
    2.5524
    2.1905
    2.0363
    2.2031
    2.4998
    2.8871
    3.2527
    3.6122
    3.7992
    3.9609
    4.0207
    4.0454
    4.0114
    3.9486
    3.8640
    3.7507
    3.6288
    3.5161
    3.4018
    3.2769
    3.1387
    2.9767
    2.8602
    2.7803
    2.7950
    2.8411
    2.9224
    3.0038
    3.0740
    3.1275
    3.1485
    3.1843
    3.2328
    3.3261
    3.4359
    3.5166
    3.5975
    3.6947
    3.8068
    3.9506
    4.0862
    4.2141
    4.3057
    4.3827
    4.4069
    4.4247
    4.4327
    4.4183
    4.3526
    4.2090
    3.9877
    3.6732
    3.3181
    2.7793
    2.2216
    1.6971
    1.2991
    1.2175
    1.1904
    1.2218
    1.1366
    0.9962
    1.0225
    1.0621
    0.9649
    0.8722
    0.7917
    0.7275
    0.6820
    0.6283
    0.5704
    0.5071
    0.4466
    0.4522
    0.4651
    0.4999
    0.5320
    0.5607
    0.5709
    0.5709
    0.5401
    0.5095
    0.6412
    0.7536
    0.8024
    0.8010
    0.7328
    0.7636
    0.8537
    1.0466
    1.2604
    1.3995
    1.5093
    1.5113
    1.4784
    1.3954
    1.3073
    1.2160
    1.4960
    1.8667
contactForces_data.(['hip_' l '_norm'])
ans =
   1.0e+03 *
    2.2459
    2.5524
    2.1905
    2.0363
    2.2031
    2.4998
    2.8871
    3.2527
    3.6122
    3.7992
    3.9609
    4.0207
    4.0454
    4.0114
    3.9486
    3.8640
    3.7507
    3.6288
    3.5161
    3.4018
    3.2769
    3.1387
    2.9767
    2.8602
    2.7803
    2.7950
    2.8411
    2.9224
    3.0038
    3.0740
    3.1275
    3.1485
    3.1843
    3.2328
    3.3261
    3.4359
    3.5166
    3.5975
    3.6947
    3.8068
    3.9506
    4.0862
    4.2141
    4.3057
    4.3827
    4.4069
    4.4247
    4.4327
    4.4183
    4.3526
    4.2090
    3.9877
    3.6732
    3.3181
    2.7793
    2.2216
    1.6971
    1.2991
    1.2175
    1.1904
    1.2218
    1.1366
    0.9962
    1.0225
    1.0621
    0.9649
    0.8722
    0.7917
    0.7275
    0.6820
    0.6283
    0.5704
    0.5071
    0.4466
    0.4522
    0.4651
    0.4999
    0.5320
    0.5607
    0.5709
    0.5709
    0.5401
    0.5095
    0.6412
    0.7536
    0.8024
    0.8010
    0.7328
    0.7636
    0.8537
    1.0466
    1.2604
    1.3995
    1.5093
    1.5113
    1.4784
    1.3954
    1.3073
    1.2160
    1.4960
    1.8667
joints
joints =
  1×8 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array
    {'hip_resultant'}    {'hip_x'}    {'hip_y'}    {'hip_z'}    {'knee_resultant'}    {'knee_x'}    {'knee_y'}    {'knee_z'}
 contactForces.(['Pen_' curr_penalty]).(joints{1})(:,end+1) = contactForces_data.(['hip_' l '_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{2})(:,end+1) = contactForces_data.(['hip_' l '_on_femur_' l '_in_femur_' l '_fx_norm']);
{Unrecognized field name "hip_l_on_femur_l_in_femur_l_fx_norm".} 
   contactForces.(['Pen_' curr_penalty]).(joints{1})(:,end+1) = contactForces_data.(['hip_' l '_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{2})(:,end+1) = contactForces_data.(['hip_' l '_on_pelvis_in_pelvis_fx_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{3})(:,end+1) = contactForces_data.(['hip_' l '_on_pelvis_in_pelvis_fy_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{4})(:,end+1) = contactForces_data.(['hip_' l '_on_pelvis_in_pelvis_fz_norm']);

                contactForces.(['Pen_' curr_penalty]).(joints{5})(:,end+1) = contactForces_data.(['knee_' l '_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{6})(:,end+1) = contactForces_data.(['walker_knee_' l '_on_femur_' l '_in_femur_' l '_fx_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{7})(:,end+1) = contactForces_data.(['walker_knee_' l '_on_femur_' l '_in_femur_' l '_fy_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{8})(:,end+1) = contactForces_data.(['walker_knee_' l '_on_femur_' l '_in_femur_' l '_fz_norm']);
   contactForces.(['Pen_' curr_penalty]).(joints{1})(:,end+1) = contactForces_data.(['hip_' l '_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{2})(:,end+1) = contactForces_data.(['hip_' l '_on_pelvis_in_pelvis_fx_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{3})(:,end+1) = contactForces_data.(['hip_' l '_on_pelvis_in_pelvis_fy_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{4})(:,end+1) = contactForces_data.(['hip_' l '_on_pelvis_in_pelvis_fz_norm']);

                contactForces.(['Pen_' curr_penalty]).(joints{5})(:,end+1) = contactForces_data.(['knee_' l '_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{6})(:,end+1) = contactForces_data.(['walker_knee_' l '_on_femur_' l '_in_femur_' l '_fx_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{7})(:,end+1) = contactForces_data.(['walker_knee_' l '_on_femur_' l '_in_femur_' l '_fy_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{8})(:,end+1) = contactForces_data.(['walker_knee_' l '_on_femur_' l '_in_femur_' l '_fz_norm']);
   contactForces.(['Pen_' curr_penalty]).(joints{1})(:,end+1) = contactForces_data.(['hip_' l '_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{2})(:,end+1) = contactForces_data.(['hip_' l '_on_pelvis_in_pelvis_fx_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{3})(:,end+1) = contactForces_data.(['hip_' l '_on_pelvis_in_pelvis_fy_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{4})(:,end+1) = contactForces_data.(['hip_' l '_on_pelvis_in_pelvis_fz_norm']);

                contactForces.(['Pen_' curr_penalty]).(joints{5})(:,end+1) = contactForces_data.(['knee_' l '_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{6})(:,end+1) = contactForces_data.(['walker_knee_' l '_on_femur_' l '_in_femur_' l '_fx_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{7})(:,end+1) = contactForces_data.(['walker_knee_' l '_on_femur_' l '_in_femur_' l '_fy_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{8})(:,end+1) = contactForces_data.(['walker_knee_' l '_on_femur_' l '_in_femur_' l '_fz_norm']);
if system_dependent('IsDebugMode')==1, dbquit; end
Convert2Mat
loading data for left leg...
results_SO_left_1_Pen0_AVA_p30
    [contactForces_data] = calc_resultant_JCF(contactForces_data,look_for_substrings,fs);
  contactForces.(['Pen_' curr_penalty]).(joints{1})(:,end+1) = contactForces_data.(['hip_' l '_norm']);
                contactForces.(['Pen_' curr_penalty]).(joints{2})(:,end+1) = contactForces_data.(['hip_' l '_on_femur_' l '_in_femur_' l '_fx_norm']);
{Unrecognized field name "hip_l_on_femur_l_in_femur_l_fx_norm".} 
if system_dependent('IsDebugMode')==1, dbquit; end
Convert2Mat
loading data for left leg...
results_SO_left_1_Pen0_AVA_p30
if system_dependent('IsDebugMode')==1, dbcont; end
if system_dependent('IsDebugMode')==1, dbcont; end
if system_dependent('IsDebugMode')==1, dbquit all; end
Convert2Mat
loading data for left leg...
results_SO_left_1_Pen0_AVA_p30
if system_dependent('IsDebugMode')==1, dbquit all; end
Convert2Mat
loading data for left leg...
results_SO_left_1_Pen0_AVA_p30
results_SO_left_2_Pen0_AVA_p30
results_SO_left_3_Pen0_AVA_p30
results_SO_left_4_Pen0_AVA_p30
results_SO_left_5_Pen0_AVA_p30
results_SO_left_6_Pen0_AVA_p30
results_SO_left_1_Pen10_AVA_p30
results_SO_left_2_Pen10_AVA_p30
results_SO_left_3_Pen10_AVA_p30
results_SO_left_4_Pen10_AVA_p30
results_SO_left_5_Pen10_AVA_p30
results_SO_left_6_Pen10_AVA_p30
results_SO_left_1_Pen100_AVA_p30
results_SO_left_2_Pen100_AVA_p30
results_SO_left_3_Pen100_AVA_p30
results_SO_left_4_Pen100_AVA_p30
results_SO_left_5_Pen100_AVA_p30
results_SO_left_6_Pen100_AVA_p30
results_SO_left_1_Pen500_AVA_p30
results_SO_left_2_Pen500_AVA_p30
results_SO_left_3_Pen500_AVA_p30
results_SO_left_4_Pen500_AVA_p30
results_SO_left_5_Pen500_AVA_p30
results_SO_left_6_Pen500_AVA_p30
results_SO_left_1_Pen1000_AVA_p30
results_SO_left_2_Pen1000_AVA_p30
results_SO_left_3_Pen1000_AVA_p30
results_SO_left_4_Pen1000_AVA_p30
results_SO_left_5_Pen1000_AVA_p30
results_SO_left_6_Pen1000_AVA_p30
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\Convert2Mat.m',155,1)">155 </a>end
plotReuslts_CMBBE_withTestData
{Index in position 1 exceeds array bounds. Index must not exceed 5.
Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plotReuslts_CMBBE_withTestData', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m', 142)" style="font-weight:bold">plotReuslts_CMBBE_withTestData</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',142,0)">line 142</a>)
            [rsquared(icol),pvalue(icol), ~,rlo(icol),rup(icol)] = plotCorr (trap_MF(:,icol),trap_JCF(:,icol),1,0.05,Plot_colors(icol,:),5);} 
opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',142,0)
plotReuslts_CMBBE_withTestData
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',141,1)">141 </a>        for icol = 1:size(trap_MF,2)            
 for icol = 1:size(trap_MF,2)            
            [rsquared(icol),pvalue(icol), ~,rlo(icol),rup(icol)] = plotCorr (trap_MF(:,icol),trap_JCF(:,icol),1,0.05,Plot_colors(icol,:),5);
%             plot(trap_MF,2), mean(trap_JCF,2),'.','MarkerSize',20)
%             errorbar(mean(trap_MF,2),mean(trap_JCF,2), std(trap_JCF,0,2),'Color',[0 0 0])
        end
{Index in position 1 exceeds array bounds. Index must not exceed 5.} 
icol
icol =
     6
trap_MF
trap_MF =
  301.8249  331.9584  349.6842  326.4763  334.4902  354.4767
  133.1590  140.3561  173.0535  146.0251  159.9645  168.5988
   33.4824   35.7226   41.4184   37.2736   39.8912   41.2707
   26.9047   27.7476   28.4864   27.3640   28.5506   28.6579
   26.9047   27.7476   28.4864   27.3640   28.5506   28.6579
trap_JCF
trap_JCF =
   1.0e+03 *
    2.6040    2.5912    2.5886    2.4399    2.5544    2.6565
    2.5549    2.5162    2.5694    2.3903    2.5293    2.6172
    2.5812    2.5506    2.6189    2.4375    2.5753    2.6698
    2.5983    2.5680    2.6378    2.4561    2.5943    2.6885
    2.6015    2.5714    2.6421    2.4601    2.5984    2.6928
Plot_colors
Plot_colors =
    0.2670    0.0049    0.3294
    0.2539    0.2653    0.5300
    0.1636    0.4711    0.5581
    0.1373    0.6623    0.5156
    0.4870    0.8239    0.3123
 axes(ha(count)); hold on
        rsquared = []; pvalue=[]; rlo=[]; rup=[];
        for irow = 1:size(trap_MF,1)            
            [rsquared(irow),pvalue(irow), ~,rlo(irow),rup(irow)] = plotCorr (trap_MF(irow,:),trap_JCF(irow,:),1,0.05,Plot_colors(irow,:),5);
%             plot(trap_MF,2), mean(trap_JCF,2),'.','MarkerSize',20)
%             errorbar(mean(trap_MF,2),mean(trap_JCF,2), std(trap_JCF,0,2),'Color',[0 0 0])
        end
 ylim([0 3000])
        ylabel('Contact force (AUC)')
  plot(mean(trap_MF,2), mean(trap_JCF,2),'.','MarkerSize',20)
            errorbar(mean(trap_MF,2),mean(trap_JCF,2), std(trap_JCF,0,2),'Color',[0 0 0])
            errorbar(mean(trap_MF,2),mean(trap_JCF,2), std(trap_MF,0,2),'horizontal','Color',[0 0 0])
      plot(mean(trap_MF,2), mean(trap_JCF,2),'.','MarkerSize',20)
            errorbar(mean(trap_MF,2),mean(trap_JCF,2), std(trap_JCF,0,2),'Color',[0 0 0],'LineStyle','none')
            errorbar(mean(trap_MF,2),mean(trap_JCF,2), std(trap_MF,0,2),'horizontal','Color',[0 0 0],'LineStyle','none')
 [c, pvalue,rlo,rup] = corrcoef(mean(trap_MF,2),mean(trap_JCF,2));
c
c =
    1.0000   -0.3752
   -0.3752    1.0000
c(1,2)
ans =
   -0.3752
t = text(0.9, 0.9,['r = ' num2str(r(1,2))])
{Unrecognized function or variable 'r'.} 
[r, pvalue,rlo,rup] = corrcoef(mean(trap_MF,2),mean(trap_JCF,2));
        t = text(0.9, 0.9,['r = ' num2str(r(1,2))])
t = 
  <a href="matlab:helpPopup matlab.graphics.primitive.Text" style="font-weight:bold">Text</a> (r = -0.37521) with properties:

                 String: 'r = -0.37521'
               FontSize: 10
             FontWeight: 'normal'
               FontName: 'Helvetica'
                  Color: [0 0 0]
    HorizontalAlignment: 'left'
               Position: [0.9000 0.9000 0]
                  Units: 'data'

  Show <a href="matlab:if exist('t', 'var'), matlab.graphics.internal.getForDisplay('t', t, 'matlab.graphics.primitive.Text'), else, matlab.graphics.internal.getForDisplay('t'), end">all properties</a>
t = text(gca, 0.9, 0.9,['r = ' num2str(r(1,2))])
t = 
  <a href="matlab:helpPopup matlab.graphics.primitive.Text" style="font-weight:bold">Text</a> (r = -0.37521) with properties:

                 String: 'r = -0.37521'
               FontSize: 10
             FontWeight: 'normal'
               FontName: 'Helvetica'
                  Color: [0 0 0]
    HorizontalAlignment: 'left'
               Position: [0.9000 0.9000 0]
                  Units: 'data'

  Show <a href="matlab:if exist('t', 'var'), matlab.graphics.internal.getForDisplay('t', t, 'matlab.graphics.primitive.Text'), else, matlab.graphics.internal.getForDisplay('t'), end">all properties</a>
t.Position
ans =
   1.0e+03 *
    0.3174    2.1268         0
 t = text(0.9, 0.9,['r = ' num2str(round(r(1,2),2))],'Position',[317 2128 0])
t = 
  <a href="matlab:helpPopup matlab.graphics.primitive.Text" style="font-weight:bold">Text</a> (r = -0.38) with properties:

                 String: 'r = -0.38'
               FontSize: 10
             FontWeight: 'normal'
               FontName: 'Helvetica'
                  Color: [0 0 0]
    HorizontalAlignment: 'left'
               Position: [317 2128 0]
                  Units: 'data'

  Show <a href="matlab:if exist('t', 'var'), matlab.graphics.internal.getForDisplay('t', t, 'matlab.graphics.primitive.Text'), else, matlab.graphics.internal.getForDisplay('t'), end">all properties</a>
        t = text(0.9, 0.9,['r = ' num2str(round(r(1,2),2))],'Position',[317 2128 0])
t = 
  <a href="matlab:helpPopup matlab.graphics.primitive.Text" style="font-weight:bold">Text</a> (r = -0.38) with properties:

                 String: 'r = -0.38'
               FontSize: 10
             FontWeight: 'normal'
               FontName: 'Helvetica'
                  Color: [0 0 0]
    HorizontalAlignment: 'left'
               Position: [317 2128 0]
                  Units: 'data'

  Show <a href="matlab:if exist('t', 'var'), matlab.graphics.internal.getForDisplay('t', t, 'matlab.graphics.primitive.Text'), else, matlab.graphics.internal.getForDisplay('t'), end">all properties</a>
        ylim([0 3000])
t.Units = 'normalised'
{Invalid or deleted object.} 
t.Units = 'normalized'
{Invalid or deleted object.} 
t.Units
{Invalid or deleted object.} 
 t = text(0.9, 0.9,['r = ' num2str(round(r(1,2),2))],'Position',[317 2128 0]);
       
t.Units
ans =
    'data'
t.Units = 'normalized'
t = 
  <a href="matlab:helpPopup matlab.graphics.primitive.Text" style="font-weight:bold">Text</a> (r = -0.38) with properties:

                 String: 'r = -0.38'
               FontSize: 10
             FontWeight: 'normal'
               FontName: 'Helvetica'
                  Color: [0 0 0]
    HorizontalAlignment: 'left'
               Position: [0.7925 0.7093 0]
                  Units: 'normalized'

  Show <a href="matlab:if exist('t', 'var'), matlab.graphics.internal.getForDisplay('t', t, 'matlab.graphics.primitive.Text'), else, matlab.graphics.internal.getForDisplay('t'), end">all properties</a>
trap_MF
trap_MF =
  301.8249  331.9584  349.6842  326.4763  334.4902  354.4767
  133.1590  140.3561  173.0535  146.0251  159.9645  168.5988
   33.4824   35.7226   41.4184   37.2736   39.8912   41.2707
   26.9047   27.7476   28.4864   27.3640   28.5506   28.6579
   26.9047   27.7476   28.4864   27.3640   28.5506   28.6579
 for irow = 1:size(trap_MF,1)
            %             [rsquared(irow),pvalue(irow), ~,rlo(irow),rup(irow)] = plotCorr (trap_MF(irow,:),trap_JCF(irow,:),1,0.05,Plot_colors(irow,:),5);
            plot(mean(trap_MF(irow,:),2), mean(trap_JCF(irow,:),2),'FaceColor',Plot_colors(irow,:),'.','MarkerSize',20)
        end
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plot')" style="font-weight:bold">plot</a>
Data must be a single input of y-values or one or more pairs of x- and y-values.} 
mean(trap_MF(irow,:),2)
ans =
  333.1518
mean(trap_JCF(irow,:),2)
ans =
   2.5725e+03
Plot_colors
Plot_colors =
    0.2670    0.0049    0.3294
    0.2539    0.2653    0.5300
    0.1636    0.4711    0.5581
    0.1373    0.6623    0.5156
    0.4870    0.8239    0.3123
Plot_colors(irow,:)
ans =
    0.2670    0.0049    0.3294
plot(mean(trap_MF(irow,:),2), mean(trap_JCF(irow,:),2),'FaceColor',Plot_colors(irow,:),'.','MarkerSize',20)
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plot')" style="font-weight:bold">plot</a>
Data must be a single input of y-values or one or more pairs of x- and y-values.} 
dbup 1;
clc
 plot(mean(trap_MF(irow,:),2), mean(trap_JCF(irow,:),2),
  plot(mean(trap_MF(irow,:),2), mean(trap_JCF(irow,:),2),
                                                         ↑
{Invalid expression. When calling a function or indexing a variable, use parentheses. Otherwise, check for mismatched delimiters.
} 
plot(mean(trap_MF(irow,:),2), mean(trap_JCF(irow,:),2))
{Unrecognized function or variable 'trap_MF'.} 
trap_MF
{Unrecognized function or variable 'trap_MF'.} 
trap_JCF
{Unrecognized function or variable 'trap_JCF'.} 
if system_dependent('IsDebugMode')==1, dbquit; end
plotReuslts_CMBBE_withTestData
[Warning: Exported image displays axes toolbar. To remove axes toolbar from image, export again.] 
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',141,1)">141 </a>        for irow = 1:size(trap_MF,1)
 for irow = 1:size(trap_MF,1)
            %             [rsquared(irow),pvalue(irow), ~,rlo(irow),rup(irow)] = plotCorr (trap_MF(irow,:),trap_JCF(irow,:),1,0.05,Plot_colors(irow,:),5);
            plot(mean(trap_MF(irow,:),2), mean(trap_JCF(irow,:),2),'FaceColor',Plot_colors(irow,:),'.','MarkerSize',20)
        end
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plot')" style="font-weight:bold">plot</a>
Data must be a single input of y-values or one or more pairs of x- and y-values.} 
trap_MF
trap_MF =
  301.8249  331.9584  349.6842  326.4763  334.4902  354.4767
  133.1590  140.3561  173.0535  146.0251  159.9645  168.5988
   33.4824   35.7226   41.4184   37.2736   39.8912   41.2707
   26.9047   27.7476   28.4864   27.3640   28.5506   28.6579
   26.9047   27.7476   28.4864   27.3640   28.5506   28.6579
mean(trap_MF(irow,:)
 mean(trap_MF(irow,:)
                     ↑
{Invalid expression. When calling a function or indexing a variable, use parentheses. Otherwise, check for mismatched delimiters.
} 
mean(trap_MF(irow,:))
ans =
  333.1518
mean(trap_MF(irow,:),2)
ans =
  333.1518
 plot(mean(trap_MF(irow,:),2), mean(trap_JCF(irow,:),2)
  plot(mean(trap_MF(irow,:),2), mean(trap_JCF(irow,:),2)
                                                        ↑
{Invalid expression. When calling a function or indexing a variable, use parentheses. Otherwise, check for mismatched delimiters.
} 
 plot(mean(trap_MF(irow,:),2), mean(trap_JCF(irow,:),2))
plot(mean(trap_MF(irow,:),2), mean(trap_JCF(irow,:),2))
mean(trap_JCF(irow,:),2)
ans =
   2.5725e+03
mean(trap_MF(irow,:),2)
ans =
  333.1518
p = plot(mean(trap_MF(irow,:),2), mean(trap_JCF(irow,:),2))
p = 
  <a href="matlab:helpPopup matlab.graphics.chart.primitive.Line" style="font-weight:bold">Line</a> with properties:

              Color: [0.9290 0.6940 0.1250]
          LineStyle: '-'
          LineWidth: 0.5000
             Marker: 'none'
         MarkerSize: 6
    MarkerFaceColor: 'none'
              XData: 333.1518
              YData: 2.5725e+03

  Show <a href="matlab:if exist('p', 'var'), matlab.graphics.internal.getForDisplay('p', p, 'matlab.graphics.chart.primitive.Line'), else, matlab.graphics.internal.getForDisplay('p'), end">all properties</a>
  for irow = 1:size(trap_MF,1)
            %             [rsquared(irow),pvalue(irow), ~,rlo(irow),rup(irow)] = plotCorr (trap_MF(irow,:),trap_JCF(irow,:),1,0.05,Plot_colors(irow,:),5);
            plot(mean(trap_MF(irow,:),2), mean(trap_JCF(irow,:),2),'MarkerFaceColor',Plot_colors(irow,:),'.','MarkerSize',20)
        end
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plot')" style="font-weight:bold">plot</a>
Data must be a single input of y-values or one or more pairs of x- and y-values.} 
Plot_colors(irow,:)
ans =
    0.2670    0.0049    0.3294
plot(mean(trap_MF(irow,:),2), mean(trap_JCF(irow,:),2),'.','MarkerFaceColor',Plot_colors(irow,:),'MarkerSize',20)
)
 )
 ↑
{Invalid expression. When calling a function or indexing a variable, use parentheses. Otherwise, check for mismatched delimiters.
} 
  plot(mean(trap_MF(irow,:),2), mean(trap_JCF(irow,:),2),'.','MarkerFaceColor',Plot_colors(irow,:),'MarkerSize',20)
  axes(ha(count)); hold on
        % loop throguh rows(different weights)
        for irow = 1:size(trap_MF,1)
            %             [rsquared(irow),pvalue(irow), ~,rlo(irow),rup(irow)] = plotCorr (trap_MF(irow,:),trap_JCF(irow,:),1,0.05,Plot_colors(irow,:),5);
            x = mean(trap_MF(irow,:),2); 
            y = mean(trap_JCF(irow,:),2);
            plot(x, y,'.','MarkerFaceColor',Plot_colors(irow,:),'MarkerSize',20)
            errorbar(x, y, std(trap_JCF(irow,:),0,2),'Color',Plot_colors(irow,:),'LineStyle','none')
            errorbar(x, y, std(trap_MF(irow,:),0,2),'horizontal','Color',Plot_colors(irow,:),'LineStyle','none')
        end
  ylim([0 3000])
std(trap_MF(irow,:),0,2)
ans =
    0.7248
x
x =
   27.9519
y
y =
   2.5944e+03
irow
irow =
     5
  plot(mean(trap_MF,2), mean(trap_JCF,2),'.','MarkerSize',20)
        errorbar(mean(trap_MF,2),mean(trap_JCF,2), std(trap_JCF,0,2),'Color',[0 0 0],'LineStyle','none')
        errorbar(mean(trap_MF,2),mean(trap_JCF,2), std(trap_MF,0,2),'horizontal','Color',[0 0 0],'LineStyle','none')
        [r, pvalue,rlo,rup] = corrcoef(mean(trap_MF,2),mean(trap_JCF,2));
        t = text(0.9, 0.9,['r = ' num2str(round(r(1,2),2))],'Units','normalized','Position',[.7925 0.7093 0]);
        ylim([0 3000])
        ylabel('Contact force (AUC)')
        if any(count == LastRow)
            xlabel('Muscle force (AUC)')
        end
if system_dependent('IsDebugMode')==1, dbquit; end
plotReuslts_CMBBE_withTestData
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',159,1)">159 </a>    end
if system_dependent('IsDebugMode')==1, dbcont; end
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',159,1)">159 </a>    end
 ax = ha(1);
    lg = legend(ax.Children(2:2:end),legend_Iterations);
    lg.Position = [0.3 0.78 0.21 0.05];
    lg.Interpreter = "none";
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Joint contact forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect
if system_dependent('IsDebugMode')==1, dbquit; end
plotReuslts_CMBBE_withTestData
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',162,1)">162 </a>    ax = ha(1);
 ax = ha(1);
    lg = legend(ax.Children(2:2:end),legend_Iterations);
    lg.Position = [0.3 0.78 0.21 0.05];
    lg.Interpreter = "none";
    tight_subplot_ticks(ha,LastRow,0)
    suptitle(['Joint contact forces ' leg ],'FontName',get(gca,'FontName'))
    mmfn_inspect

    saveas(gcf,[savedir fp 'JCF_results_' l '.tiff'])
    close all
if system_dependent('IsDebugMode')==1, dbquit; end
plotReuslts_CMBBE_withTestData
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',177,1)">177 </a>end
clc
if system_dependent('IsDebugMode')==1, dbcont; end
{Unrecognized field name "recfem_r".
Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plotReuslts_CMBBE_withTestData', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m', 82)" style="font-weight:bold">plotReuslts_CMBBE_withTestData</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',82,0)">line 82</a>)
                trap_MF(end+1, :) = trap.muscleForces.([penalties{iPen}]).([MuscleName '_' l]);} 
opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',82,0)
if system_dependent('IsDebugMode')==1, dbcont; end
loading data for right leg...
results_SO_right_1_Pen0_AVA_p30
{Operation terminated by user during <a href="matlab:matlab.internal.language.introspective.errorDocCallback('str2num>protected_conversion')" style="font-weight:bold">str2num>protected_conversion</a>

In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('str2num', 'C:\Program Files\MATLAB\R2022a\toolbox\matlab\strfun\str2num.m', 61)" style="font-weight:bold">str2num</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2022a\toolbox\matlab\strfun\str2num.m',61,0)">line 61</a>)
      [x,ok] = protected_conversion(['[' s ']'], isDefaultCall, isRestrictedEval); % Always add brackets
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('load_sto_file', 'C:\Git\MSKmodelling\src\OpenSim\load_sto_file.m', 75)" style="font-weight:bold">load_sto_file</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\src\OpenSim\load_sto_file.m',75,0)">line 75</a>)
    if ~isempty(str2num(f_name(1)))&& ~contains(f_name,'iliacus')
In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('Convert2Mat', 'C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\Convert2Mat.m', 86)" style="font-weight:bold">Convert2Mat</a> (<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\Convert2Mat.m',86,0)">line 86</a>)
            force_data = load_sto_file(force_file);} 
plotReuslts_CMBBE_withTestData
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',82,1)">82  </a>                trap_MF(end+1, :) = trap.muscleForces.([penalties{iPen}]).([MuscleName '_' l]);
if system_dependent('IsDebugMode')==1, dbquit; end
Convert2Mat
clc
iLeg = 2
iLeg =
     2
if system_dependent('IsDebugMode')==1, dbcont; end
loading data for right leg...
results_SO_right_1_Pen0_AVA_p30
results_SO_right_2_Pen0_AVA_p30
results_SO_right_3_Pen0_AVA_p30
results_SO_right_4_Pen0_AVA_p30
results_SO_right_5_Pen0_AVA_p30
results_SO_right_6_Pen0_AVA_p30
results_SO_right_1_Pen10_AVA_p30
results_SO_right_2_Pen10_AVA_p30
results_SO_right_3_Pen10_AVA_p30
results_SO_right_4_Pen10_AVA_p30
results_SO_right_5_Pen10_AVA_p30
results_SO_right_6_Pen10_AVA_p30
results_SO_right_1_Pen100_AVA_p30
results_SO_right_2_Pen100_AVA_p30
results_SO_right_3_Pen100_AVA_p30
results_SO_right_4_Pen100_AVA_p30
results_SO_right_5_Pen100_AVA_p30
results_SO_right_6_Pen100_AVA_p30
results_SO_right_1_Pen500_AVA_p30
results_SO_right_2_Pen500_AVA_p30
results_SO_right_3_Pen500_AVA_p30
results_SO_right_4_Pen500_AVA_p30
results_SO_right_5_Pen500_AVA_p30
results_SO_right_6_Pen500_AVA_p30
results_SO_right_1_Pen1000_AVA_p30
results_SO_right_2_Pen1000_AVA_p30
results_SO_right_3_Pen1000_AVA_p30
results_SO_right_4_Pen1000_AVA_p30
results_SO_right_5_Pen1000_AVA_p30
results_SO_right_6_Pen1000_AVA_p30
if system_dependent('IsDebugMode')==1, dbquit; end
plotReuslts_CMBBE_withTestData
iLeg = 2
iLeg =
     2
if system_dependent('IsDebugMode')==1, dbcont; end
<a href="matlab: opentoline('C:\Git\MSKmodelling\Projects\MatlabStaticOptimization\Utilities\plotReuslts_CMBBE_withTestData.m',177,1)">177 </a>end
