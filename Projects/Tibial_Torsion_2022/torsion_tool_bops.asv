

function torsion_tool_bops(model_path,osim_version)


clc; close all;  % clean workspace (use restoredefaultpath if needed)
if nargin < 1 || ~isfile(model_path)
    model_path = 'C:\Code\Git\MSKmodelling\src\TorsionTool-Veerkamp2021\osim4\gait2392_genericsimplOS4.osim';
end

if nargin < 2
    osim_version = 4;
end

add_tosion_tool_to_path(osim_version)

[dir_contains_model,model,ext] = fileparts(model_path);
model = [model ext];
markerset = 'MarkerSet.xml';
cd(dir_contains_model)

if ~exist(markerset,'file')
    get_markerset_osim_model(model)
end

% geneirc values (in degrees)
legs = {'R'};
original_AV = 17.6;  % anteversion angle
original_NS = 123.3; % neck-shaft angle
original_TT = 0;     % tibial torsion angle

femurAnteversion_angles   = original_AV + [];
femurNeckShaft_angles     = original_NS + [];
tibialTorsion_angles      =  original_TT + [-30,-15,0,15,30];

[m,n] = ndgrid(femurAnteversion_angles,femurNeckShaft_angles);
femurCombos = [m(:),n(:)];

for iLeg = 1:length(legs)

    % apply all the femur rotations
    for iFem = 1:length(femurCombos)
        deform_bone = 'F';
        which_leg = legs{iLeg};
        angle_AV = femurCombos(iFem,1);
        angle_NS = femurCombos(iFem,2);
        AV_str = strrep(num2str(angle_AV),'-','minus');
        NS_str = strrep(num2str(angle_NS),'-','minus');
        deformed_model = [which_leg '_NSA_' NS_str '_AVA_' AV_str];
        cd(dir_contains_model)
        make_PEmodel(model, deformed_model, markerset, deform_bone, which_leg, angle_AV, angle_NS);
    end

    % apply all the tibial rotations
    which_leg   = legs{iLeg};
    deform_bone = 'T';
    apply_tibial_torsions(tibialTorsion_angles,which_leg,deform_bone)
end


function add_tosion_tool_to_path(osim_version)

osim_version_str = ['osim' num2str(floor(osim_version))];

% get dir of the current file
activeFile = [mfilename('fullpath') '.m'];
mskmodelling_path = fileparts(fileparts(fileparts(activeFile)));

% if the mskmodelling pipeline is not in the path add it
try fp;catch; addpath(genpath(mskmodelling_path));end


% define dir of the torsion tool and check all the versions in the folder
torsion_tool_path = [mskmodelling_path fp 'src\TorsionTool-Veerkamp2021'];
torsion_tool_path_version = ([torsion_tool_path fp osim_version_str]);
all_versions = ls(torsion_tool_path);


% check which versions of the torsion tool ar in the path
onPath_current_version = is_on_path(torsion_tool_path_version);
onPath_other_versions = [];
for i = 3:size(all_versions,1)
    if ~isequal(all_versions(i,:), osim_version_str)
        onPath_other_versions(end+1) = is_on_path([torsion_tool_path fp strtrim(all_versions(i,:))]);
    end
end

% if none or more than one version are in the path
if onPath_current_version==0 || any(onPath_other_versions == 1)
    disp(['adding torsion tool for OpenSim version ' osim_version_str ' to the path'])
    warning off
    rmpath((torsion_tool_path))                     % remove all versions from path
    addpath(genpath(torsion_tool_path_version))     % add to path only the needed version
end


function apply_tibial_torsions(tibialTorsion_angles,which_leg,deform_bone)

for iTT = 1:length(tibialTorsion_angles)

    cd(dir_contains_model)
    if contains(deform_bone,'T')
        angle_TT    = tibialTorsion_angles(iTT);
        TT_str = strrep(num2str(angle_TT),'-','minus');
        deformed_model = [which_leg '_TT_' TT_str];
        make_PEmodel(model, deformed_model, markerset, deform_bone, which_leg, angle_TT);
    else

    end
end